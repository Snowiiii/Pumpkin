// From da java

use crate::generation::noise::density::peaks_valleys_noise;
use crate::generation::noise::lerp;

use super::component_functions::SharedComponentReference;
use super::spline::{FloatAmplifier, ImmutableSpline, ImmutableSplineRef, SplineBuilder};

#[inline]
fn get_offset_value(f: f32, g: f32, h: f32) -> f32 {
    let k = (1f32 - g) * -0.5f32 + 1f32;
    let l = 0.5f32 * (1f32 - g);

    let m = (f + 1.17f32) * 0.46082947f32;
    let n = m * k - l;

    if f < h {
        n.max(-0.2222f32)
    } else {
        n.max(0f32)
    }
}

#[inline]
fn skew_map(f: f32) -> f32 {
    let i = 1f32 - (1f32 - f) * 0.5f32;
    let j = 0.5f32 * (1f32 - f);

    j / (0.46082947f32 * i) - 1.17f32
}

#[inline]
fn diff_quot(f: f32, g: f32, h: f32, i: f32) -> f32 {
    (g - f) / (i - h)
}

fn create_ridges_spline(
    function: SharedComponentReference,
    f: f32,
    bl: bool,
    amplifier: FloatAmplifier,
) -> ImmutableSpline {
    let builder = SplineBuilder::new(function, amplifier);

    let i = get_offset_value(-1f32, f, -0.7f32);
    let k = get_offset_value(1f32, f, -0.7f32);

    let l = skew_map(f);

    let builder = if -0.65f32 < l && l < 1f32 {
        let n = get_offset_value(-0.65f32, f, -0.7f32);
        let p = get_offset_value(-0.75f32, f, -0.7f32);
        let q = diff_quot(i, p, -1f32, -0.75f32);
        let builder = builder
            .add_fixed_value_derivative(-1f32, i, q)
            .add_fixed_value(-0.75f32, p)
            .add_fixed_value(-0.65f32, n);

        let r = get_offset_value(l, f, -0.7f32);
        let s = diff_quot(r, k, l, 1f32);
        builder
            .add_fixed_value(l - 0.01f32, r)
            .add_fixed_value_derivative(l, r, s)
            .add_fixed_value_derivative(1f32, k, s)
    } else {
        let n = diff_quot(i, k, -1f32, 1f32);
        let builder = if bl {
            builder
                .add_fixed_value(-1f32, 0.2f32.max(i))
                .add_fixed_value_derivative(0f32, lerp(0.5f32, i, k), n)
        } else {
            builder.add_fixed_value_derivative(-1f32, i, n)
        };

        builder.add_fixed_value_derivative(1f32, k, n)
    };

    builder.build()
}

#[allow(clippy::too_many_arguments)]
fn create_standard_spline(
    ridges: SharedComponentReference,
    continental: f32,
    f: f32,
    g: f32,
    h: f32,
    i: f32,
    j: f32,
    amplifier: FloatAmplifier,
) -> ImmutableSpline {
    let k = j.max(0.5f32 * (f - continental));
    let l = 5f32 * (g - f);
    SplineBuilder::new(ridges, amplifier)
        .add_fixed_value_derivative(-1f32, continental, k)
        .add_fixed_value_derivative(-0.4f32, f, k.min(l))
        .add_fixed_value_derivative(0f32, g, l)
        .add_fixed_value_derivative(0.4f32, h, 2f32 * (h - g))
        .add_fixed_value_derivative(1f32, i, 0.7f32 * (i - h))
        .build()
}

fn create_total_spline(
    erosion: SharedComponentReference,
    ridges: SharedComponentReference,
    ridges_folded: SharedComponentReference,
    f: f32,
    bl: bool,
    amplifier: FloatAmplifier,
) -> ImmutableSpline {
    let spline_ref: ImmutableSplineRef = SplineBuilder::new(ridges.clone(), amplifier)
        .add_fixed_value(-0.2f32, 6.3f32)
        .add_fixed_value(0.2f32, f)
        .build()
        .into();

    let builder = SplineBuilder::new(erosion, amplifier);
    let builder = builder
        .add_spline_value(-0.6f32, spline_ref.clone())
        .add_spline_value(
            -0.5f32,
            SplineBuilder::new(ridges.clone(), amplifier)
                .add_fixed_value(-0.05f32, 6.3f32)
                .add_fixed_value(0.05f32, 2.67f32)
                .build()
                .into(),
        )
        .add_spline_value(-0.35f32, spline_ref.clone())
        .add_spline_value(-0.25f32, spline_ref.clone())
        .add_spline_value(
            -0.1f32,
            SplineBuilder::new(ridges.clone(), amplifier)
                .add_fixed_value(-0.05f32, 2.67f32)
                .add_fixed_value(0.05f32, 6.3f32)
                .build()
                .into(),
        )
        .add_spline_value(0.03f32, spline_ref.clone());

    let builder = if bl {
        let spline2 = SplineBuilder::new(ridges.clone(), amplifier)
            .add_fixed_value(0f32, f)
            .add_fixed_value(0.1f32, 0.625f32)
            .build();
        let spline3_ref: ImmutableSplineRef = SplineBuilder::new(ridges_folded.clone(), amplifier)
            .add_fixed_value(-0.9f32, f)
            .add_spline_value(-0.69f32, spline2.into())
            .build()
            .into();

        builder
            .add_fixed_value(0.35f32, f)
            .add_spline_value(0.45f32, spline3_ref.clone())
            .add_spline_value(0.55f32, spline3_ref.clone())
            .add_fixed_value(0.62f32, f)
    } else {
        let spline2_ref: ImmutableSplineRef = SplineBuilder::new(ridges_folded.clone(), amplifier)
            .add_spline_value(-0.7f32, spline_ref.clone())
            .add_fixed_value(-0.15f32, 1.37f32)
            .build()
            .into();

        let spline3_ref: ImmutableSplineRef = SplineBuilder::new(ridges_folded.clone(), amplifier)
            .add_spline_value(0.45f32, spline_ref.clone())
            .add_fixed_value(0.7f32, 1.56f32)
            .build()
            .into();

        builder
            .add_spline_value(0.05f32, spline3_ref.clone())
            .add_spline_value(0.4f32, spline3_ref.clone())
            .add_spline_value(0.45f32, spline2_ref.clone())
            .add_spline_value(0.55f32, spline2_ref.clone())
            .add_fixed_value(0.58f32, f)
    };

    builder.build()
}

fn create_folded_ridges_spline(
    ridges: SharedComponentReference,
    ridges_folded: SharedComponentReference,
    f: f32,
    g: f32,
    amplifier: FloatAmplifier,
) -> ImmutableSpline {
    let h = peaks_valleys_noise(0.4f32);
    let i = peaks_valleys_noise(0.56666666f32);
    let j = (h + i) / 2f32;

    let builder = SplineBuilder::new(ridges_folded, amplifier);

    let builder = builder.add_fixed_value(h, 0f32);
    let builder = if g > 0f32 {
        builder.add_spline_value(
            j,
            create_ridges_part_spline(ridges.clone(), g, amplifier).into(),
        )
    } else {
        builder.add_fixed_value(j, 0f32)
    };

    let builder = if f > 0f32 {
        builder.add_spline_value(
            1f32,
            create_ridges_part_spline(ridges.clone(), f, amplifier).into(),
        )
    } else {
        builder.add_fixed_value(1f32, 0f32)
    };

    builder.build()
}

#[inline]
fn create_ridges_part_spline(
    ridges: SharedComponentReference,
    f: f32,
    amplifier: FloatAmplifier,
) -> ImmutableSpline {
    let g = 0.63f32 * f;
    let h = 0.3f32 * f;
    SplineBuilder::new(ridges, amplifier)
        .add_fixed_value(-0.01f32, g)
        .add_fixed_value(0.01f32, h)
        .build()
}

#[allow(clippy::too_many_arguments)]
#[inline]
fn create_eroded_ridges_spline(
    erosion: SharedComponentReference,
    ridges: SharedComponentReference,
    ridges_folded: SharedComponentReference,
    f: f32,
    g: f32,
    h: f32,
    i: f32,
    amplifier: FloatAmplifier,
) -> ImmutableSpline {
    let spline =
        create_folded_ridges_spline(ridges.clone(), ridges_folded.clone(), f, h, amplifier);
    let spline2_ref: ImmutableSplineRef =
        create_folded_ridges_spline(ridges.clone(), ridges_folded.clone(), g, i, amplifier).into();

    SplineBuilder::new(erosion, amplifier)
        .add_spline_value(-1f32, spline.into())
        .add_spline_value(-0.78f32, spline2_ref.clone())
        .add_spline_value(-0.5775f32, spline2_ref)
        .add_fixed_value(-0.375f32, 0f32)
        .build()
}

#[allow(clippy::too_many_arguments)]
fn create_continental_offset_spline(
    erosion: SharedComponentReference,
    ridges: SharedComponentReference,
    continental: f32,
    f: f32,
    g: f32,
    h: f32,
    i: f32,
    j: f32,
    bl: bool,
    bl2: bool,
    amplifier: FloatAmplifier,
) -> ImmutableSpline {
    let spline = create_ridges_spline(ridges.clone(), lerp(h, 0.6f32, 1.5f32), bl2, amplifier);
    let spline2 = create_ridges_spline(ridges.clone(), lerp(h, 0.6f32, 1f32), bl2, amplifier);
    let spline3 = create_ridges_spline(ridges.clone(), h, bl2, amplifier);
    let spline4 = create_standard_spline(
        ridges.clone(),
        continental - 0.15f32,
        0.5f32 * h,
        lerp(0.5f32, 0.5f32, 0.5f32) * h,
        0.5f32 * h,
        0.6f32 * h,
        0.5f32,
        amplifier,
    );

    let spline5 = create_standard_spline(
        ridges.clone(),
        continental,
        i * h,
        f * h,
        0.5f32 * h,
        0.6f32 * h,
        0.5f32,
        amplifier,
    );

    let spline6_ref: ImmutableSplineRef =
        create_standard_spline(ridges.clone(), continental, i, i, f, g, 0.5f32, amplifier).into();

    let spline7_ref: ImmutableSplineRef =
        create_standard_spline(ridges.clone(), continental, i, i, f, g, 0.5f32, amplifier).into();

    let spline8_ref: ImmutableSplineRef = SplineBuilder::new(ridges.clone(), amplifier)
        .add_fixed_value(-1f32, continental)
        .add_spline_value(-0.4f32, spline6_ref.clone())
        .add_fixed_value(0f32, g + 0.07f32)
        .build()
        .into();

    let spline9 = create_standard_spline(ridges.clone(), -0.02f32, j, j, f, g, 0f32, amplifier);

    let builder = SplineBuilder::new(erosion, amplifier);
    let builder = builder
        .add_spline_value(-0.85f32, spline.into())
        .add_spline_value(-0.7f32, spline2.into())
        .add_spline_value(-0.4f32, spline3.into())
        .add_spline_value(-0.35f32, spline4.into())
        .add_spline_value(-0.1f32, spline5.into())
        .add_spline_value(0.2f32, spline6_ref);

    let builder = if bl {
        builder
            .add_spline_value(0.4f32, spline7_ref.clone())
            .add_spline_value(0.45f32, spline8_ref.clone())
            .add_spline_value(0.55f32, spline8_ref)
            .add_spline_value(0.58f32, spline7_ref)
    } else {
        builder
    };

    builder.add_spline_value(0.7f32, spline9.into()).build()
}

pub fn create_offset_spline(
    contentents: SharedComponentReference,
    erosion: SharedComponentReference,
    ridges_folded: SharedComponentReference,
    amplified: bool,
) -> ImmutableSpline {
    let amplification = if amplified {
        FloatAmplifier::OffsetAmplifier
    } else {
        FloatAmplifier::Identity
    };

    let spline1_ref: ImmutableSplineRef = create_continental_offset_spline(
        erosion.clone(),
        ridges_folded.clone(),
        -0.15f32,
        0f32,
        0f32,
        0.1f32,
        0f32,
        -0.03f32,
        false,
        false,
        amplification,
    )
    .into();
    let spline2 = create_continental_offset_spline(
        erosion.clone(),
        ridges_folded.clone(),
        -0.1f32,
        0.03f32,
        0.1f32,
        0.1f32,
        0.01f32,
        -0.03f32,
        false,
        false,
        amplification,
    );
    let spline3 = create_continental_offset_spline(
        erosion.clone(),
        ridges_folded.clone(),
        -0.1f32,
        0.03f32,
        0.1f32,
        0.7f32,
        0.01f32,
        -0.03f32,
        true,
        true,
        amplification,
    );
    let spline4 = create_continental_offset_spline(
        erosion.clone(),
        ridges_folded.clone(),
        -0.05f32,
        0.03f32,
        0.1f32,
        1f32,
        0.01f32,
        0.01f32,
        true,
        true,
        amplification,
    );

    SplineBuilder::new(contentents.clone(), amplification)
        .add_fixed_value(-1.1f32, 0.044f32)
        .add_fixed_value(-1.02f32, -0.2222f32)
        .add_fixed_value(-0.51f32, -0.2222f32)
        .add_fixed_value(-0.44f32, -0.12f32)
        .add_fixed_value(-0.18f32, -0.12f32)
        .add_spline_value(-0.16f32, spline1_ref.clone())
        .add_spline_value(-0.15f32, spline1_ref)
        .add_spline_value(-0.1f32, spline2.into())
        .add_spline_value(0.25f32, spline3.into())
        .add_spline_value(1f32, spline4.into())
        .build()
}

pub fn create_factor_spline(
    continents: SharedComponentReference,
    erosion: SharedComponentReference,
    ridges: SharedComponentReference,
    ridges_folded: SharedComponentReference,
    amplified: bool,
) -> ImmutableSpline {
    let amplification = if amplified {
        FloatAmplifier::FactorAmplifier
    } else {
        FloatAmplifier::Identity
    };

    SplineBuilder::new(continents, FloatAmplifier::Identity)
        .add_fixed_value(-0.19f32, 3.95f32)
        .add_spline_value(
            -0.15f32,
            create_total_spline(
                erosion.clone(),
                ridges.clone(),
                ridges_folded.clone(),
                6.25f32,
                true,
                FloatAmplifier::Identity,
            )
            .into(),
        )
        .add_spline_value(
            -0.1f32,
            create_total_spline(
                erosion.clone(),
                ridges.clone(),
                ridges_folded.clone(),
                5.47f32,
                true,
                amplification,
            )
            .into(),
        )
        .add_spline_value(
            0.03f32,
            create_total_spline(
                erosion.clone(),
                ridges.clone(),
                ridges_folded.clone(),
                5.08f32,
                true,
                amplification,
            )
            .into(),
        )
        .add_spline_value(
            0.06f32,
            create_total_spline(
                erosion,
                ridges,
                ridges_folded,
                4.69f32,
                false,
                amplification,
            )
            .into(),
        )
        .build()
}

pub fn create_jaggedness_spline(
    continents: SharedComponentReference,
    erosion: SharedComponentReference,
    ridges: SharedComponentReference,
    ridges_folded: SharedComponentReference,
    amplified: bool,
) -> ImmutableSpline {
    let amplification = if amplified {
        FloatAmplifier::JaggednessAmplifier
    } else {
        FloatAmplifier::Identity
    };

    SplineBuilder::new(continents.clone(), amplification)
        .add_fixed_value(-0.11f32, 0f32)
        .add_spline_value(
            0.03f32,
            create_eroded_ridges_spline(
                erosion.clone(),
                ridges.clone(),
                ridges_folded.clone(),
                1f32,
                0.5f32,
                0f32,
                0f32,
                amplification,
            )
            .into(),
        )
        .add_spline_value(
            0.65f32,
            create_eroded_ridges_spline(
                erosion,
                ridges,
                ridges_folded,
                1f32,
                1f32,
                1f32,
                0f32,
                amplification,
            )
            .into(),
        )
        .build()
}

#[cfg(test)]
mod test {
    use pumpkin_core::random::{legacy_rand::LegacyRand, RandomDeriver, RandomImpl};

    use crate::generation::noise::density::{
        built_in_density_function::{
            CONTINENTS_OVERWORLD, EROSION_OVERWORLD, RIDGES_FOLDED_OVERWORLD, RIDGES_OVERWORLD,
        },
        component_functions::{ComponentReference, NoEnvironment, SharedComponentReference},
        spline::{FloatAmplifier, ImmutableSplineRef, SplineFunction},
        terrain_helpers::{
            create_continental_offset_spline, create_eroded_ridges_spline,
            create_folded_ridges_spline, create_standard_spline, get_offset_value, skew_map,
        },
        test::{FakeEnvironment, OwnedConverter, TestConverter},
        NoisePos, UnblendedNoisePos,
    };

    use super::{
        create_offset_spline, create_ridges_part_spline, create_ridges_spline, create_total_spline,
    };

    #[test]
    fn test_offset_value() {
        let values = [
            ((-0.5f32, -1.0f32, -0.5f32), 0.0f32),
            ((-0.5f32, -1.0f32, -0.4f32), -0.2222f32),
            ((-0.5f32, -1.0f32, -0.3f32), -0.2222f32),
            ((-0.5f32, -1.0f32, -0.20000002f32), -0.2222f32),
            ((-0.5f32, -1.0f32, -0.10000002f32), -0.2222f32),
            ((-0.5f32, -1.0f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.5f32, -0.9f32, -0.5f32), 0.0f32),
            ((-0.5f32, -0.9f32, -0.4f32), -0.2222f32),
            ((-0.5f32, -0.9f32, -0.3f32), -0.2222f32),
            ((-0.5f32, -0.9f32, -0.20000002f32), -0.2222f32),
            ((-0.5f32, -0.9f32, -0.10000002f32), -0.2222f32),
            ((-0.5f32, -0.9f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.5f32, -0.79999995f32, -0.5f32), 0.0f32),
            ((-0.5f32, -0.79999995f32, -0.4f32), -0.2222f32),
            ((-0.5f32, -0.79999995f32, -0.3f32), -0.2222f32),
            ((-0.5f32, -0.79999995f32, -0.20000002f32), -0.2222f32),
            ((-0.5f32, -0.79999995f32, -0.10000002f32), -0.2222f32),
            ((-0.5f32, -0.79999995f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.5f32, -0.6999999f32, -0.5f32), 0.0f32),
            ((-0.5f32, -0.6999999f32, -0.4f32), -0.2222f32),
            ((-0.5f32, -0.6999999f32, -0.3f32), -0.2222f32),
            ((-0.5f32, -0.6999999f32, -0.20000002f32), -0.2222f32),
            ((-0.5f32, -0.6999999f32, -0.10000002f32), -0.2222f32),
            ((-0.5f32, -0.6999999f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.5f32, -0.5999999f32, -0.5f32), 0.0f32),
            ((-0.5f32, -0.5999999f32, -0.4f32), -0.2222f32),
            ((-0.5f32, -0.5999999f32, -0.3f32), -0.2222f32),
            ((-0.5f32, -0.5999999f32, -0.20000002f32), -0.2222f32),
            ((-0.5f32, -0.5999999f32, -0.10000002f32), -0.2222f32),
            ((-0.5f32, -0.5999999f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.5f32, -0.4999999f32, -0.5f32), 0.0f32),
            ((-0.5f32, -0.4999999f32, -0.4f32), -0.2222f32),
            ((-0.5f32, -0.4999999f32, -0.3f32), -0.2222f32),
            ((-0.5f32, -0.4999999f32, -0.20000002f32), -0.2222f32),
            ((-0.5f32, -0.4999999f32, -0.10000002f32), -0.2222f32),
            ((-0.5f32, -0.4999999f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.5f32, -0.39999992f32, -0.5f32), 0.0f32),
            ((-0.5f32, -0.39999992f32, -0.4f32), -0.2222f32),
            ((-0.5f32, -0.39999992f32, -0.3f32), -0.2222f32),
            ((-0.5f32, -0.39999992f32, -0.20000002f32), -0.2222f32),
            ((-0.5f32, -0.39999992f32, -0.10000002f32), -0.2222f32),
            ((-0.5f32, -0.39999992f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.5f32, -0.29999992f32, -0.5f32), 0.0f32),
            ((-0.5f32, -0.29999992f32, -0.4f32), -0.2222f32),
            ((-0.5f32, -0.29999992f32, -0.3f32), -0.2222f32),
            ((-0.5f32, -0.29999992f32, -0.20000002f32), -0.2222f32),
            ((-0.5f32, -0.29999992f32, -0.10000002f32), -0.2222f32),
            ((-0.5f32, -0.29999992f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.5f32, -0.19999993f32, -0.5f32), 0.0f32),
            ((-0.5f32, -0.19999993f32, -0.4f32), -0.2222f32),
            ((-0.5f32, -0.19999993f32, -0.3f32), -0.2222f32),
            ((-0.5f32, -0.19999993f32, -0.20000002f32), -0.2222f32),
            ((-0.5f32, -0.19999993f32, -0.10000002f32), -0.2222f32),
            ((-0.5f32, -0.19999993f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.5f32, -0.09999993f32, -0.5f32), 0.0f32),
            ((-0.5f32, -0.09999993f32, -0.4f32), -0.2222f32),
            ((-0.5f32, -0.09999993f32, -0.3f32), -0.2222f32),
            ((-0.5f32, -0.09999993f32, -0.20000002f32), -0.2222f32),
            ((-0.5f32, -0.09999993f32, -0.10000002f32), -0.2222f32),
            ((-0.5f32, -0.09999993f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.5f32, 7.4505806E-8f32, -0.5f32), 0.0f32),
            ((-0.5f32, 7.4505806E-8f32, -0.4f32), -0.2222f32),
            ((-0.5f32, 7.4505806E-8f32, -0.3f32), -0.2222f32),
            ((-0.5f32, 7.4505806E-8f32, -0.20000002f32), -0.2222f32),
            ((-0.5f32, 7.4505806E-8f32, -0.10000002f32), -0.2222f32),
            ((-0.5f32, 7.4505806E-8f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.5f32, 0.100000076f32, -0.5f32), 0.0f32),
            ((-0.5f32, 0.100000076f32, -0.4f32), -0.2222f32),
            ((-0.5f32, 0.100000076f32, -0.3f32), -0.2222f32),
            ((-0.5f32, 0.100000076f32, -0.20000002f32), -0.2222f32),
            ((-0.5f32, 0.100000076f32, -0.10000002f32), -0.2222f32),
            ((-0.5f32, 0.100000076f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.5f32, 0.20000008f32, -0.5f32), 0.0f32),
            ((-0.5f32, 0.20000008f32, -0.4f32), -0.21474653f32),
            ((-0.5f32, 0.20000008f32, -0.3f32), -0.21474653f32),
            ((-0.5f32, 0.20000008f32, -0.20000002f32), -0.21474653f32),
            ((-0.5f32, 0.20000008f32, -0.10000002f32), -0.21474653f32),
            ((-0.5f32, 0.20000008f32, -1.4901161E-8f32), -0.21474653f32),
            ((-0.5f32, 0.30000007f32, -0.5f32), 0.0f32),
            ((-0.5f32, 0.30000007f32, -0.4f32), -0.14930873f32),
            ((-0.5f32, 0.30000007f32, -0.3f32), -0.14930873f32),
            ((-0.5f32, 0.30000007f32, -0.20000002f32), -0.14930873f32),
            ((-0.5f32, 0.30000007f32, -0.10000002f32), -0.14930873f32),
            ((-0.5f32, 0.30000007f32, -1.4901161E-8f32), -0.14930873f32),
            ((-0.5f32, 0.40000007f32, -0.5f32), 0.0f32),
            ((-0.5f32, 0.40000007f32, -0.4f32), -0.08387093f32),
            ((-0.5f32, 0.40000007f32, -0.3f32), -0.08387093f32),
            ((-0.5f32, 0.40000007f32, -0.20000002f32), -0.08387093f32),
            ((-0.5f32, 0.40000007f32, -0.10000002f32), -0.08387093f32),
            ((-0.5f32, 0.40000007f32, -1.4901161E-8f32), -0.08387093f32),
            ((-0.5f32, 0.50000006f32, -0.5f32), 0.0f32),
            ((-0.5f32, 0.50000006f32, -0.4f32), -0.018433183f32),
            ((-0.5f32, 0.50000006f32, -0.3f32), -0.018433183f32),
            ((-0.5f32, 0.50000006f32, -0.20000002f32), -0.018433183f32),
            ((-0.5f32, 0.50000006f32, -0.10000002f32), -0.018433183f32),
            ((-0.5f32, 0.50000006f32, -1.4901161E-8f32), -0.018433183f32),
            ((-0.5f32, 0.6000001f32, -0.5f32), 0.04700464f32),
            ((-0.5f32, 0.6000001f32, -0.4f32), 0.04700464f32),
            ((-0.5f32, 0.6000001f32, -0.3f32), 0.04700464f32),
            ((-0.5f32, 0.6000001f32, -0.20000002f32), 0.04700464f32),
            ((-0.5f32, 0.6000001f32, -0.10000002f32), 0.04700464f32),
            ((-0.5f32, 0.6000001f32, -1.4901161E-8f32), 0.04700464f32),
            ((-0.5f32, 0.7000001f32, -0.5f32), 0.112442434f32),
            ((-0.5f32, 0.7000001f32, -0.4f32), 0.112442434f32),
            ((-0.5f32, 0.7000001f32, -0.3f32), 0.112442434f32),
            ((-0.5f32, 0.7000001f32, -0.20000002f32), 0.112442434f32),
            ((-0.5f32, 0.7000001f32, -0.10000002f32), 0.112442434f32),
            ((-0.5f32, 0.7000001f32, -1.4901161E-8f32), 0.112442434f32),
            ((-0.5f32, 0.80000013f32, -0.5f32), 0.17788026f32),
            ((-0.5f32, 0.80000013f32, -0.4f32), 0.17788026f32),
            ((-0.5f32, 0.80000013f32, -0.3f32), 0.17788026f32),
            ((-0.5f32, 0.80000013f32, -0.20000002f32), 0.17788026f32),
            ((-0.5f32, 0.80000013f32, -0.10000002f32), 0.17788026f32),
            ((-0.5f32, 0.80000013f32, -1.4901161E-8f32), 0.17788026f32),
            ((-0.5f32, 0.90000015f32, -0.5f32), 0.24331802f32),
            ((-0.5f32, 0.90000015f32, -0.4f32), 0.24331802f32),
            ((-0.5f32, 0.90000015f32, -0.3f32), 0.24331802f32),
            ((-0.5f32, 0.90000015f32, -0.20000002f32), 0.24331802f32),
            ((-0.5f32, 0.90000015f32, -0.10000002f32), 0.24331802f32),
            ((-0.5f32, 0.90000015f32, -1.4901161E-8f32), 0.24331802f32),
            ((-0.5f32, 1.0000001f32, -0.5f32), 0.3087558f32),
            ((-0.5f32, 1.0000001f32, -0.4f32), 0.3087558f32),
            ((-0.5f32, 1.0000001f32, -0.3f32), 0.3087558f32),
            ((-0.5f32, 1.0000001f32, -0.20000002f32), 0.3087558f32),
            ((-0.5f32, 1.0000001f32, -0.10000002f32), 0.3087558f32),
            ((-0.5f32, 1.0000001f32, -1.4901161E-8f32), 0.3087558f32),
            ((-0.4f32, -1.0f32, -0.5f32), 0.0f32),
            ((-0.4f32, -1.0f32, -0.4f32), 0.0f32),
            ((-0.4f32, -1.0f32, -0.3f32), -0.2222f32),
            ((-0.4f32, -1.0f32, -0.20000002f32), -0.2222f32),
            ((-0.4f32, -1.0f32, -0.10000002f32), -0.2222f32),
            ((-0.4f32, -1.0f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.4f32, -0.9f32, -0.5f32), 0.0f32),
            ((-0.4f32, -0.9f32, -0.4f32), 0.0f32),
            ((-0.4f32, -0.9f32, -0.3f32), -0.2222f32),
            ((-0.4f32, -0.9f32, -0.20000002f32), -0.2222f32),
            ((-0.4f32, -0.9f32, -0.10000002f32), -0.2222f32),
            ((-0.4f32, -0.9f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.4f32, -0.79999995f32, -0.5f32), 0.0f32),
            ((-0.4f32, -0.79999995f32, -0.4f32), 0.0f32),
            ((-0.4f32, -0.79999995f32, -0.3f32), -0.2222f32),
            ((-0.4f32, -0.79999995f32, -0.20000002f32), -0.2222f32),
            ((-0.4f32, -0.79999995f32, -0.10000002f32), -0.2222f32),
            ((-0.4f32, -0.79999995f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.4f32, -0.6999999f32, -0.5f32), 0.0f32),
            ((-0.4f32, -0.6999999f32, -0.4f32), 0.0f32),
            ((-0.4f32, -0.6999999f32, -0.3f32), -0.2222f32),
            ((-0.4f32, -0.6999999f32, -0.20000002f32), -0.2222f32),
            ((-0.4f32, -0.6999999f32, -0.10000002f32), -0.2222f32),
            ((-0.4f32, -0.6999999f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.4f32, -0.5999999f32, -0.5f32), 0.0f32),
            ((-0.4f32, -0.5999999f32, -0.4f32), 0.0f32),
            ((-0.4f32, -0.5999999f32, -0.3f32), -0.2222f32),
            ((-0.4f32, -0.5999999f32, -0.20000002f32), -0.2222f32),
            ((-0.4f32, -0.5999999f32, -0.10000002f32), -0.2222f32),
            ((-0.4f32, -0.5999999f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.4f32, -0.4999999f32, -0.5f32), 0.0f32),
            ((-0.4f32, -0.4999999f32, -0.4f32), 0.0f32),
            ((-0.4f32, -0.4999999f32, -0.3f32), -0.2222f32),
            ((-0.4f32, -0.4999999f32, -0.20000002f32), -0.2222f32),
            ((-0.4f32, -0.4999999f32, -0.10000002f32), -0.2222f32),
            ((-0.4f32, -0.4999999f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.4f32, -0.39999992f32, -0.5f32), 0.0f32),
            ((-0.4f32, -0.39999992f32, -0.4f32), 0.0f32),
            ((-0.4f32, -0.39999992f32, -0.3f32), -0.2222f32),
            ((-0.4f32, -0.39999992f32, -0.20000002f32), -0.2222f32),
            ((-0.4f32, -0.39999992f32, -0.10000002f32), -0.2222f32),
            ((-0.4f32, -0.39999992f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.4f32, -0.29999992f32, -0.5f32), 0.0f32),
            ((-0.4f32, -0.29999992f32, -0.4f32), 0.0f32),
            ((-0.4f32, -0.29999992f32, -0.3f32), -0.2222f32),
            ((-0.4f32, -0.29999992f32, -0.20000002f32), -0.2222f32),
            ((-0.4f32, -0.29999992f32, -0.10000002f32), -0.2222f32),
            ((-0.4f32, -0.29999992f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.4f32, -0.19999993f32, -0.5f32), 0.0f32),
            ((-0.4f32, -0.19999993f32, -0.4f32), 0.0f32),
            ((-0.4f32, -0.19999993f32, -0.3f32), -0.2222f32),
            ((-0.4f32, -0.19999993f32, -0.20000002f32), -0.2222f32),
            ((-0.4f32, -0.19999993f32, -0.10000002f32), -0.2222f32),
            ((-0.4f32, -0.19999993f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.4f32, -0.09999993f32, -0.5f32), 0.0f32),
            ((-0.4f32, -0.09999993f32, -0.4f32), 0.0f32),
            ((-0.4f32, -0.09999993f32, -0.3f32), -0.2222f32),
            ((-0.4f32, -0.09999993f32, -0.20000002f32), -0.2222f32),
            ((-0.4f32, -0.09999993f32, -0.10000002f32), -0.2222f32),
            ((-0.4f32, -0.09999993f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.4f32, 7.4505806E-8f32, -0.5f32), 0.0f32),
            ((-0.4f32, 7.4505806E-8f32, -0.4f32), 0.0f32),
            ((-0.4f32, 7.4505806E-8f32, -0.3f32), -0.2222f32),
            ((-0.4f32, 7.4505806E-8f32, -0.20000002f32), -0.2222f32),
            ((-0.4f32, 7.4505806E-8f32, -0.10000002f32), -0.2222f32),
            ((-0.4f32, 7.4505806E-8f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.4f32, 0.100000076f32, -0.5f32), 0.0f32),
            ((-0.4f32, 0.100000076f32, -0.4f32), 0.0f32),
            ((-0.4f32, 0.100000076f32, -0.3f32), -0.2222f32),
            ((-0.4f32, 0.100000076f32, -0.20000002f32), -0.2222f32),
            ((-0.4f32, 0.100000076f32, -0.10000002f32), -0.2222f32),
            ((-0.4f32, 0.100000076f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.4f32, 0.20000008f32, -0.5f32), 0.0f32),
            ((-0.4f32, 0.20000008f32, -0.4f32), 0.0f32),
            ((-0.4f32, 0.20000008f32, -0.3f32), -0.18709676f32),
            ((-0.4f32, 0.20000008f32, -0.20000002f32), -0.18709676f32),
            ((-0.4f32, 0.20000008f32, -0.10000002f32), -0.18709676f32),
            ((-0.4f32, 0.20000008f32, -1.4901161E-8f32), -0.18709676f32),
            ((-0.4f32, 0.30000007f32, -0.5f32), 0.0f32),
            ((-0.4f32, 0.30000007f32, -0.4f32), 0.0f32),
            ((-0.4f32, 0.30000007f32, -0.3f32), -0.119354814f32),
            ((-0.4f32, 0.30000007f32, -0.20000002f32), -0.119354814f32),
            ((-0.4f32, 0.30000007f32, -0.10000002f32), -0.119354814f32),
            ((-0.4f32, 0.30000007f32, -1.4901161E-8f32), -0.119354814f32),
            ((-0.4f32, 0.40000007f32, -0.5f32), 0.0f32),
            ((-0.4f32, 0.40000007f32, -0.4f32), 0.0f32),
            ((-0.4f32, 0.40000007f32, -0.3f32), -0.05161287f32),
            ((-0.4f32, 0.40000007f32, -0.20000002f32), -0.05161287f32),
            ((-0.4f32, 0.40000007f32, -0.10000002f32), -0.05161287f32),
            ((-0.4f32, 0.40000007f32, -1.4901161E-8f32), -0.05161287f32),
            ((-0.4f32, 0.50000006f32, -0.5f32), 0.016129047f32),
            ((-0.4f32, 0.50000006f32, -0.4f32), 0.016129047f32),
            ((-0.4f32, 0.50000006f32, -0.3f32), 0.016129047f32),
            ((-0.4f32, 0.50000006f32, -0.20000002f32), 0.016129047f32),
            ((-0.4f32, 0.50000006f32, -0.10000002f32), 0.016129047f32),
            ((-0.4f32, 0.50000006f32, -1.4901161E-8f32), 0.016129047f32),
            ((-0.4f32, 0.6000001f32, -0.5f32), 0.08387101f32),
            ((-0.4f32, 0.6000001f32, -0.4f32), 0.08387101f32),
            ((-0.4f32, 0.6000001f32, -0.3f32), 0.08387101f32),
            ((-0.4f32, 0.6000001f32, -0.20000002f32), 0.08387101f32),
            ((-0.4f32, 0.6000001f32, -0.10000002f32), 0.08387101f32),
            ((-0.4f32, 0.6000001f32, -1.4901161E-8f32), 0.08387101f32),
            ((-0.4f32, 0.7000001f32, -0.5f32), 0.15161294f32),
            ((-0.4f32, 0.7000001f32, -0.4f32), 0.15161294f32),
            ((-0.4f32, 0.7000001f32, -0.3f32), 0.15161294f32),
            ((-0.4f32, 0.7000001f32, -0.20000002f32), 0.15161294f32),
            ((-0.4f32, 0.7000001f32, -0.10000002f32), 0.15161294f32),
            ((-0.4f32, 0.7000001f32, -1.4901161E-8f32), 0.15161294f32),
            ((-0.4f32, 0.80000013f32, -0.5f32), 0.2193549f32),
            ((-0.4f32, 0.80000013f32, -0.4f32), 0.2193549f32),
            ((-0.4f32, 0.80000013f32, -0.3f32), 0.2193549f32),
            ((-0.4f32, 0.80000013f32, -0.20000002f32), 0.2193549f32),
            ((-0.4f32, 0.80000013f32, -0.10000002f32), 0.2193549f32),
            ((-0.4f32, 0.80000013f32, -1.4901161E-8f32), 0.2193549f32),
            ((-0.4f32, 0.90000015f32, -0.5f32), 0.28709683f32),
            ((-0.4f32, 0.90000015f32, -0.4f32), 0.28709683f32),
            ((-0.4f32, 0.90000015f32, -0.3f32), 0.28709683f32),
            ((-0.4f32, 0.90000015f32, -0.20000002f32), 0.28709683f32),
            ((-0.4f32, 0.90000015f32, -0.10000002f32), 0.28709683f32),
            ((-0.4f32, 0.90000015f32, -1.4901161E-8f32), 0.28709683f32),
            ((-0.4f32, 1.0000001f32, -0.5f32), 0.35483873f32),
            ((-0.4f32, 1.0000001f32, -0.4f32), 0.35483873f32),
            ((-0.4f32, 1.0000001f32, -0.3f32), 0.35483873f32),
            ((-0.4f32, 1.0000001f32, -0.20000002f32), 0.35483873f32),
            ((-0.4f32, 1.0000001f32, -0.10000002f32), 0.35483873f32),
            ((-0.4f32, 1.0000001f32, -1.4901161E-8f32), 0.35483873f32),
            ((-0.3f32, -1.0f32, -0.5f32), 0.0f32),
            ((-0.3f32, -1.0f32, -0.4f32), 0.0f32),
            ((-0.3f32, -1.0f32, -0.3f32), 0.0f32),
            ((-0.3f32, -1.0f32, -0.20000002f32), -0.2222f32),
            ((-0.3f32, -1.0f32, -0.10000002f32), -0.2222f32),
            ((-0.3f32, -1.0f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.3f32, -0.9f32, -0.5f32), 0.0f32),
            ((-0.3f32, -0.9f32, -0.4f32), 0.0f32),
            ((-0.3f32, -0.9f32, -0.3f32), 0.0f32),
            ((-0.3f32, -0.9f32, -0.20000002f32), -0.2222f32),
            ((-0.3f32, -0.9f32, -0.10000002f32), -0.2222f32),
            ((-0.3f32, -0.9f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.3f32, -0.79999995f32, -0.5f32), 0.0f32),
            ((-0.3f32, -0.79999995f32, -0.4f32), 0.0f32),
            ((-0.3f32, -0.79999995f32, -0.3f32), 0.0f32),
            ((-0.3f32, -0.79999995f32, -0.20000002f32), -0.2222f32),
            ((-0.3f32, -0.79999995f32, -0.10000002f32), -0.2222f32),
            ((-0.3f32, -0.79999995f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.3f32, -0.6999999f32, -0.5f32), 0.0f32),
            ((-0.3f32, -0.6999999f32, -0.4f32), 0.0f32),
            ((-0.3f32, -0.6999999f32, -0.3f32), 0.0f32),
            ((-0.3f32, -0.6999999f32, -0.20000002f32), -0.2222f32),
            ((-0.3f32, -0.6999999f32, -0.10000002f32), -0.2222f32),
            ((-0.3f32, -0.6999999f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.3f32, -0.5999999f32, -0.5f32), 0.0f32),
            ((-0.3f32, -0.5999999f32, -0.4f32), 0.0f32),
            ((-0.3f32, -0.5999999f32, -0.3f32), 0.0f32),
            ((-0.3f32, -0.5999999f32, -0.20000002f32), -0.2222f32),
            ((-0.3f32, -0.5999999f32, -0.10000002f32), -0.2222f32),
            ((-0.3f32, -0.5999999f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.3f32, -0.4999999f32, -0.5f32), 0.0f32),
            ((-0.3f32, -0.4999999f32, -0.4f32), 0.0f32),
            ((-0.3f32, -0.4999999f32, -0.3f32), 0.0f32),
            ((-0.3f32, -0.4999999f32, -0.20000002f32), -0.2222f32),
            ((-0.3f32, -0.4999999f32, -0.10000002f32), -0.2222f32),
            ((-0.3f32, -0.4999999f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.3f32, -0.39999992f32, -0.5f32), 0.0f32),
            ((-0.3f32, -0.39999992f32, -0.4f32), 0.0f32),
            ((-0.3f32, -0.39999992f32, -0.3f32), 0.0f32),
            ((-0.3f32, -0.39999992f32, -0.20000002f32), -0.2222f32),
            ((-0.3f32, -0.39999992f32, -0.10000002f32), -0.2222f32),
            ((-0.3f32, -0.39999992f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.3f32, -0.29999992f32, -0.5f32), 0.0f32),
            ((-0.3f32, -0.29999992f32, -0.4f32), 0.0f32),
            ((-0.3f32, -0.29999992f32, -0.3f32), 0.0f32),
            ((-0.3f32, -0.29999992f32, -0.20000002f32), -0.2222f32),
            ((-0.3f32, -0.29999992f32, -0.10000002f32), -0.2222f32),
            ((-0.3f32, -0.29999992f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.3f32, -0.19999993f32, -0.5f32), 0.0f32),
            ((-0.3f32, -0.19999993f32, -0.4f32), 0.0f32),
            ((-0.3f32, -0.19999993f32, -0.3f32), 0.0f32),
            ((-0.3f32, -0.19999993f32, -0.20000002f32), -0.2222f32),
            ((-0.3f32, -0.19999993f32, -0.10000002f32), -0.2222f32),
            ((-0.3f32, -0.19999993f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.3f32, -0.09999993f32, -0.5f32), 0.0f32),
            ((-0.3f32, -0.09999993f32, -0.4f32), 0.0f32),
            ((-0.3f32, -0.09999993f32, -0.3f32), 0.0f32),
            ((-0.3f32, -0.09999993f32, -0.20000002f32), -0.2222f32),
            ((-0.3f32, -0.09999993f32, -0.10000002f32), -0.2222f32),
            ((-0.3f32, -0.09999993f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.3f32, 7.4505806E-8f32, -0.5f32), 0.0f32),
            ((-0.3f32, 7.4505806E-8f32, -0.4f32), 0.0f32),
            ((-0.3f32, 7.4505806E-8f32, -0.3f32), 0.0f32),
            ((-0.3f32, 7.4505806E-8f32, -0.20000002f32), -0.2222f32),
            ((-0.3f32, 7.4505806E-8f32, -0.10000002f32), -0.2222f32),
            ((-0.3f32, 7.4505806E-8f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.3f32, 0.100000076f32, -0.5f32), 0.0f32),
            ((-0.3f32, 0.100000076f32, -0.4f32), 0.0f32),
            ((-0.3f32, 0.100000076f32, -0.3f32), 0.0f32),
            ((-0.3f32, 0.100000076f32, -0.20000002f32), -0.2222f32),
            ((-0.3f32, 0.100000076f32, -0.10000002f32), -0.2222f32),
            ((-0.3f32, 0.100000076f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.3f32, 0.20000008f32, -0.5f32), 0.0f32),
            ((-0.3f32, 0.20000008f32, -0.4f32), 0.0f32),
            ((-0.3f32, 0.20000008f32, -0.3f32), 0.0f32),
            ((-0.3f32, 0.20000008f32, -0.20000002f32), -0.159447f32),
            ((-0.3f32, 0.20000008f32, -0.10000002f32), -0.159447f32),
            ((-0.3f32, 0.20000008f32, -1.4901161E-8f32), -0.159447f32),
            ((-0.3f32, 0.30000007f32, -0.5f32), 0.0f32),
            ((-0.3f32, 0.30000007f32, -0.4f32), 0.0f32),
            ((-0.3f32, 0.30000007f32, -0.3f32), 0.0f32),
            ((-0.3f32, 0.30000007f32, -0.20000002f32), -0.08940089f32),
            ((-0.3f32, 0.30000007f32, -0.10000002f32), -0.08940089f32),
            ((-0.3f32, 0.30000007f32, -1.4901161E-8f32), -0.08940089f32),
            ((-0.3f32, 0.40000007f32, -0.5f32), 0.0f32),
            ((-0.3f32, 0.40000007f32, -0.4f32), 0.0f32),
            ((-0.3f32, 0.40000007f32, -0.3f32), 0.0f32),
            ((-0.3f32, 0.40000007f32, -0.20000002f32), -0.01935479f32),
            ((-0.3f32, 0.40000007f32, -0.10000002f32), -0.01935479f32),
            ((-0.3f32, 0.40000007f32, -1.4901161E-8f32), -0.01935479f32),
            ((-0.3f32, 0.50000006f32, -0.5f32), 0.050691247f32),
            ((-0.3f32, 0.50000006f32, -0.4f32), 0.050691247f32),
            ((-0.3f32, 0.50000006f32, -0.3f32), 0.050691247f32),
            ((-0.3f32, 0.50000006f32, -0.20000002f32), 0.050691247f32),
            ((-0.3f32, 0.50000006f32, -0.10000002f32), 0.050691247f32),
            ((-0.3f32, 0.50000006f32, -1.4901161E-8f32), 0.050691247f32),
            ((-0.3f32, 0.6000001f32, -0.5f32), 0.120737374f32),
            ((-0.3f32, 0.6000001f32, -0.4f32), 0.120737374f32),
            ((-0.3f32, 0.6000001f32, -0.3f32), 0.120737374f32),
            ((-0.3f32, 0.6000001f32, -0.20000002f32), 0.120737374f32),
            ((-0.3f32, 0.6000001f32, -0.10000002f32), 0.120737374f32),
            ((-0.3f32, 0.6000001f32, -1.4901161E-8f32), 0.120737374f32),
            ((-0.3f32, 0.7000001f32, -0.5f32), 0.19078344f32),
            ((-0.3f32, 0.7000001f32, -0.4f32), 0.19078344f32),
            ((-0.3f32, 0.7000001f32, -0.3f32), 0.19078344f32),
            ((-0.3f32, 0.7000001f32, -0.20000002f32), 0.19078344f32),
            ((-0.3f32, 0.7000001f32, -0.10000002f32), 0.19078344f32),
            ((-0.3f32, 0.7000001f32, -1.4901161E-8f32), 0.19078344f32),
            ((-0.3f32, 0.80000013f32, -0.5f32), 0.26082957f32),
            ((-0.3f32, 0.80000013f32, -0.4f32), 0.26082957f32),
            ((-0.3f32, 0.80000013f32, -0.3f32), 0.26082957f32),
            ((-0.3f32, 0.80000013f32, -0.20000002f32), 0.26082957f32),
            ((-0.3f32, 0.80000013f32, -0.10000002f32), 0.26082957f32),
            ((-0.3f32, 0.80000013f32, -1.4901161E-8f32), 0.26082957f32),
            ((-0.3f32, 0.90000015f32, -0.5f32), 0.33087564f32),
            ((-0.3f32, 0.90000015f32, -0.4f32), 0.33087564f32),
            ((-0.3f32, 0.90000015f32, -0.3f32), 0.33087564f32),
            ((-0.3f32, 0.90000015f32, -0.20000002f32), 0.33087564f32),
            ((-0.3f32, 0.90000015f32, -0.10000002f32), 0.33087564f32),
            ((-0.3f32, 0.90000015f32, -1.4901161E-8f32), 0.33087564f32),
            ((-0.3f32, 1.0000001f32, -0.5f32), 0.40092167f32),
            ((-0.3f32, 1.0000001f32, -0.4f32), 0.40092167f32),
            ((-0.3f32, 1.0000001f32, -0.3f32), 0.40092167f32),
            ((-0.3f32, 1.0000001f32, -0.20000002f32), 0.40092167f32),
            ((-0.3f32, 1.0000001f32, -0.10000002f32), 0.40092167f32),
            ((-0.3f32, 1.0000001f32, -1.4901161E-8f32), 0.40092167f32),
            ((-0.20000002f32, -1.0f32, -0.5f32), 0.0f32),
            ((-0.20000002f32, -1.0f32, -0.4f32), 0.0f32),
            ((-0.20000002f32, -1.0f32, -0.3f32), 0.0f32),
            ((-0.20000002f32, -1.0f32, -0.20000002f32), 0.0f32),
            ((-0.20000002f32, -1.0f32, -0.10000002f32), -0.2222f32),
            ((-0.20000002f32, -1.0f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.20000002f32, -0.9f32, -0.5f32), 0.0f32),
            ((-0.20000002f32, -0.9f32, -0.4f32), 0.0f32),
            ((-0.20000002f32, -0.9f32, -0.3f32), 0.0f32),
            ((-0.20000002f32, -0.9f32, -0.20000002f32), 0.0f32),
            ((-0.20000002f32, -0.9f32, -0.10000002f32), -0.2222f32),
            ((-0.20000002f32, -0.9f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.20000002f32, -0.79999995f32, -0.5f32), 0.0f32),
            ((-0.20000002f32, -0.79999995f32, -0.4f32), 0.0f32),
            ((-0.20000002f32, -0.79999995f32, -0.3f32), 0.0f32),
            ((-0.20000002f32, -0.79999995f32, -0.20000002f32), 0.0f32),
            ((-0.20000002f32, -0.79999995f32, -0.10000002f32), -0.2222f32),
            (
                (-0.20000002f32, -0.79999995f32, -1.4901161E-8f32),
                -0.2222f32,
            ),
            ((-0.20000002f32, -0.6999999f32, -0.5f32), 0.0f32),
            ((-0.20000002f32, -0.6999999f32, -0.4f32), 0.0f32),
            ((-0.20000002f32, -0.6999999f32, -0.3f32), 0.0f32),
            ((-0.20000002f32, -0.6999999f32, -0.20000002f32), 0.0f32),
            ((-0.20000002f32, -0.6999999f32, -0.10000002f32), -0.2222f32),
            (
                (-0.20000002f32, -0.6999999f32, -1.4901161E-8f32),
                -0.2222f32,
            ),
            ((-0.20000002f32, -0.5999999f32, -0.5f32), 0.0f32),
            ((-0.20000002f32, -0.5999999f32, -0.4f32), 0.0f32),
            ((-0.20000002f32, -0.5999999f32, -0.3f32), 0.0f32),
            ((-0.20000002f32, -0.5999999f32, -0.20000002f32), 0.0f32),
            ((-0.20000002f32, -0.5999999f32, -0.10000002f32), -0.2222f32),
            (
                (-0.20000002f32, -0.5999999f32, -1.4901161E-8f32),
                -0.2222f32,
            ),
            ((-0.20000002f32, -0.4999999f32, -0.5f32), 0.0f32),
            ((-0.20000002f32, -0.4999999f32, -0.4f32), 0.0f32),
            ((-0.20000002f32, -0.4999999f32, -0.3f32), 0.0f32),
            ((-0.20000002f32, -0.4999999f32, -0.20000002f32), 0.0f32),
            ((-0.20000002f32, -0.4999999f32, -0.10000002f32), -0.2222f32),
            (
                (-0.20000002f32, -0.4999999f32, -1.4901161E-8f32),
                -0.2222f32,
            ),
            ((-0.20000002f32, -0.39999992f32, -0.5f32), 0.0f32),
            ((-0.20000002f32, -0.39999992f32, -0.4f32), 0.0f32),
            ((-0.20000002f32, -0.39999992f32, -0.3f32), 0.0f32),
            ((-0.20000002f32, -0.39999992f32, -0.20000002f32), 0.0f32),
            ((-0.20000002f32, -0.39999992f32, -0.10000002f32), -0.2222f32),
            (
                (-0.20000002f32, -0.39999992f32, -1.4901161E-8f32),
                -0.2222f32,
            ),
            ((-0.20000002f32, -0.29999992f32, -0.5f32), 0.0f32),
            ((-0.20000002f32, -0.29999992f32, -0.4f32), 0.0f32),
            ((-0.20000002f32, -0.29999992f32, -0.3f32), 0.0f32),
            ((-0.20000002f32, -0.29999992f32, -0.20000002f32), 0.0f32),
            ((-0.20000002f32, -0.29999992f32, -0.10000002f32), -0.2222f32),
            (
                (-0.20000002f32, -0.29999992f32, -1.4901161E-8f32),
                -0.2222f32,
            ),
            ((-0.20000002f32, -0.19999993f32, -0.5f32), 0.0f32),
            ((-0.20000002f32, -0.19999993f32, -0.4f32), 0.0f32),
            ((-0.20000002f32, -0.19999993f32, -0.3f32), 0.0f32),
            ((-0.20000002f32, -0.19999993f32, -0.20000002f32), 0.0f32),
            ((-0.20000002f32, -0.19999993f32, -0.10000002f32), -0.2222f32),
            (
                (-0.20000002f32, -0.19999993f32, -1.4901161E-8f32),
                -0.2222f32,
            ),
            ((-0.20000002f32, -0.09999993f32, -0.5f32), 0.0f32),
            ((-0.20000002f32, -0.09999993f32, -0.4f32), 0.0f32),
            ((-0.20000002f32, -0.09999993f32, -0.3f32), 0.0f32),
            ((-0.20000002f32, -0.09999993f32, -0.20000002f32), 0.0f32),
            ((-0.20000002f32, -0.09999993f32, -0.10000002f32), -0.2222f32),
            (
                (-0.20000002f32, -0.09999993f32, -1.4901161E-8f32),
                -0.2222f32,
            ),
            ((-0.20000002f32, 7.4505806E-8f32, -0.5f32), 0.0f32),
            ((-0.20000002f32, 7.4505806E-8f32, -0.4f32), 0.0f32),
            ((-0.20000002f32, 7.4505806E-8f32, -0.3f32), 0.0f32),
            ((-0.20000002f32, 7.4505806E-8f32, -0.20000002f32), 0.0f32),
            (
                (-0.20000002f32, 7.4505806E-8f32, -0.10000002f32),
                -0.2222f32,
            ),
            (
                (-0.20000002f32, 7.4505806E-8f32, -1.4901161E-8f32),
                -0.2222f32,
            ),
            ((-0.20000002f32, 0.100000076f32, -0.5f32), 0.0f32),
            ((-0.20000002f32, 0.100000076f32, -0.4f32), 0.0f32),
            ((-0.20000002f32, 0.100000076f32, -0.3f32), 0.0f32),
            ((-0.20000002f32, 0.100000076f32, -0.20000002f32), 0.0f32),
            (
                (-0.20000002f32, 0.100000076f32, -0.10000002f32),
                -0.20414744f32,
            ),
            (
                (-0.20000002f32, 0.100000076f32, -1.4901161E-8f32),
                -0.20414744f32,
            ),
            ((-0.20000002f32, 0.20000008f32, -0.5f32), 0.0f32),
            ((-0.20000002f32, 0.20000008f32, -0.4f32), 0.0f32),
            ((-0.20000002f32, 0.20000008f32, -0.3f32), 0.0f32),
            ((-0.20000002f32, 0.20000008f32, -0.20000002f32), 0.0f32),
            (
                (-0.20000002f32, 0.20000008f32, -0.10000002f32),
                -0.13179725f32,
            ),
            (
                (-0.20000002f32, 0.20000008f32, -1.4901161E-8f32),
                -0.13179725f32,
            ),
            ((-0.20000002f32, 0.30000007f32, -0.5f32), 0.0f32),
            ((-0.20000002f32, 0.30000007f32, -0.4f32), 0.0f32),
            ((-0.20000002f32, 0.30000007f32, -0.3f32), 0.0f32),
            ((-0.20000002f32, 0.30000007f32, -0.20000002f32), 0.0f32),
            (
                (-0.20000002f32, 0.30000007f32, -0.10000002f32),
                -0.05944702f32,
            ),
            (
                (-0.20000002f32, 0.30000007f32, -1.4901161E-8f32),
                -0.05944702f32,
            ),
            ((-0.20000002f32, 0.40000007f32, -0.5f32), 0.012903243f32),
            ((-0.20000002f32, 0.40000007f32, -0.4f32), 0.012903243f32),
            ((-0.20000002f32, 0.40000007f32, -0.3f32), 0.012903243f32),
            (
                (-0.20000002f32, 0.40000007f32, -0.20000002f32),
                0.012903243f32,
            ),
            (
                (-0.20000002f32, 0.40000007f32, -0.10000002f32),
                0.012903243f32,
            ),
            (
                (-0.20000002f32, 0.40000007f32, -1.4901161E-8f32),
                0.012903243f32,
            ),
            ((-0.20000002f32, 0.50000006f32, -0.5f32), 0.08525342f32),
            ((-0.20000002f32, 0.50000006f32, -0.4f32), 0.08525342f32),
            ((-0.20000002f32, 0.50000006f32, -0.3f32), 0.08525342f32),
            (
                (-0.20000002f32, 0.50000006f32, -0.20000002f32),
                0.08525342f32,
            ),
            (
                (-0.20000002f32, 0.50000006f32, -0.10000002f32),
                0.08525342f32,
            ),
            (
                (-0.20000002f32, 0.50000006f32, -1.4901161E-8f32),
                0.08525342f32,
            ),
            ((-0.20000002f32, 0.6000001f32, -0.5f32), 0.15760368f32),
            ((-0.20000002f32, 0.6000001f32, -0.4f32), 0.15760368f32),
            ((-0.20000002f32, 0.6000001f32, -0.3f32), 0.15760368f32),
            (
                (-0.20000002f32, 0.6000001f32, -0.20000002f32),
                0.15760368f32,
            ),
            (
                (-0.20000002f32, 0.6000001f32, -0.10000002f32),
                0.15760368f32,
            ),
            (
                (-0.20000002f32, 0.6000001f32, -1.4901161E-8f32),
                0.15760368f32,
            ),
            ((-0.20000002f32, 0.7000001f32, -0.5f32), 0.22995391f32),
            ((-0.20000002f32, 0.7000001f32, -0.4f32), 0.22995391f32),
            ((-0.20000002f32, 0.7000001f32, -0.3f32), 0.22995391f32),
            (
                (-0.20000002f32, 0.7000001f32, -0.20000002f32),
                0.22995391f32,
            ),
            (
                (-0.20000002f32, 0.7000001f32, -0.10000002f32),
                0.22995391f32,
            ),
            (
                (-0.20000002f32, 0.7000001f32, -1.4901161E-8f32),
                0.22995391f32,
            ),
            ((-0.20000002f32, 0.80000013f32, -0.5f32), 0.30230418f32),
            ((-0.20000002f32, 0.80000013f32, -0.4f32), 0.30230418f32),
            ((-0.20000002f32, 0.80000013f32, -0.3f32), 0.30230418f32),
            (
                (-0.20000002f32, 0.80000013f32, -0.20000002f32),
                0.30230418f32,
            ),
            (
                (-0.20000002f32, 0.80000013f32, -0.10000002f32),
                0.30230418f32,
            ),
            (
                (-0.20000002f32, 0.80000013f32, -1.4901161E-8f32),
                0.30230418f32,
            ),
            ((-0.20000002f32, 0.90000015f32, -0.5f32), 0.3746544f32),
            ((-0.20000002f32, 0.90000015f32, -0.4f32), 0.3746544f32),
            ((-0.20000002f32, 0.90000015f32, -0.3f32), 0.3746544f32),
            (
                (-0.20000002f32, 0.90000015f32, -0.20000002f32),
                0.3746544f32,
            ),
            (
                (-0.20000002f32, 0.90000015f32, -0.10000002f32),
                0.3746544f32,
            ),
            (
                (-0.20000002f32, 0.90000015f32, -1.4901161E-8f32),
                0.3746544f32,
            ),
            ((-0.20000002f32, 1.0000001f32, -0.5f32), 0.4470046f32),
            ((-0.20000002f32, 1.0000001f32, -0.4f32), 0.4470046f32),
            ((-0.20000002f32, 1.0000001f32, -0.3f32), 0.4470046f32),
            ((-0.20000002f32, 1.0000001f32, -0.20000002f32), 0.4470046f32),
            ((-0.20000002f32, 1.0000001f32, -0.10000002f32), 0.4470046f32),
            (
                (-0.20000002f32, 1.0000001f32, -1.4901161E-8f32),
                0.4470046f32,
            ),
            ((-0.10000002f32, -1.0f32, -0.5f32), 0.0f32),
            ((-0.10000002f32, -1.0f32, -0.4f32), 0.0f32),
            ((-0.10000002f32, -1.0f32, -0.3f32), 0.0f32),
            ((-0.10000002f32, -1.0f32, -0.20000002f32), 0.0f32),
            ((-0.10000002f32, -1.0f32, -0.10000002f32), 0.0f32),
            ((-0.10000002f32, -1.0f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.10000002f32, -0.9f32, -0.5f32), 0.0f32),
            ((-0.10000002f32, -0.9f32, -0.4f32), 0.0f32),
            ((-0.10000002f32, -0.9f32, -0.3f32), 0.0f32),
            ((-0.10000002f32, -0.9f32, -0.20000002f32), 0.0f32),
            ((-0.10000002f32, -0.9f32, -0.10000002f32), 0.0f32),
            ((-0.10000002f32, -0.9f32, -1.4901161E-8f32), -0.2222f32),
            ((-0.10000002f32, -0.79999995f32, -0.5f32), 0.0f32),
            ((-0.10000002f32, -0.79999995f32, -0.4f32), 0.0f32),
            ((-0.10000002f32, -0.79999995f32, -0.3f32), 0.0f32),
            ((-0.10000002f32, -0.79999995f32, -0.20000002f32), 0.0f32),
            ((-0.10000002f32, -0.79999995f32, -0.10000002f32), 0.0f32),
            (
                (-0.10000002f32, -0.79999995f32, -1.4901161E-8f32),
                -0.2222f32,
            ),
            ((-0.10000002f32, -0.6999999f32, -0.5f32), 0.0f32),
            ((-0.10000002f32, -0.6999999f32, -0.4f32), 0.0f32),
            ((-0.10000002f32, -0.6999999f32, -0.3f32), 0.0f32),
            ((-0.10000002f32, -0.6999999f32, -0.20000002f32), 0.0f32),
            ((-0.10000002f32, -0.6999999f32, -0.10000002f32), 0.0f32),
            (
                (-0.10000002f32, -0.6999999f32, -1.4901161E-8f32),
                -0.2222f32,
            ),
            ((-0.10000002f32, -0.5999999f32, -0.5f32), 0.0f32),
            ((-0.10000002f32, -0.5999999f32, -0.4f32), 0.0f32),
            ((-0.10000002f32, -0.5999999f32, -0.3f32), 0.0f32),
            ((-0.10000002f32, -0.5999999f32, -0.20000002f32), 0.0f32),
            ((-0.10000002f32, -0.5999999f32, -0.10000002f32), 0.0f32),
            (
                (-0.10000002f32, -0.5999999f32, -1.4901161E-8f32),
                -0.2222f32,
            ),
            ((-0.10000002f32, -0.4999999f32, -0.5f32), 0.0f32),
            ((-0.10000002f32, -0.4999999f32, -0.4f32), 0.0f32),
            ((-0.10000002f32, -0.4999999f32, -0.3f32), 0.0f32),
            ((-0.10000002f32, -0.4999999f32, -0.20000002f32), 0.0f32),
            ((-0.10000002f32, -0.4999999f32, -0.10000002f32), 0.0f32),
            (
                (-0.10000002f32, -0.4999999f32, -1.4901161E-8f32),
                -0.2222f32,
            ),
            ((-0.10000002f32, -0.39999992f32, -0.5f32), 0.0f32),
            ((-0.10000002f32, -0.39999992f32, -0.4f32), 0.0f32),
            ((-0.10000002f32, -0.39999992f32, -0.3f32), 0.0f32),
            ((-0.10000002f32, -0.39999992f32, -0.20000002f32), 0.0f32),
            ((-0.10000002f32, -0.39999992f32, -0.10000002f32), 0.0f32),
            (
                (-0.10000002f32, -0.39999992f32, -1.4901161E-8f32),
                -0.2222f32,
            ),
            ((-0.10000002f32, -0.29999992f32, -0.5f32), 0.0f32),
            ((-0.10000002f32, -0.29999992f32, -0.4f32), 0.0f32),
            ((-0.10000002f32, -0.29999992f32, -0.3f32), 0.0f32),
            ((-0.10000002f32, -0.29999992f32, -0.20000002f32), 0.0f32),
            ((-0.10000002f32, -0.29999992f32, -0.10000002f32), 0.0f32),
            (
                (-0.10000002f32, -0.29999992f32, -1.4901161E-8f32),
                -0.2222f32,
            ),
            ((-0.10000002f32, -0.19999993f32, -0.5f32), 0.0f32),
            ((-0.10000002f32, -0.19999993f32, -0.4f32), 0.0f32),
            ((-0.10000002f32, -0.19999993f32, -0.3f32), 0.0f32),
            ((-0.10000002f32, -0.19999993f32, -0.20000002f32), 0.0f32),
            ((-0.10000002f32, -0.19999993f32, -0.10000002f32), 0.0f32),
            (
                (-0.10000002f32, -0.19999993f32, -1.4901161E-8f32),
                -0.2222f32,
            ),
            ((-0.10000002f32, -0.09999993f32, -0.5f32), 0.0f32),
            ((-0.10000002f32, -0.09999993f32, -0.4f32), 0.0f32),
            ((-0.10000002f32, -0.09999993f32, -0.3f32), 0.0f32),
            ((-0.10000002f32, -0.09999993f32, -0.20000002f32), 0.0f32),
            ((-0.10000002f32, -0.09999993f32, -0.10000002f32), 0.0f32),
            (
                (-0.10000002f32, -0.09999993f32, -1.4901161E-8f32),
                -0.2222f32,
            ),
            ((-0.10000002f32, 7.4505806E-8f32, -0.5f32), 0.0f32),
            ((-0.10000002f32, 7.4505806E-8f32, -0.4f32), 0.0f32),
            ((-0.10000002f32, 7.4505806E-8f32, -0.3f32), 0.0f32),
            ((-0.10000002f32, 7.4505806E-8f32, -0.20000002f32), 0.0f32),
            ((-0.10000002f32, 7.4505806E-8f32, -0.10000002f32), 0.0f32),
            (
                (-0.10000002f32, 7.4505806E-8f32, -1.4901161E-8f32),
                -0.2222f32,
            ),
            ((-0.10000002f32, 0.100000076f32, -0.5f32), 0.0f32),
            ((-0.10000002f32, 0.100000076f32, -0.4f32), 0.0f32),
            ((-0.10000002f32, 0.100000076f32, -0.3f32), 0.0f32),
            ((-0.10000002f32, 0.100000076f32, -0.20000002f32), 0.0f32),
            ((-0.10000002f32, 0.100000076f32, -0.10000002f32), 0.0f32),
            (
                (-0.10000002f32, 0.100000076f32, -1.4901161E-8f32),
                -0.1788018f32,
            ),
            ((-0.10000002f32, 0.20000008f32, -0.5f32), 0.0f32),
            ((-0.10000002f32, 0.20000008f32, -0.4f32), 0.0f32),
            ((-0.10000002f32, 0.20000008f32, -0.3f32), 0.0f32),
            ((-0.10000002f32, 0.20000008f32, -0.20000002f32), 0.0f32),
            ((-0.10000002f32, 0.20000008f32, -0.10000002f32), 0.0f32),
            (
                (-0.10000002f32, 0.20000008f32, -1.4901161E-8f32),
                -0.104147464f32,
            ),
            ((-0.10000002f32, 0.30000007f32, -0.5f32), 0.0f32),
            ((-0.10000002f32, 0.30000007f32, -0.4f32), 0.0f32),
            ((-0.10000002f32, 0.30000007f32, -0.3f32), 0.0f32),
            ((-0.10000002f32, 0.30000007f32, -0.20000002f32), 0.0f32),
            ((-0.10000002f32, 0.30000007f32, -0.10000002f32), 0.0f32),
            (
                (-0.10000002f32, 0.30000007f32, -1.4901161E-8f32),
                -0.029493064f32,
            ),
            ((-0.10000002f32, 0.40000007f32, -0.5f32), 0.045161307f32),
            ((-0.10000002f32, 0.40000007f32, -0.4f32), 0.045161307f32),
            ((-0.10000002f32, 0.40000007f32, -0.3f32), 0.045161307f32),
            (
                (-0.10000002f32, 0.40000007f32, -0.20000002f32),
                0.045161307f32,
            ),
            (
                (-0.10000002f32, 0.40000007f32, -0.10000002f32),
                0.045161307f32,
            ),
            (
                (-0.10000002f32, 0.40000007f32, -1.4901161E-8f32),
                0.045161307f32,
            ),
            ((-0.10000002f32, 0.50000006f32, -0.5f32), 0.11981565f32),
            ((-0.10000002f32, 0.50000006f32, -0.4f32), 0.11981565f32),
            ((-0.10000002f32, 0.50000006f32, -0.3f32), 0.11981565f32),
            (
                (-0.10000002f32, 0.50000006f32, -0.20000002f32),
                0.11981565f32,
            ),
            (
                (-0.10000002f32, 0.50000006f32, -0.10000002f32),
                0.11981565f32,
            ),
            (
                (-0.10000002f32, 0.50000006f32, -1.4901161E-8f32),
                0.11981565f32,
            ),
            ((-0.10000002f32, 0.6000001f32, -0.5f32), 0.19447008f32),
            ((-0.10000002f32, 0.6000001f32, -0.4f32), 0.19447008f32),
            ((-0.10000002f32, 0.6000001f32, -0.3f32), 0.19447008f32),
            (
                (-0.10000002f32, 0.6000001f32, -0.20000002f32),
                0.19447008f32,
            ),
            (
                (-0.10000002f32, 0.6000001f32, -0.10000002f32),
                0.19447008f32,
            ),
            (
                (-0.10000002f32, 0.6000001f32, -1.4901161E-8f32),
                0.19447008f32,
            ),
            ((-0.10000002f32, 0.7000001f32, -0.5f32), 0.26912445f32),
            ((-0.10000002f32, 0.7000001f32, -0.4f32), 0.26912445f32),
            ((-0.10000002f32, 0.7000001f32, -0.3f32), 0.26912445f32),
            (
                (-0.10000002f32, 0.7000001f32, -0.20000002f32),
                0.26912445f32,
            ),
            (
                (-0.10000002f32, 0.7000001f32, -0.10000002f32),
                0.26912445f32,
            ),
            (
                (-0.10000002f32, 0.7000001f32, -1.4901161E-8f32),
                0.26912445f32,
            ),
            ((-0.10000002f32, 0.80000013f32, -0.5f32), 0.34377885f32),
            ((-0.10000002f32, 0.80000013f32, -0.4f32), 0.34377885f32),
            ((-0.10000002f32, 0.80000013f32, -0.3f32), 0.34377885f32),
            (
                (-0.10000002f32, 0.80000013f32, -0.20000002f32),
                0.34377885f32,
            ),
            (
                (-0.10000002f32, 0.80000013f32, -0.10000002f32),
                0.34377885f32,
            ),
            (
                (-0.10000002f32, 0.80000013f32, -1.4901161E-8f32),
                0.34377885f32,
            ),
            ((-0.10000002f32, 0.90000015f32, -0.5f32), 0.41843322f32),
            ((-0.10000002f32, 0.90000015f32, -0.4f32), 0.41843322f32),
            ((-0.10000002f32, 0.90000015f32, -0.3f32), 0.41843322f32),
            (
                (-0.10000002f32, 0.90000015f32, -0.20000002f32),
                0.41843322f32,
            ),
            (
                (-0.10000002f32, 0.90000015f32, -0.10000002f32),
                0.41843322f32,
            ),
            (
                (-0.10000002f32, 0.90000015f32, -1.4901161E-8f32),
                0.41843322f32,
            ),
            ((-0.10000002f32, 1.0000001f32, -0.5f32), 0.49308756f32),
            ((-0.10000002f32, 1.0000001f32, -0.4f32), 0.49308756f32),
            ((-0.10000002f32, 1.0000001f32, -0.3f32), 0.49308756f32),
            (
                (-0.10000002f32, 1.0000001f32, -0.20000002f32),
                0.49308756f32,
            ),
            (
                (-0.10000002f32, 1.0000001f32, -0.10000002f32),
                0.49308756f32,
            ),
            (
                (-0.10000002f32, 1.0000001f32, -1.4901161E-8f32),
                0.49308756f32,
            ),
            ((-1.4901161E-8f32, -1.0f32, -0.5f32), 0.0f32),
            ((-1.4901161E-8f32, -1.0f32, -0.4f32), 0.0f32),
            ((-1.4901161E-8f32, -1.0f32, -0.3f32), 0.0f32),
            ((-1.4901161E-8f32, -1.0f32, -0.20000002f32), 0.0f32),
            ((-1.4901161E-8f32, -1.0f32, -0.10000002f32), 0.0f32),
            ((-1.4901161E-8f32, -1.0f32, -1.4901161E-8f32), 0.0f32),
            ((-1.4901161E-8f32, -0.9f32, -0.5f32), 0.0f32),
            ((-1.4901161E-8f32, -0.9f32, -0.4f32), 0.0f32),
            ((-1.4901161E-8f32, -0.9f32, -0.3f32), 0.0f32),
            ((-1.4901161E-8f32, -0.9f32, -0.20000002f32), 0.0f32),
            ((-1.4901161E-8f32, -0.9f32, -0.10000002f32), 0.0f32),
            ((-1.4901161E-8f32, -0.9f32, -1.4901161E-8f32), 0.0f32),
            ((-1.4901161E-8f32, -0.79999995f32, -0.5f32), 0.0f32),
            ((-1.4901161E-8f32, -0.79999995f32, -0.4f32), 0.0f32),
            ((-1.4901161E-8f32, -0.79999995f32, -0.3f32), 0.0f32),
            ((-1.4901161E-8f32, -0.79999995f32, -0.20000002f32), 0.0f32),
            ((-1.4901161E-8f32, -0.79999995f32, -0.10000002f32), 0.0f32),
            ((-1.4901161E-8f32, -0.79999995f32, -1.4901161E-8f32), 0.0f32),
            ((-1.4901161E-8f32, -0.6999999f32, -0.5f32), 0.0f32),
            ((-1.4901161E-8f32, -0.6999999f32, -0.4f32), 0.0f32),
            ((-1.4901161E-8f32, -0.6999999f32, -0.3f32), 0.0f32),
            ((-1.4901161E-8f32, -0.6999999f32, -0.20000002f32), 0.0f32),
            ((-1.4901161E-8f32, -0.6999999f32, -0.10000002f32), 0.0f32),
            ((-1.4901161E-8f32, -0.6999999f32, -1.4901161E-8f32), 0.0f32),
            ((-1.4901161E-8f32, -0.5999999f32, -0.5f32), 0.0f32),
            ((-1.4901161E-8f32, -0.5999999f32, -0.4f32), 0.0f32),
            ((-1.4901161E-8f32, -0.5999999f32, -0.3f32), 0.0f32),
            ((-1.4901161E-8f32, -0.5999999f32, -0.20000002f32), 0.0f32),
            ((-1.4901161E-8f32, -0.5999999f32, -0.10000002f32), 0.0f32),
            ((-1.4901161E-8f32, -0.5999999f32, -1.4901161E-8f32), 0.0f32),
            ((-1.4901161E-8f32, -0.4999999f32, -0.5f32), 0.0f32),
            ((-1.4901161E-8f32, -0.4999999f32, -0.4f32), 0.0f32),
            ((-1.4901161E-8f32, -0.4999999f32, -0.3f32), 0.0f32),
            ((-1.4901161E-8f32, -0.4999999f32, -0.20000002f32), 0.0f32),
            ((-1.4901161E-8f32, -0.4999999f32, -0.10000002f32), 0.0f32),
            ((-1.4901161E-8f32, -0.4999999f32, -1.4901161E-8f32), 0.0f32),
            ((-1.4901161E-8f32, -0.39999992f32, -0.5f32), 0.0f32),
            ((-1.4901161E-8f32, -0.39999992f32, -0.4f32), 0.0f32),
            ((-1.4901161E-8f32, -0.39999992f32, -0.3f32), 0.0f32),
            ((-1.4901161E-8f32, -0.39999992f32, -0.20000002f32), 0.0f32),
            ((-1.4901161E-8f32, -0.39999992f32, -0.10000002f32), 0.0f32),
            ((-1.4901161E-8f32, -0.39999992f32, -1.4901161E-8f32), 0.0f32),
            ((-1.4901161E-8f32, -0.29999992f32, -0.5f32), 0.0f32),
            ((-1.4901161E-8f32, -0.29999992f32, -0.4f32), 0.0f32),
            ((-1.4901161E-8f32, -0.29999992f32, -0.3f32), 0.0f32),
            ((-1.4901161E-8f32, -0.29999992f32, -0.20000002f32), 0.0f32),
            ((-1.4901161E-8f32, -0.29999992f32, -0.10000002f32), 0.0f32),
            ((-1.4901161E-8f32, -0.29999992f32, -1.4901161E-8f32), 0.0f32),
            ((-1.4901161E-8f32, -0.19999993f32, -0.5f32), 0.0f32),
            ((-1.4901161E-8f32, -0.19999993f32, -0.4f32), 0.0f32),
            ((-1.4901161E-8f32, -0.19999993f32, -0.3f32), 0.0f32),
            ((-1.4901161E-8f32, -0.19999993f32, -0.20000002f32), 0.0f32),
            ((-1.4901161E-8f32, -0.19999993f32, -0.10000002f32), 0.0f32),
            ((-1.4901161E-8f32, -0.19999993f32, -1.4901161E-8f32), 0.0f32),
            ((-1.4901161E-8f32, -0.09999993f32, -0.5f32), 0.0f32),
            ((-1.4901161E-8f32, -0.09999993f32, -0.4f32), 0.0f32),
            ((-1.4901161E-8f32, -0.09999993f32, -0.3f32), 0.0f32),
            ((-1.4901161E-8f32, -0.09999993f32, -0.20000002f32), 0.0f32),
            ((-1.4901161E-8f32, -0.09999993f32, -0.10000002f32), 0.0f32),
            ((-1.4901161E-8f32, -0.09999993f32, -1.4901161E-8f32), 0.0f32),
            ((-1.4901161E-8f32, 7.4505806E-8f32, -0.5f32), 0.0f32),
            ((-1.4901161E-8f32, 7.4505806E-8f32, -0.4f32), 0.0f32),
            ((-1.4901161E-8f32, 7.4505806E-8f32, -0.3f32), 0.0f32),
            ((-1.4901161E-8f32, 7.4505806E-8f32, -0.20000002f32), 0.0f32),
            ((-1.4901161E-8f32, 7.4505806E-8f32, -0.10000002f32), 0.0f32),
            (
                (-1.4901161E-8f32, 7.4505806E-8f32, -1.4901161E-8f32),
                0.0f32,
            ),
            ((-1.4901161E-8f32, 0.100000076f32, -0.5f32), 0.0f32),
            ((-1.4901161E-8f32, 0.100000076f32, -0.4f32), 0.0f32),
            ((-1.4901161E-8f32, 0.100000076f32, -0.3f32), 0.0f32),
            ((-1.4901161E-8f32, 0.100000076f32, -0.20000002f32), 0.0f32),
            ((-1.4901161E-8f32, 0.100000076f32, -0.10000002f32), 0.0f32),
            ((-1.4901161E-8f32, 0.100000076f32, -1.4901161E-8f32), 0.0f32),
            ((-1.4901161E-8f32, 0.20000008f32, -0.5f32), 0.0f32),
            ((-1.4901161E-8f32, 0.20000008f32, -0.4f32), 0.0f32),
            ((-1.4901161E-8f32, 0.20000008f32, -0.3f32), 0.0f32),
            ((-1.4901161E-8f32, 0.20000008f32, -0.20000002f32), 0.0f32),
            ((-1.4901161E-8f32, 0.20000008f32, -0.10000002f32), 0.0f32),
            ((-1.4901161E-8f32, 0.20000008f32, -1.4901161E-8f32), 0.0f32),
            ((-1.4901161E-8f32, 0.30000007f32, -0.5f32), 4.608333E-4f32),
            ((-1.4901161E-8f32, 0.30000007f32, -0.4f32), 4.608333E-4f32),
            ((-1.4901161E-8f32, 0.30000007f32, -0.3f32), 4.608333E-4f32),
            (
                (-1.4901161E-8f32, 0.30000007f32, -0.20000002f32),
                4.608333E-4f32,
            ),
            (
                (-1.4901161E-8f32, 0.30000007f32, -0.10000002f32),
                4.608333E-4f32,
            ),
            (
                (-1.4901161E-8f32, 0.30000007f32, -1.4901161E-8f32),
                4.608333E-4f32,
            ),
            ((-1.4901161E-8f32, 0.40000007f32, -0.5f32), 0.07741937f32),
            ((-1.4901161E-8f32, 0.40000007f32, -0.4f32), 0.07741937f32),
            ((-1.4901161E-8f32, 0.40000007f32, -0.3f32), 0.07741937f32),
            (
                (-1.4901161E-8f32, 0.40000007f32, -0.20000002f32),
                0.07741937f32,
            ),
            (
                (-1.4901161E-8f32, 0.40000007f32, -0.10000002f32),
                0.07741937f32,
            ),
            (
                (-1.4901161E-8f32, 0.40000007f32, -1.4901161E-8f32),
                0.07741937f32,
            ),
            ((-1.4901161E-8f32, 0.50000006f32, -0.5f32), 0.15437785f32),
            ((-1.4901161E-8f32, 0.50000006f32, -0.4f32), 0.15437785f32),
            ((-1.4901161E-8f32, 0.50000006f32, -0.3f32), 0.15437785f32),
            (
                (-1.4901161E-8f32, 0.50000006f32, -0.20000002f32),
                0.15437785f32,
            ),
            (
                (-1.4901161E-8f32, 0.50000006f32, -0.10000002f32),
                0.15437785f32,
            ),
            (
                (-1.4901161E-8f32, 0.50000006f32, -1.4901161E-8f32),
                0.15437785f32,
            ),
            ((-1.4901161E-8f32, 0.6000001f32, -0.5f32), 0.23133644f32),
            ((-1.4901161E-8f32, 0.6000001f32, -0.4f32), 0.23133644f32),
            ((-1.4901161E-8f32, 0.6000001f32, -0.3f32), 0.23133644f32),
            (
                (-1.4901161E-8f32, 0.6000001f32, -0.20000002f32),
                0.23133644f32,
            ),
            (
                (-1.4901161E-8f32, 0.6000001f32, -0.10000002f32),
                0.23133644f32,
            ),
            (
                (-1.4901161E-8f32, 0.6000001f32, -1.4901161E-8f32),
                0.23133644f32,
            ),
            ((-1.4901161E-8f32, 0.7000001f32, -0.5f32), 0.30829495f32),
            ((-1.4901161E-8f32, 0.7000001f32, -0.4f32), 0.30829495f32),
            ((-1.4901161E-8f32, 0.7000001f32, -0.3f32), 0.30829495f32),
            (
                (-1.4901161E-8f32, 0.7000001f32, -0.20000002f32),
                0.30829495f32,
            ),
            (
                (-1.4901161E-8f32, 0.7000001f32, -0.10000002f32),
                0.30829495f32,
            ),
            (
                (-1.4901161E-8f32, 0.7000001f32, -1.4901161E-8f32),
                0.30829495f32,
            ),
            ((-1.4901161E-8f32, 0.80000013f32, -0.5f32), 0.38525352f32),
            ((-1.4901161E-8f32, 0.80000013f32, -0.4f32), 0.38525352f32),
            ((-1.4901161E-8f32, 0.80000013f32, -0.3f32), 0.38525352f32),
            (
                (-1.4901161E-8f32, 0.80000013f32, -0.20000002f32),
                0.38525352f32,
            ),
            (
                (-1.4901161E-8f32, 0.80000013f32, -0.10000002f32),
                0.38525352f32,
            ),
            (
                (-1.4901161E-8f32, 0.80000013f32, -1.4901161E-8f32),
                0.38525352f32,
            ),
            ((-1.4901161E-8f32, 0.90000015f32, -0.5f32), 0.462212f32),
            ((-1.4901161E-8f32, 0.90000015f32, -0.4f32), 0.462212f32),
            ((-1.4901161E-8f32, 0.90000015f32, -0.3f32), 0.462212f32),
            (
                (-1.4901161E-8f32, 0.90000015f32, -0.20000002f32),
                0.462212f32,
            ),
            (
                (-1.4901161E-8f32, 0.90000015f32, -0.10000002f32),
                0.462212f32,
            ),
            (
                (-1.4901161E-8f32, 0.90000015f32, -1.4901161E-8f32),
                0.462212f32,
            ),
            ((-1.4901161E-8f32, 1.0000001f32, -0.5f32), 0.5391705f32),
            ((-1.4901161E-8f32, 1.0000001f32, -0.4f32), 0.5391705f32),
            ((-1.4901161E-8f32, 1.0000001f32, -0.3f32), 0.5391705f32),
            (
                (-1.4901161E-8f32, 1.0000001f32, -0.20000002f32),
                0.5391705f32,
            ),
            (
                (-1.4901161E-8f32, 1.0000001f32, -0.10000002f32),
                0.5391705f32,
            ),
            (
                (-1.4901161E-8f32, 1.0000001f32, -1.4901161E-8f32),
                0.5391705f32,
            ),
        ];

        for ((x, y, z), result) in values {
            assert_eq!(get_offset_value(x, y, z), result);
        }
    }

    #[test]
    fn test_skew_map() {
        let values = [
            (-1.0f32, f32::INFINITY),
            (-0.9f32, 40.059994f32),
            (-0.79999995f32, 18.359995f32),
            (-0.6999999f32, 11.126663f32),
            (-0.5999999f32, 7.5099974f32),
            (-0.4999999f32, 5.3399982f32),
            (-0.39999992f32, 3.8933315f32),
            (-0.29999992f32, 2.8600001f32),
            (-0.19999993f32, 2.0849996f32),
            (-0.09999993f32, 1.482222f32),
            (7.4505806E-8f32, 1.0000001f32),
            (0.100000076f32, 0.6054543f32),
            (0.20000008f32, 0.27666664f32),
            (0.30000007f32, -0.0015385151f32),
            (0.40000007f32, -0.24000007f32),
            (0.50000006f32, -0.44666666f32),
            (0.6000001f32, -0.6275001f32),
            (0.7000001f32, -0.78705895f32),
            (0.80000013f32, -0.92888904f32),
            (0.90000015f32, -1.0557896f32),
            (1.0000001f32, -1.1700001f32),
        ];

        for (value, result) in values {
            assert_eq!(skew_map(value), result);
        }
    }

    #[test]
    fn test_create_ridges_spline() {
        let mut rand = LegacyRand::from_seed(0);
        let deriver = rand.next_splitter();
        let mut converter = TestConverter {
            splitter: RandomDeriver::Legacy(deriver),
        };

        let values = [
            ((-100, -100), 2.8477935E-8),
            ((-100, -90), 2.9421175E-8),
            ((-100, -80), 2.953465E-8),
            ((-100, -70), 2.9572217E-8),
            ((-100, -60), 2.9592139E-8),
            ((-100, -50), 2.9759779E-8),
            ((-100, -40), 2.9594814E-8),
            ((-100, -30), 4.1828697E-4),
            ((-100, -20), 2.441617E-4),
            ((-100, -10), 2.9801354E-8),
            ((-100, 0), 2.9799308E-8),
            ((-100, 10), 2.9755787E-8),
            ((-100, 20), 2.9588357E-8),
            ((-100, 30), 2.907906E-8),
            ((-100, 40), 2.8314574E-8),
            ((-100, 50), 2.6729724E-8),
            ((-100, 60), 2.7000734E-8),
            ((-100, 70), 2.660159E-8),
            ((-100, 80), 2.4869763E-8),
            ((-100, 90), 2.2899068E-8),
            ((-100, 100), 2.014161E-8),
            ((-90, -100), 2.5623542E-8),
            ((-90, -90), 2.6155236E-8),
            ((-90, -80), 2.7647168E-8),
            ((-90, -70), 2.7973673E-8),
            ((-90, -60), 2.8644253E-8),
            ((-90, -50), 2.869978E-8),
            ((-90, -40), 2.9231881E-8),
            ((-90, -30), 2.9375043E-8),
            ((-90, -20), 2.8943603E-8),
            ((-90, -10), 2.9426687E-8),
            ((-90, 0), 2.9260104E-8),
            ((-90, 10), 2.904137E-8),
            ((-90, 20), 2.7603893E-8),
            ((-90, 30), 2.764989E-8),
            ((-90, 40), 2.6193437E-8),
            ((-90, 50), 2.4490602E-8),
            ((-90, 60), 2.5621688E-8),
            ((-90, 70), 2.4620386E-8),
            ((-90, 80), 2.2685676E-8),
            ((-90, 90), 1.9192312E-8),
            ((-90, 100), 1.8943878E-8),
            ((-80, -100), 2.0955286E-8),
            ((-80, -90), 2.0643254E-8),
            ((-80, -80), 2.3475874E-8),
            ((-80, -70), 2.6119807E-8),
            ((-80, -60), 2.6292632E-8),
            ((-80, -50), 2.688907E-8),
            ((-80, -40), 2.8145903E-8),
            ((-80, -30), 2.7218043E-8),
            ((-80, -20), 2.7008975E-8),
            ((-80, -10), 2.7962752E-8),
            ((-80, 0), 2.8498809E-8),
            ((-80, 10), 2.853816E-8),
            ((-80, 20), 2.7134293E-8),
            ((-80, 30), 2.4145672E-8),
            ((-80, 40), 2.313179E-8),
            ((-80, 50), 2.0786214E-8),
            ((-80, 60), 1.883024E-8),
            ((-80, 70), 1.7269919E-8),
            ((-80, 80), 2.0617332E-8),
            ((-80, 90), 1.8206858E-8),
            ((-80, 100), 1.6814932E-8),
            ((-70, -100), 1.5697411E-8),
            ((-70, -90), 1.881628E-8),
            ((-70, -80), 2.0452672E-8),
            ((-70, -70), 2.3734193E-8),
            ((-70, -60), 2.4436767E-8),
            ((-70, -50), 2.3752877E-8),
            ((-70, -40), 2.5358732E-8),
            ((-70, -30), 2.566211E-8),
            ((-70, -20), 2.3430925E-8),
            ((-70, -10), 2.4686809E-8),
            ((-70, 0), 2.5551257E-8),
            ((-70, 10), 2.5841018E-8),
            ((-70, 20), 2.39439E-8),
            ((-70, 30), 1.8338397E-8),
            ((-70, 40), 1.9379236E-8),
            ((-70, 50), 1.725146E-8),
            ((-70, 60), 1.2672998E-8),
            ((-70, 70), 1.441972E-8),
            ((-70, 80), 1.2832E-8),
            ((-70, 90), 1.4738533E-8),
            ((-70, 100), 1.4453501E-8),
            ((-60, -100), 1.326884E-8),
            ((-60, -90), 1.4473903E-8),
            ((-60, -80), 1.6339591E-8),
            ((-60, -70), 1.8043991E-8),
            ((-60, -60), 2.1850791E-8),
            ((-60, -50), 1.952893E-8),
            ((-60, -40), 2.0770532E-8),
            ((-60, -30), 2.1941322E-8),
            ((-60, -20), 1.8191166E-8),
            ((-60, -10), 1.899582E-8),
            ((-60, 0), 1.6704568E-8),
            ((-60, 10), 1.703442E-8),
            ((-60, 20), 1.531812E-8),
            ((-60, 30), 9.570761E-9),
            ((-60, 40), 1.0039969E-8),
            ((-60, 50), 8.110198E-9),
            ((-60, 60), 7.454145E-9),
            ((-60, 70), 5.27241E-9),
            ((-60, 80), 6.8627255E-9),
            ((-60, 90), 9.639968E-9),
            ((-60, 100), 1.0100898E-8),
            ((-50, -100), 7.740988E-9),
            ((-50, -90), 9.695534E-9),
            ((-50, -80), 1.4176498E-8),
            ((-50, -70), 1.3164881E-8),
            ((-50, -60), 1.3867257E-8),
            ((-50, -50), 1.3216399E-8),
            ((-50, -40), 1.19279E-8),
            ((-50, -30), 1.06547375E-8),
            ((-50, -20), 1.26689725E-8),
            ((-50, -10), 1.4371157E-8),
            ((-50, 0), 8.357909E-9),
            ((-50, 10), 9.041843E-9),
            ((-50, 20), 2.8660507E-9),
            ((-50, 30), 3.5975143E-9),
            ((-50, 40), 6.1586345E-9),
            ((-50, 50), 6.9691537E-9),
            ((-50, 60), 4.881403E-9),
            ((-50, 70), 3.2929866E-9),
            ((-50, 80), -2.0132167E-4),
            ((-50, 90), 2.4167723E-10),
            ((-50, 100), 9.5578934E-11),
            ((-40, -100), 3.96348E-9),
            ((-40, -90), 4.7890127E-9),
            ((-40, -80), 1.0002485E-8),
            ((-40, -70), 1.09926415E-8),
            ((-40, -60), 9.654244E-9),
            ((-40, -50), 8.474768E-9),
            ((-40, -40), 4.632465E-9),
            ((-40, -30), 2.950939E-9),
            ((-40, -20), 1.0483288E-9),
            ((-40, -10), 5.394538E-9),
            ((-40, 0), 1.8524393E-10),
            ((-40, 10), 7.566242E-11),
            ((-40, 20), -0.05434511),
            ((-40, 30), 6.359355E-10),
            ((-40, 40), 1.7443635E-9),
            ((-40, 50), 1.1218677E-9),
            ((-40, 60), -0.05718465),
            ((-40, 70), -0.2222),
            ((-40, 80), -0.2222),
            ((-40, 90), -0.2222),
            ((-40, 100), -0.2222),
            ((-30, -100), 5.2898386E-10),
            ((-30, -90), 3.0276166E-9),
            ((-30, -80), 4.8754467E-9),
            ((-30, -70), 5.305538E-9),
            ((-30, -60), 6.3437686E-9),
            ((-30, -50), 3.4709022E-9),
            ((-30, -40), -0.0013300264),
            ((-30, -30), -0.2222),
            ((-30, -20), -0.2222),
            ((-30, -10), 2.487388E-11),
            ((-30, 0), -0.1278581),
            ((-30, 10), -0.2222),
            ((-30, 20), -0.2222),
            ((-30, 30), -0.2222),
            ((-30, 40), -0.2222),
            ((-30, 50), -0.2222),
            ((-30, 60), -0.2222),
            ((-30, 70), -0.2222),
            ((-30, 80), -0.13529345),
            ((-30, 90), -0.21922092),
            ((-30, 100), -0.2222),
            ((-20, -100), -0.05537056),
            ((-20, -90), 4.362144E-11),
            ((-20, -80), 5.9424754E-10),
            ((-20, -70), 9.598848E-10),
            ((-20, -60), 1.4902506E-9),
            ((-20, -50), 1.3627571E-11),
            ((-20, -40), -0.2222),
            ((-20, -30), -0.2222),
            ((-20, -20), -0.2222),
            ((-20, -10), -0.2222),
            ((-20, 0), -0.2222),
            ((-20, 10), -0.2222),
            ((-20, 20), 1.0100046E-12),
            ((-20, 30), -0.221999),
            ((-20, 40), 1.2945522E-9),
            ((-20, 50), 5.3399196E-9),
            ((-20, 60), 5.9649015E-9),
            ((-20, 70), 3.0647274E-10),
            ((-20, 80), 7.8995144E-10),
            ((-20, 90), 1.694016E-9),
            ((-20, 100), 4.1338766E-11),
            ((-10, -100), -0.2222),
            ((-10, -90), -0.2222),
            ((-10, -80), -0.2222),
            ((-10, -70), -0.006202223),
            ((-10, -60), -0.2222),
            ((-10, -50), -0.2222),
            ((-10, -40), -0.2222),
            ((-10, -30), -0.2222),
            ((-10, -20), -0.2222),
            ((-10, -10), 2.724796E-10),
            ((-10, 0), 1.628972E-11),
            ((-10, 10), 1.215722E-9),
            ((-10, 20), 1.3321679E-9),
            ((-10, 30), 5.7749086E-9),
            ((-10, 40), 5.468249E-9),
            ((-10, 50), 1.4257979E-8),
            ((-10, 60), 2.3868212E-8),
            ((-10, 70), 1.6978554E-8),
            ((-10, 80), 9.911973E-9),
            ((-10, 90), 1.06328795E-8),
            ((-10, 100), 3.8184833E-9),
            ((0, -100), -0.2222),
            ((0, -90), -0.2222),
            ((0, -80), -0.2222),
            ((0, -70), -0.2222),
            ((0, -60), -0.2222),
            ((0, -50), -0.2222),
            ((0, -40), -2.7082162E-5),
            ((0, -30), -0.21585968),
            ((0, -20), -0.2222),
            ((0, -10), 5.88328E-13),
            ((0, 0), 2.099143E-9),
            ((0, 10), 5.015324E-9),
            ((0, 20), 9.049539E-9),
            ((0, 30), 1.6418609E-8),
            ((0, 40), 1.8904561E-8),
            ((0, 50), 2.3320354E-8),
            ((0, 60), 2.620363E-8),
            ((0, 70), 2.0293689E-8),
            ((0, 80), 2.5067742E-8),
            ((0, 90), 2.0545425E-8),
            ((0, 100), 1.6975857E-8),
            ((10, -100), -0.2222),
            ((10, -90), -0.2099127),
            ((10, -80), -0.2222),
            ((10, -70), -0.2222),
            ((10, -60), -0.22206965),
            ((10, -50), 1.2756785E-10),
            ((10, -40), 2.1985875E-9),
            ((10, -30), 3.7900465E-9),
            ((10, -20), 4.57191E-9),
            ((10, -10), 7.1460473E-9),
            ((10, 0), 9.860966E-9),
            ((10, 10), 1.7195873E-8),
            ((10, 20), 2.149125E-8),
            ((10, 30), 2.5583146E-8),
            ((10, 40), 2.9350172E-8),
            ((10, 50), 2.7192652E-8),
            ((10, 60), 2.337591E-8),
            ((10, 70), 1.7757051E-8),
            ((10, 80), 2.4523862E-8),
            ((10, 90), 2.421915E-8),
            ((10, 100), 2.5471177E-8),
            ((20, -100), -0.026743041),
            ((20, -90), 3.701109E-12),
            ((20, -80), 6.015668E-10),
            ((20, -70), 1.757392E-10),
            ((20, -60), 3.1415082E-10),
            ((20, -50), 2.2531796E-9),
            ((20, -40), 6.227851E-9),
            ((20, -30), 1.0961541E-8),
            ((20, -20), 1.344854E-8),
            ((20, -10), 1.6549272E-8),
            ((20, 0), 1.9368597E-8),
            ((20, 10), 2.7064296E-8),
            ((20, 20), 2.8985074E-8),
            ((20, 30), 0.0036852886),
            ((20, 40), 0.0539809),
            ((20, 50), 0.0021372417),
            ((20, 60), 2.6740215E-8),
            ((20, 70), 2.916563E-8),
            ((20, 80), 2.9167515E-8),
            ((20, 90), 2.952707E-8),
            ((20, 100), 2.9662866E-8),
            ((30, -100), 9.415155E-10),
            ((30, -90), 1.1704835E-9),
            ((30, -80), 2.3105915E-9),
            ((30, -70), 2.2496456E-9),
            ((30, -60), 4.6038107E-9),
            ((30, -50), 9.231984E-9),
            ((30, -40), 1.5865178E-8),
            ((30, -30), 2.090136E-8),
            ((30, -20), 2.4485336E-8),
            ((30, -10), 2.5506537E-8),
            ((30, 0), 2.7404838E-8),
            ((30, 10), 0.015096264),
            ((30, 20), 0.07279182),
            ((30, 30), 0.078368366),
            ((30, 40), 0.09613082),
            ((30, 50), 0.06028792),
            ((30, 60), 0.02723657),
            ((30, 70), 0.056825884),
            ((30, 80), 0.048749786),
            ((30, 90), 0.049322363),
            ((30, 100), 0.068311006),
            ((40, -100), 5.113369E-9),
            ((40, -90), 5.611211E-9),
            ((40, -80), 5.793919E-9),
            ((40, -70), 6.3468795E-9),
            ((40, -60), 1.2419873E-8),
            ((40, -50), 1.8519973E-8),
            ((40, -40), 2.1883215E-8),
            ((40, -30), 2.7525791E-8),
            ((40, -20), 2.849611E-8),
            ((40, -10), 2.9346142E-8),
            ((40, 0), 2.979914E-8),
            ((40, 10), 0.05700566),
            ((40, 20), 0.09781591),
            ((40, 30), 0.07276361),
            ((40, 40), 0.05831618),
            ((40, 50), 0.08932926),
            ((40, 60), 0.06354418),
            ((40, 70), 0.08133913),
            ((40, 80), 0.092552625),
            ((40, 90), 0.08024895),
            ((40, 100), 0.09823503),
            ((50, -100), 9.931215E-9),
            ((50, -90), 1.5000806E-8),
            ((50, -80), 1.38834775E-8),
            ((50, -70), 1.319409E-8),
            ((50, -60), 1.4360927E-8),
            ((50, -50), 2.262236E-8),
            ((50, -40), 2.615886E-8),
            ((50, -30), 2.8377613E-8),
            ((50, -20), 0.0060256915),
            ((50, -10), 0.02681369),
            ((50, 0), 0.0625092),
            ((50, 10), 0.08518137),
            ((50, 20), 0.08074804),
            ((50, 30), 0.056999013),
            ((50, 40), 0.050000902),
            ((50, 50), 0.039098933),
            ((50, 60), 0.024522444),
            ((50, 70), 0.039843414),
            ((50, 80), 0.06813977),
            ((50, 90), 0.08117486),
            ((50, 100), 0.09765588),
            ((60, -100), 1.2560949E-8),
            ((60, -90), 1.8038051E-8),
            ((60, -80), 1.7835823E-8),
            ((60, -70), 1.6850986E-8),
            ((60, -60), 2.0095776E-8),
            ((60, -50), 2.2213623E-8),
            ((60, -40), 2.4400702E-8),
            ((60, -30), 2.8550161E-8),
            ((60, -20), 0.0122648785),
            ((60, -10), 0.057307955),
            ((60, 0), 0.063739665),
            ((60, 10), 0.09191626),
            ((60, 20), 0.06397862),
            ((60, 30), 0.029510833),
            ((60, 40), 0.022276945),
            ((60, 50), 0.008596192),
            ((60, 60), 9.073515E-4),
            ((60, 70), 0.01206646),
            ((60, 80), 0.036487218),
            ((60, 90), 0.060221568),
            ((60, 100), 0.07330302),
            ((70, -100), 1.2279612E-8),
            ((70, -90), 1.5604508E-8),
            ((70, -80), 1.7923854E-8),
            ((70, -70), 1.9603634E-8),
            ((70, -60), 2.3482578E-8),
            ((70, -50), 2.5044821E-8),
            ((70, -40), 2.8634219E-8),
            ((70, -30), 2.9438601E-8),
            ((70, -20), 0.026957614),
            ((70, -10), 0.053010616),
            ((70, 0), 0.08705943),
            ((70, 10), 0.07123009),
            ((70, 20), 0.05596709),
            ((70, 30), 0.02099134),
            ((70, 40), 8.0636E-4),
            ((70, 50), -2.8625852E-4),
            ((70, 60), -1.8850603E-4),
            ((70, 70), 0.010176085),
            ((70, 80), 0.021705516),
            ((70, 90), 0.042132284),
            ((70, 100), 0.066540554),
            ((80, -100), 1.0967985E-8),
            ((80, -90), 1.3114312E-8),
            ((80, -80), 1.6625528E-8),
            ((80, -70), 1.8970738E-8),
            ((80, -60), 2.3452605E-8),
            ((80, -50), 2.719583E-8),
            ((80, -40), 2.8690268E-8),
            ((80, -30), -3.257227E-4),
            ((80, -20), 0.04783322),
            ((80, -10), 0.06973693),
            ((80, 0), 0.084938176),
            ((80, 10), 0.051958688),
            ((80, 20), 0.038630944),
            ((80, 30), 0.021653533),
            ((80, 40), 0.015261582),
            ((80, 50), 0.016427841),
            ((80, 60), 0.010141701),
            ((80, 70), 0.012156198),
            ((80, 80), 0.029815394),
            ((80, 90), 0.058820862),
            ((80, 100), 0.08758333),
            ((90, -100), 1.0518976E-8),
            ((90, -90), 1.1329515E-8),
            ((90, -80), 1.4873088E-8),
            ((90, -70), 1.5370892E-8),
            ((90, -60), 1.8482575E-8),
            ((90, -50), 2.4565391E-8),
            ((90, -40), 2.7285648E-8),
            ((90, -30), 2.9660525E-8),
            ((90, -20), 0.030253895),
            ((90, -10), 0.06902423),
            ((90, 0), 0.07849499),
            ((90, 10), 0.08036745),
            ((90, 20), 0.046044968),
            ((90, 30), 0.044540975),
            ((90, 40), 0.040963612),
            ((90, 50), 0.04599631),
            ((90, 60), 0.041517425),
            ((90, 70), 0.04300323),
            ((90, 80), 0.04129118),
            ((90, 90), 0.06918509),
            ((90, 100), 0.09034656),
            ((100, -100), 8.271921E-9),
            ((100, -90), 1.0203889E-8),
            ((100, -80), 1.1338757E-8),
            ((100, -70), 1.39994265E-8),
            ((100, -60), 1.6544481E-8),
            ((100, -50), 1.9844514E-8),
            ((100, -40), 2.1032369E-8),
            ((100, -30), 2.530143E-8),
            ((100, -20), 2.9269913E-8),
            ((100, -10), 2.9794156E-8),
            ((100, 0), 0.047164306),
            ((100, 10), 0.07856759),
            ((100, 20), 0.09781857),
            ((100, 30), 0.09724875),
            ((100, 40), 0.08650395),
            ((100, 50), 0.0819612),
            ((100, 60), 0.09101133),
            ((100, 70), 0.082009576),
            ((100, 80), 0.067832805),
            ((100, 90), 0.09361232),
            ((100, 100), 0.044551715),
        ];
        let spline = create_ridges_spline(
            RIDGES_FOLDED_OVERWORLD
                .clone()
                .convert(&mut converter)
                .assert_shared(),
            0.1f32,
            true,
            FloatAmplifier::Identity,
        );
        for ((x, z), value) in values {
            let pos = &NoisePos::Unblended(UnblendedNoisePos::new(x, 60, z));
            assert_eq!(spline.sample(pos), value);
        }

        let values = [
            ((-100, -100), 5.695587E-8f32),
            ((-100, -90), 5.884235E-8f32),
            ((-100, -80), 5.90693E-8f32),
            ((-100, -70), 5.9144433E-8f32),
            ((-100, -60), 5.9184277E-8f32),
            ((-100, -50), 5.9519557E-8f32),
            ((-100, -40), 5.9189627E-8f32),
            ((-100, -30), 4.2355031E-4f32),
            ((-100, -20), 2.459766E-4f32),
            ((-100, -10), 5.960271E-8f32),
            ((-100, 0), 5.9598616E-8f32),
            ((-100, 10), 5.9511574E-8f32),
            ((-100, 20), 5.9176713E-8f32),
            ((-100, 30), 5.815812E-8f32),
            ((-100, 40), 5.6629148E-8f32),
            ((-100, 50), 5.345945E-8f32),
            ((-100, 60), 5.4001468E-8f32),
            ((-100, 70), 5.320318E-8f32),
            ((-100, 80), 4.9739526E-8f32),
            ((-100, 90), 4.5798135E-8f32),
            ((-100, 100), 4.028322E-8f32),
            ((-90, -100), 5.1247085E-8f32),
            ((-90, -90), 5.2310472E-8f32),
            ((-90, -80), 5.5294336E-8f32),
            ((-90, -70), 5.5947346E-8f32),
            ((-90, -60), 5.7288506E-8f32),
            ((-90, -50), 5.739956E-8f32),
            ((-90, -40), 5.8463762E-8f32),
            ((-90, -30), 5.8750086E-8f32),
            ((-90, -20), 5.7887206E-8f32),
            ((-90, -10), 5.8853374E-8f32),
            ((-90, 0), 5.8520207E-8f32),
            ((-90, 10), 5.808274E-8f32),
            ((-90, 20), 5.5207785E-8f32),
            ((-90, 30), 5.529978E-8f32),
            ((-90, 40), 5.2386874E-8f32),
            ((-90, 50), 4.8981203E-8f32),
            ((-90, 60), 5.1243376E-8f32),
            ((-90, 70), 4.924077E-8f32),
            ((-90, 80), 4.537135E-8f32),
            ((-90, 90), 3.8384623E-8f32),
            ((-90, 100), 3.7887755E-8f32),
            ((-80, -100), 4.191057E-8f32),
            ((-80, -90), 4.128651E-8f32),
            ((-80, -80), 4.6951747E-8f32),
            ((-80, -70), 5.2239614E-8f32),
            ((-80, -60), 5.2585264E-8f32),
            ((-80, -50), 5.377814E-8f32),
            ((-80, -40), 5.6291807E-8f32),
            ((-80, -30), 5.4436086E-8f32),
            ((-80, -20), 5.401795E-8f32),
            ((-80, -10), 5.5925504E-8f32),
            ((-80, 0), 5.6997617E-8f32),
            ((-80, 10), 5.707632E-8f32),
            ((-80, 20), 5.4268586E-8f32),
            ((-80, 30), 4.8291344E-8f32),
            ((-80, 40), 4.626358E-8f32),
            ((-80, 50), 4.1572427E-8f32),
            ((-80, 60), 3.766048E-8f32),
            ((-80, 70), 3.4539838E-8f32),
            ((-80, 80), 4.1234664E-8f32),
            ((-80, 90), 3.6413716E-8f32),
            ((-80, 100), 3.3629863E-8f32),
            ((-70, -100), 3.1394823E-8f32),
            ((-70, -90), 3.763256E-8f32),
            ((-70, -80), 4.0905345E-8f32),
            ((-70, -70), 4.7468387E-8f32),
            ((-70, -60), 4.8873535E-8f32),
            ((-70, -50), 4.7505754E-8f32),
            ((-70, -40), 5.0717464E-8f32),
            ((-70, -30), 5.132422E-8f32),
            ((-70, -20), 4.686185E-8f32),
            ((-70, -10), 4.9373618E-8f32),
            ((-70, 0), 5.1102514E-8f32),
            ((-70, 10), 5.1682036E-8f32),
            ((-70, 20), 4.78878E-8f32),
            ((-70, 30), 3.6676795E-8f32),
            ((-70, 40), 3.8758472E-8f32),
            ((-70, 50), 3.450292E-8f32),
            ((-70, 60), 2.5345996E-8f32),
            ((-70, 70), 2.883944E-8f32),
            ((-70, 80), 2.5664E-8f32),
            ((-70, 90), 2.9477066E-8f32),
            ((-70, 100), 2.8907001E-8f32),
            ((-60, -100), 2.653768E-8f32),
            ((-60, -90), 2.8947806E-8f32),
            ((-60, -80), 3.2679182E-8f32),
            ((-60, -70), 3.6087982E-8f32),
            ((-60, -60), 4.3701583E-8f32),
            ((-60, -50), 3.905786E-8f32),
            ((-60, -40), 4.1541064E-8f32),
            ((-60, -30), 4.3882643E-8f32),
            ((-60, -20), 3.6382332E-8f32),
            ((-60, -10), 3.799164E-8f32),
            ((-60, 0), 3.3409137E-8f32),
            ((-60, 10), 3.406884E-8f32),
            ((-60, 20), 3.063624E-8f32),
            ((-60, 30), 1.9141522E-8f32),
            ((-60, 40), 2.0079938E-8f32),
            ((-60, 50), 1.6220396E-8f32),
            ((-60, 60), 1.490829E-8f32),
            ((-60, 70), 1.054482E-8f32),
            ((-60, 80), 1.3725451E-8f32),
            ((-60, 90), 1.9279936E-8f32),
            ((-60, 100), 2.0201796E-8f32),
            ((-50, -100), 1.5481977E-8f32),
            ((-50, -90), 1.9391068E-8f32),
            ((-50, -80), 2.8352996E-8f32),
            ((-50, -70), 2.6329761E-8f32),
            ((-50, -60), 2.7734513E-8f32),
            ((-50, -50), 2.6432797E-8f32),
            ((-50, -40), 2.38558E-8f32),
            ((-50, -30), 2.1309475E-8f32),
            ((-50, -20), 2.5337945E-8f32),
            ((-50, -10), 2.8742313E-8f32),
            ((-50, 0), 1.6715818E-8f32),
            ((-50, 10), 1.8083686E-8f32),
            ((-50, 20), 5.7321015E-9f32),
            ((-50, 30), 7.1950286E-9f32),
            ((-50, 40), 1.2317269E-8f32),
            ((-50, 50), 1.3938307E-8f32),
            ((-50, 60), 9.762806E-9f32),
            ((-50, 70), 6.585973E-9f32),
            ((-50, 80), -2.0132167E-4f32),
            ((-50, 90), 4.8335447E-10f32),
            ((-50, 100), 1.9115787E-10f32),
            ((-40, -100), 7.92696E-9f32),
            ((-40, -90), 9.5780255E-9f32),
            ((-40, -80), 2.000497E-8f32),
            ((-40, -70), 2.1985283E-8f32),
            ((-40, -60), 1.9308487E-8f32),
            ((-40, -50), 1.6949537E-8f32),
            ((-40, -40), 9.26493E-9f32),
            ((-40, -30), 5.901878E-9f32),
            ((-40, -20), 2.0966575E-9f32),
            ((-40, -10), 1.0789076E-8f32),
            ((-40, 0), 3.7048786E-10f32),
            ((-40, 10), 1.5132484E-10f32),
            ((-40, 20), -0.05434511f32),
            ((-40, 30), 1.271871E-9f32),
            ((-40, 40), 3.488727E-9f32),
            ((-40, 50), 2.2437354E-9f32),
            ((-40, 60), -0.05718465f32),
            ((-40, 70), -0.2222f32),
            ((-40, 80), -0.2222f32),
            ((-40, 90), -0.2222f32),
            ((-40, 100), -0.2222f32),
            ((-30, -100), 1.0579677E-9f32),
            ((-30, -90), 6.055233E-9f32),
            ((-30, -80), 9.750893E-9f32),
            ((-30, -70), 1.0611076E-8f32),
            ((-30, -60), 1.2687537E-8f32),
            ((-30, -50), 6.9418045E-9f32),
            ((-30, -40), -0.0013300264f32),
            ((-30, -30), -0.2222f32),
            ((-30, -20), -0.2222f32),
            ((-30, -10), 4.974776E-11f32),
            ((-30, 0), -0.1278581f32),
            ((-30, 10), -0.2222f32),
            ((-30, 20), -0.2222f32),
            ((-30, 30), -0.2222f32),
            ((-30, 40), -0.2222f32),
            ((-30, 50), -0.2222f32),
            ((-30, 60), -0.2222f32),
            ((-30, 70), -0.2222f32),
            ((-30, 80), -0.13529345f32),
            ((-30, 90), -0.21922092f32),
            ((-30, 100), -0.2222f32),
            ((-20, -100), -0.05537056f32),
            ((-20, -90), 8.724288E-11f32),
            ((-20, -80), 1.1884951E-9f32),
            ((-20, -70), 1.9197697E-9f32),
            ((-20, -60), 2.9805012E-9f32),
            ((-20, -50), 2.7255143E-11f32),
            ((-20, -40), -0.2222f32),
            ((-20, -30), -0.2222f32),
            ((-20, -20), -0.2222f32),
            ((-20, -10), -0.2222f32),
            ((-20, 0), -0.2222f32),
            ((-20, 10), -0.2222f32),
            ((-20, 20), 2.0200092E-12f32),
            ((-20, 30), -0.221999f32),
            ((-20, 40), 2.5891045E-9f32),
            ((-20, 50), 1.0679839E-8f32),
            ((-20, 60), 1.1929803E-8f32),
            ((-20, 70), 6.1294547E-10f32),
            ((-20, 80), 1.5799029E-9f32),
            ((-20, 90), 3.388032E-9f32),
            ((-20, 100), 8.267753E-11f32),
            ((-10, -100), -0.2222f32),
            ((-10, -90), -0.2222f32),
            ((-10, -80), -0.2222f32),
            ((-10, -70), -0.006202223f32),
            ((-10, -60), -0.2222f32),
            ((-10, -50), -0.2222f32),
            ((-10, -40), -0.2222f32),
            ((-10, -30), -0.2222f32),
            ((-10, -20), -0.2222f32),
            ((-10, -10), 5.449592E-10f32),
            ((-10, 0), 3.257944E-11f32),
            ((-10, 10), 2.431444E-9f32),
            ((-10, 20), 2.6643359E-9f32),
            ((-10, 30), 1.1549817E-8f32),
            ((-10, 40), 1.0936498E-8f32),
            ((-10, 50), 2.8515958E-8f32),
            ((-10, 60), 4.7736425E-8f32),
            ((-10, 70), 3.3957107E-8f32),
            ((-10, 80), 1.9823945E-8f32),
            ((-10, 90), 2.1265759E-8f32),
            ((-10, 100), 7.636967E-9f32),
            ((0, -100), -0.2222f32),
            ((0, -90), -0.2222f32),
            ((0, -80), -0.2222f32),
            ((0, -70), -0.2222f32),
            ((0, -60), -0.2222f32),
            ((0, -50), -0.2222f32),
            ((0, -40), -2.7082162E-5f32),
            ((0, -30), -0.21585968f32),
            ((0, -20), -0.2222f32),
            ((0, -10), 1.176656E-12f32),
            ((0, 0), 4.198286E-9f32),
            ((0, 10), 1.0030648E-8f32),
            ((0, 20), 1.8099078E-8f32),
            ((0, 30), 3.2837217E-8f32),
            ((0, 40), 3.7809123E-8f32),
            ((0, 50), 4.6640707E-8f32),
            ((0, 60), 5.240726E-8f32),
            ((0, 70), 4.0587377E-8f32),
            ((0, 80), 5.0135483E-8f32),
            ((0, 90), 4.109085E-8f32),
            ((0, 100), 3.3951714E-8f32),
            ((10, -100), -0.2222f32),
            ((10, -90), -0.2099127f32),
            ((10, -80), -0.2222f32),
            ((10, -70), -0.2222f32),
            ((10, -60), -0.22206965f32),
            ((10, -50), 2.551357E-10f32),
            ((10, -40), 4.397175E-9f32),
            ((10, -30), 7.580093E-9f32),
            ((10, -20), 9.14382E-9f32),
            ((10, -10), 1.4292095E-8f32),
            ((10, 0), 1.9721933E-8f32),
            ((10, 10), 3.4391746E-8f32),
            ((10, 20), 4.29825E-8f32),
            ((10, 30), 5.1166293E-8f32),
            ((10, 40), 5.8700344E-8f32),
            ((10, 50), 5.4385303E-8f32),
            ((10, 60), 4.675182E-8f32),
            ((10, 70), 3.5514102E-8f32),
            ((10, 80), 4.9047724E-8f32),
            ((10, 90), 4.84383E-8f32),
            ((10, 100), 5.0942354E-8f32),
            ((20, -100), -0.026743041f32),
            ((20, -90), 7.402218E-12f32),
            ((20, -80), 1.2031336E-9f32),
            ((20, -70), 3.514784E-10f32),
            ((20, -60), 6.2830163E-10f32),
            ((20, -50), 4.5063593E-9f32),
            ((20, -40), 1.2455702E-8f32),
            ((20, -30), 2.1923082E-8f32),
            ((20, -20), 2.689708E-8f32),
            ((20, -10), 3.3098544E-8f32),
            ((20, 0), 3.8737195E-8f32),
            ((20, 10), 5.412859E-8f32),
            ((20, 20), 5.7970148E-8f32),
            ((20, 30), 0.004082742f32),
            ((20, 40), 0.10993963f32),
            ((20, 50), 0.0022723493f32),
            ((20, 60), 5.348043E-8f32),
            ((20, 70), 5.833126E-8f32),
            ((20, 80), 5.833503E-8f32),
            ((20, 90), 5.905414E-8f32),
            ((20, 100), 5.9325732E-8f32),
            ((30, -100), 1.883031E-9f32),
            ((30, -90), 2.340967E-9f32),
            ((30, -80), 4.621183E-9f32),
            ((30, -70), 4.499291E-9f32),
            ((30, -60), 9.207621E-9f32),
            ((30, -50), 1.8463968E-8f32),
            ((30, -40), 3.1730355E-8f32),
            ((30, -30), 4.180272E-8f32),
            ((30, -20), 4.8970673E-8f32),
            ((30, -10), 5.1013075E-8f32),
            ((30, 0), 5.4809675E-8f32),
            ((30, 10), 0.021245107f32),
            ((30, 20), 0.15461163f32),
            ((30, 30), 0.16635494f32),
            ((30, 40), 0.1956933f32),
            ((30, 50), 0.125502f32),
            ((30, 60), 0.0454505f32),
            ((30, 70), 0.11700109f32),
            ((30, 80), 0.09687484f32),
            ((30, 90), 0.098305956f32),
            ((30, 100), 0.1445496f32),
            ((40, -100), 1.0226738E-8f32),
            ((40, -90), 1.1222422E-8f32),
            ((40, -80), 1.1587838E-8f32),
            ((40, -70), 1.2693759E-8f32),
            ((40, -60), 2.4839746E-8f32),
            ((40, -50), 3.7039946E-8f32),
            ((40, -40), 4.376643E-8f32),
            ((40, -30), 5.5051583E-8f32),
            ((40, -20), 5.699222E-8f32),
            ((40, -10), 5.8692283E-8f32),
            ((40, 0), 5.959828E-8f32),
            ((40, 10), 0.117445365f32),
            ((40, 20), 0.1976749f32),
            ((40, 30), 0.15454988f32),
            ((40, 40), 0.12067541f32),
            ((40, 50), 0.18615633f32),
            ((40, 60), 0.13336352f32),
            ((40, 70), 0.17219193f32),
            ((40, 80), 0.19097134f32),
            ((40, 90), 0.17008683f32),
            ((40, 100), 0.19814269f32),
            ((50, -100), 1.986243E-8f32),
            ((50, -90), 3.0001612E-8f32),
            ((50, -80), 2.7766955E-8f32),
            ((50, -70), 2.638818E-8f32),
            ((50, -60), 2.8721853E-8f32),
            ((50, -50), 4.524472E-8f32),
            ((50, -40), 5.231772E-8f32),
            ((50, -30), 5.6755226E-8f32),
            ((50, -20), 0.007071222f32),
            ((50, -10), 0.044527233f32),
            ((50, 0), 0.1308815f32),
            ((50, 10), 0.17924443f32),
            ((50, 20), 0.171056f32),
            ((50, 30), 0.11742895f32),
            ((50, 40), 0.100002244f32),
            ((50, 50), 0.07300641f32),
            ((50, 60), 0.039613634f32),
            ((50, 70), 0.07481807f32),
            ((50, 80), 0.14415564f32),
            ((50, 90), 0.17187755f32),
            ((50, 100), 0.19749363f32),
            ((60, -100), 2.5121897E-8f32),
            ((60, -90), 3.6076102E-8f32),
            ((60, -80), 3.5671647E-8f32),
            ((60, -70), 3.3701973E-8f32),
            ((60, -60), 4.019155E-8f32),
            ((60, -50), 4.4427246E-8f32),
            ((60, -40), 4.8801404E-8f32),
            ((60, -30), 5.7100323E-8f32),
            ((60, -20), 0.016408712f32),
            ((60, -10), 0.118191816f32),
            ((60, 0), 0.1338304f32),
            ((60, 10), 0.19006152f32),
            ((60, 20), 0.13440025f32),
            ((60, 30), 0.05049737f32),
            ((60, 40), 0.034953773f32),
            ((60, 50), 0.010686001f32),
            ((60, 60), 9.3192887E-4f32),
            ((60, 70), 0.01608308f32),
            ((60, 80), 0.06671151f32),
            ((60, 90), 0.12534031f32),
            ((60, 100), 0.1557267f32),
            ((70, -100), 2.4559224E-8f32),
            ((70, -90), 3.1209016E-8f32),
            ((70, -80), 3.584771E-8f32),
            ((70, -70), 3.920727E-8f32),
            ((70, -60), 4.6965155E-8f32),
            ((70, -50), 5.0089643E-8f32),
            ((70, -40), 5.7268437E-8f32),
            ((70, -30), 5.8877202E-8f32),
            ((70, -20), 0.04484091f32),
            ((70, -10), 0.10752107f32),
            ((70, 0), 0.18246908f32),
            ((70, 10), 0.15116146f32),
            ((70, 20), 0.11487521f32),
            ((70, 30), 0.032360524f32),
            ((70, 40), 8.2579E-4f32),
            ((70, 50), -2.8622872E-4f32),
            ((70, 60), -1.8847623E-4f32),
            ((70, 70), 0.013071927f32),
            ((70, 80), 0.033794176f32),
            ((70, 90), 0.0804281f32),
            ((70, 100), 0.1404463f32),
            ((80, -100), 2.193597E-8f32),
            ((80, -90), 2.6228625E-8f32),
            ((80, -80), 3.3251055E-8f32),
            ((80, -70), 3.7941476E-8f32),
            ((80, -60), 4.690521E-8f32),
            ((80, -50), 5.439166E-8f32),
            ((80, -40), 5.7380536E-8f32),
            ((80, -30), -3.256929E-4f32),
            ((80, -20), 0.09458507f32),
            ((80, -10), 0.14780462f32),
            ((80, 0), 0.17881581f32),
            ((80, 10), 0.104895204f32),
            ((80, 20), 0.07187125f32),
            ((80, 30), 0.033689234f32),
            ((80, 40), 0.021538133f32),
            ((80, 50), 0.023637377f32),
            ((80, 60), 0.013018714f32),
            ((80, 70), 0.01623013f32),
            ((80, 80), 0.051183194f32),
            ((80, 90), 0.12191488f32),
            ((80, 100), 0.183341f32),
            ((90, -100), 2.1037952E-8f32),
            ((90, -90), 2.265903E-8f32),
            ((90, -80), 2.9746175E-8f32),
            ((90, -70), 3.0741784E-8f32),
            ((90, -60), 3.696515E-8f32),
            ((90, -50), 4.9130783E-8f32),
            ((90, -40), 5.4571295E-8f32),
            ((90, -30), 5.932105E-8f32),
            ((90, -20), 0.052174564f32),
            ((90, -10), 0.1461835f32),
            ((90, 0), 0.16661009f32),
            ((90, 10), 0.17031777f32),
            ((90, 20), 0.09012478f32),
            ((90, 30), 0.08638496f32),
            ((90, 40), 0.077556595f32),
            ((90, 50), 0.090003595f32),
            ((90, 60), 0.078915626f32),
            ((90, 70), 0.08257657f32),
            ((90, 80), 0.07836004f32),
            ((90, 90), 0.14655045f32),
            ((90, 100), 0.18773082f32),
            ((100, -100), 1.6543842E-8f32),
            ((100, -90), 2.0407779E-8f32),
            ((100, -80), 2.2677513E-8f32),
            ((100, -70), 2.7998853E-8f32),
            ((100, -60), 3.3088963E-8f32),
            ((100, -50), 3.9689027E-8f32),
            ((100, -40), 4.2064737E-8f32),
            ((100, -30), 5.060286E-8f32),
            ((100, -20), 5.8539825E-8f32),
            ((100, -10), 5.9588313E-8f32),
            ((100, 0), 0.09291531f32),
            ((100, 10), 0.16675612f32),
            ((100, 20), 0.19767791f32),
            ((100, 30), 0.19702585f32),
            ((100, 40), 0.18153131f32),
            ((100, 50), 0.1733732f32),
            ((100, 60), 0.1887327f32),
            ((100, 70), 0.17346446f32),
            ((100, 80), 0.1434478f32),
            ((100, 90), 0.19244039f32),
            ((100, 100), 0.08641162f32),
        ];

        let spline = create_ridges_spline(
            RIDGES_FOLDED_OVERWORLD
                .clone()
                .convert(&mut converter)
                .assert_shared(),
            0.1f32,
            false,
            FloatAmplifier::OffsetAmplifier,
        );
        for ((x, z), value) in values {
            let pos = &NoisePos::Unblended(UnblendedNoisePos::new(x, 60, z));
            assert_eq!(spline.sample(pos), value);
        }
    }

    #[test]
    fn test_create_standard_spline() {
        let mut rand = LegacyRand::from_seed(0);
        let deriver = rand.next_splitter();
        let mut converter = TestConverter {
            splitter: RandomDeriver::Legacy(deriver),
        };

        let values = [
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-100, -100),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-100, 100),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (100, -100),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (100, 100),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-100, -100),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-100, 100),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (100, -100),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (100, 100),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-100, -100),
                -0.9811153f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-100, 100),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (100, -100),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (100, 100),
                0.2725821f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-100, -100),
                -0.9811153f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-100, 100),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (100, -100),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (100, 100),
                0.2725821f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-100, -100),
                1.1114353f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-100, 100),
                -0.6609869f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (100, -100),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (100, 100),
                -0.06985277f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-100, -100),
                1.1114353f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-100, 100),
                -0.6609869f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (100, -100),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (100, 100),
                -0.06985277f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-100, -100),
                1.1303201f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-100, 100),
                -0.6609869f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (100, -100),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (100, 100),
                1.2027293f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-100, -100),
                1.1303201f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-100, 100),
                -0.6609869f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (100, -100),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (100, 100),
                1.2027293f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-100, -100),
                -1.1303201f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-100, 100),
                1.2500136f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (100, -100),
                -0.5855955f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (100, 100),
                -1.2027293f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-100, -100),
                -1.1303201f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-100, 100),
                1.2500136f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (100, -100),
                -0.53155243f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (100, 100),
                -1.2027293f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-100, -100),
                -1.1114353f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-100, 100),
                1.2500136f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (100, -100),
                -0.5855955f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (100, 100),
                0.06985277f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-100, -100),
                -1.1114353f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-100, 100),
                1.2500136f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (100, -100),
                -0.53155243f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (100, 100),
                0.06985277f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-100, -100),
                0.9811153f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-100, 100),
                1.5890267f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (100, -100),
                -0.5855955f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (100, 100),
                -0.2725821f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-100, -100),
                0.9811153f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-100, 100),
                1.5890267f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (100, -100),
                -0.53155243f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (100, 100),
                -0.2725821f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-100, -100),
                1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-100, 100),
                1.5890267f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (100, -100),
                -0.5855955f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (100, 100),
                1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-100, -100),
                1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-100, 100),
                1.5890267f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (100, -100),
                -0.53155243f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (100, 100),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-100, -100),
                -1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-100, 100),
                -1.5890267f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (100, -100),
                0.045165043f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (100, 100),
                -1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-100, -100),
                -1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-100, 100),
                -1.5890267f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (100, -100),
                0.045165043f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (100, 100),
                -1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-100, -100),
                -0.9811153f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-100, 100),
                -1.5890267f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (100, -100),
                0.045165043f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (100, 100),
                0.2725821f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-100, -100),
                -0.9811153f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-100, 100),
                -1.5890267f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (100, -100),
                0.045165043f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (100, 100),
                0.2725821f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-100, -100),
                1.1114353f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-100, 100),
                -1.2500136f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (100, -100),
                0.045165043f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (100, 100),
                -0.06985277f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-100, -100),
                1.1114353f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-100, 100),
                -1.2500136f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (100, -100),
                0.045165043f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (100, 100),
                -0.06985277f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-100, -100),
                1.1303201f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-100, 100),
                -1.2500136f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (100, -100),
                0.045165043f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (100, 100),
                1.2027293f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-100, -100),
                1.1303201f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-100, 100),
                -1.2500136f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (100, -100),
                0.045165043f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (100, 100),
                1.2027293f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-100, -100),
                -1.1303201f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-100, 100),
                0.6609869f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (100, -100),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (100, 100),
                -1.2027293f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-100, -100),
                -1.1303201f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-100, 100),
                0.6609869f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (100, -100),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (100, 100),
                -1.2027293f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-100, -100),
                -1.1114353f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-100, 100),
                0.6609869f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (100, -100),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (100, 100),
                0.06985277f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-100, -100),
                -1.1114353f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-100, 100),
                0.6609869f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (100, -100),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (100, 100),
                0.06985277f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-100, -100),
                0.9811153f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-100, 100),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (100, -100),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (100, 100),
                -0.2725821f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-100, -100),
                0.9811153f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-100, 100),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (100, -100),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (100, 100),
                -0.2725821f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-100, -100),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-100, 100),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (100, -100),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (100, 100),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-100, -100),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-100, 100),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (100, -100),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (100, 100),
                1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-100, -100),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-100, 100),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (100, -100),
                -1.054043f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (100, 100),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-100, -100),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-100, 100),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (100, -100),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (100, 100),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-100, -100),
                -0.9811153f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-100, 100),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (100, -100),
                -1.054043f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (100, 100),
                0.2725821f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-100, -100),
                -0.9811153f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-100, 100),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (100, -100),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (100, 100),
                0.2725821f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-100, -100),
                1.1114353f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-100, 100),
                -0.6609869f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (100, -100),
                -1.054043f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (100, 100),
                -0.06985277f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-100, -100),
                1.1114353f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-100, 100),
                -0.6609869f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (100, -100),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (100, 100),
                -0.06985277f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-100, -100),
                1.1303201f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-100, 100),
                -0.6609869f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (100, -100),
                -1.054043f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (100, 100),
                1.2027293f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-100, -100),
                1.1303201f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-100, 100),
                -0.6609869f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (100, -100),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (100, 100),
                1.2027293f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-100, -100),
                -1.1303201f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-100, 100),
                1.2500136f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (100, -100),
                -0.6396386f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (100, 100),
                -1.2027293f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-100, -100),
                -1.1303201f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-100, 100),
                1.2500136f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (100, -100),
                -0.53155243f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (100, 100),
                -1.2027293f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-100, -100),
                -1.1114353f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-100, 100),
                1.2500136f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (100, -100),
                -0.6396386f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (100, 100),
                0.06985277f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-100, -100),
                -1.1114353f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-100, 100),
                1.2500136f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (100, -100),
                -0.53155243f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (100, 100),
                0.06985277f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-100, -100),
                0.9811153f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-100, 100),
                1.5890267f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (100, -100),
                -0.6396386f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (100, 100),
                -0.2725821f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-100, -100),
                0.9811153f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-100, 100),
                1.5890267f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (100, -100),
                -0.53155243f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (100, 100),
                -0.2725821f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-100, -100),
                1.0f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-100, 100),
                1.5890267f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (100, -100),
                -0.6396386f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (100, 100),
                1.0f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-100, -100),
                1.0f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-100, 100),
                1.5890267f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (100, -100),
                -0.53155243f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (100, 100),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-100, -100),
                -1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-100, 100),
                -1.5890267f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (100, -100),
                0.045165043f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (100, 100),
                -1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-100, -100),
                -1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-100, 100),
                -1.5890267f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (100, -100),
                0.045165043f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (100, 100),
                -1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-100, -100),
                -0.9811153f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-100, 100),
                -1.5890267f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (100, -100),
                0.045165043f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (100, 100),
                0.2725821f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-100, -100),
                -0.9811153f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-100, 100),
                -1.5890267f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (100, -100),
                0.045165043f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (100, 100),
                0.2725821f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-100, -100),
                1.1114353f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-100, 100),
                -1.2500136f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (100, -100),
                0.045165043f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (100, 100),
                -0.06985277f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-100, -100),
                1.1114353f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-100, 100),
                -1.2500136f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (100, -100),
                0.045165043f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (100, 100),
                -0.06985277f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-100, -100),
                1.1303201f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-100, 100),
                -1.2500136f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (100, -100),
                0.045165043f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (100, 100),
                1.2027293f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-100, -100),
                1.1303201f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-100, 100),
                -1.2500136f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (100, -100),
                0.045165043f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (100, 100),
                1.2027293f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-100, -100),
                -1.1303201f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-100, 100),
                0.6609869f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (100, -100),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (100, 100),
                -1.2027293f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-100, -100),
                -1.1303201f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-100, 100),
                0.6609869f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (100, -100),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (100, 100),
                -1.2027293f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-100, -100),
                -1.1114353f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-100, 100),
                0.6609869f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (100, -100),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (100, 100),
                0.06985277f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-100, -100),
                -1.1114353f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-100, 100),
                0.6609869f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (100, -100),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (100, 100),
                0.06985277f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-100, -100),
                0.9811153f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-100, 100),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (100, -100),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (100, 100),
                -0.2725821f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-100, -100),
                0.9811153f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-100, 100),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (100, -100),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (100, 100),
                -0.2725821f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-100, -100),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-100, 100),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (100, -100),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (100, 100),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-100, -100),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-100, 100),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (100, -100),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (100, 100),
                1.0f32,
            ),
        ];

        for ((i, j, k, l, m, n), (x, z), result) in values {
            let spline = create_standard_spline(
                RIDGES_FOLDED_OVERWORLD
                    .clone()
                    .convert(&mut converter)
                    .assert_shared(),
                i,
                j,
                k,
                l,
                m,
                n,
                FloatAmplifier::Identity,
            );

            let pos = &NoisePos::Unblended(UnblendedNoisePos::new(x, 60, z));
            assert_eq!(spline.sample(pos), result);
        }
    }

    #[test]
    fn test_create_total_spline() {
        let mut rand = LegacyRand::from_seed(0);
        let deriver = rand.next_splitter();
        let mut converter = TestConverter {
            splitter: RandomDeriver::Legacy(deriver),
        };

        let spline = create_total_spline(
            EROSION_OVERWORLD
                .clone()
                .convert(&mut converter)
                .assert_shared(),
            RIDGES_OVERWORLD
                .clone()
                .convert(&mut converter)
                .assert_shared(),
            RIDGES_FOLDED_OVERWORLD
                .clone()
                .convert(&mut converter)
                .assert_shared(),
            0.1f32,
            false,
            FloatAmplifier::Identity,
        );

        let results = [
            ((-100, -100), 3.9559398f32),
            ((-100, -80), 4.807647f32),
            ((-100, -60), 5.374414f32),
            ((-100, -40), 6.039576f32),
            ((-100, -20), 6.2145243f32),
            ((-100, 0), 6.2519383f32),
            ((-100, 20), 5.668728f32),
            ((-100, 40), 5.430271f32),
            ((-100, 60), 5.3465686f32),
            ((-100, 80), 5.7992992f32),
            ((-100, 100), 6.184176f32),
            ((-80, -100), 4.2855577f32),
            ((-80, -80), 5.410581f32),
            ((-80, -60), 6.0751333f32),
            ((-80, -40), 6.064536f32),
            ((-80, -20), 6.294022f32),
            ((-80, 0), 5.9999614f32),
            ((-80, 20), 5.593004f32),
            ((-80, 40), 5.134943f32),
            ((-80, 60), 4.980488f32),
            ((-80, 80), 5.261717f32),
            ((-80, 100), 5.8683443f32),
            ((-60, -100), 5.3242173f32),
            ((-60, -80), 6.1496606f32),
            ((-60, -60), 6.2368507f32),
            ((-60, -40), 6.2986646f32),
            ((-60, -20), 5.810248f32),
            ((-60, 0), 5.273079f32),
            ((-60, 20), 5.040388f32),
            ((-60, 40), 4.3643947f32),
            ((-60, 60), 4.333951f32),
            ((-60, 80), 4.4810057f32),
            ((-60, 100), 5.1953006f32),
            ((-40, -100), 5.7455482f32),
            ((-40, -80), 6.260874f32),
            ((-40, -60), 6.145445f32),
            ((-40, -40), 5.577779f32),
            ((-40, -20), 4.6068044f32),
            ((-40, 0), 3.8860993f32),
            ((-40, 20), 3.6332812f32),
            ((-40, 40), 3.6844056f32),
            ((-40, 60), 3.6776288f32),
            ((-40, 80), 4.0753975f32),
            ((-40, 100), 4.052621f32),
            ((-20, -100), 5.9622307f32),
            ((-20, -80), 6.1761384f32),
            ((-20, -60), 5.989888f32),
            ((-20, -40), 5.1478043f32),
            ((-20, -20), 3.3569198f32),
            ((-20, 0), 3.5856972f32),
            ((-20, 20), 4.7114053f32),
            ((-20, 40), 5.187414f32),
            ((-20, 60), 5.3671384f32),
            ((-20, 80), 5.118062f32),
            ((-20, 100), 5.00394f32),
            ((0, -100), 5.6509624f32),
            ((0, -80), 3.9915285f32),
            ((0, -60), 3.0518057f32),
            ((0, -40), 3.6596267f32),
            ((0, -20), 3.7325847f32),
            ((0, 0), 5.0374494f32),
            ((0, 20), 5.4231296f32),
            ((0, 40), 5.573647f32),
            ((0, 60), 5.7088904f32),
            ((0, 80), 5.8659945f32),
            ((0, 100), 6.062538f32),
            ((20, -100), 2.6716564f32),
            ((20, -80), 3.0382447f32),
            ((20, -60), 3.2207258f32),
            ((20, -40), 3.914099f32),
            ((20, -20), 4.7410517f32),
            ((20, 0), 5.3999853f32),
            ((20, 20), 5.6645765f32),
            ((20, 40), 5.8144393f32),
            ((20, 60), 5.7998343f32),
            ((20, 80), 6.048253f32),
            ((20, 100), 6.258326f32),
            ((40, -100), 2.7401226f32),
            ((40, -80), 2.915509f32),
            ((40, -60), 3.5286994f32),
            ((40, -40), 4.3014565f32),
            ((40, -20), 5.0878124f32),
            ((40, 0), 5.541592f32),
            ((40, 20), 5.8015866f32),
            ((40, 40), 5.959838f32),
            ((40, 60), 6.0048213f32),
            ((40, 80), 6.170586f32),
            ((40, 100), 6.3f32),
            ((60, -100), 3.086289f32),
            ((60, -80), 3.4860597f32),
            ((60, -60), 3.699067f32),
            ((60, -40), 4.0114455f32),
            ((60, -20), 5.0421495f32),
            ((60, 0), 5.3703775f32),
            ((60, 20), 5.722691f32),
            ((60, 40), 5.930701f32),
            ((60, 60), 6.1620193f32),
            ((60, 80), 6.3f32),
            ((60, 100), 6.3f32),
            ((80, -100), 3.215626f32),
            ((80, -80), 3.7482586f32),
            ((80, -60), 4.0281653f32),
            ((80, -40), 4.536797f32),
            ((80, -20), 5.225231f32),
            ((80, 0), 5.6602106f32),
            ((80, 20), 5.8967495f32),
            ((80, 40), 6.143576f32),
            ((80, 60), 6.280398f32),
            ((80, 80), 6.3f32),
            ((80, 100), 6.3f32),
            ((100, -100), 3.8355258f32),
            ((100, -80), 4.377617f32),
            ((100, -60), 4.545309f32),
            ((100, -40), 4.9803877f32),
            ((100, -20), 5.34028f32),
            ((100, 0), 5.9103274f32),
            ((100, 20), 6.028236f32),
            ((100, 40), 6.257579f32),
            ((100, 60), 6.3f32),
            ((100, 80), 6.3f32),
            ((100, 100), 6.3f32),
        ];

        for ((x, z), result) in results {
            let pos = &NoisePos::Unblended(UnblendedNoisePos::new(x, 60, z));
            assert_eq!(spline.sample(pos), result);
        }

        let spline = create_total_spline(
            EROSION_OVERWORLD
                .clone()
                .convert(&mut converter)
                .assert_shared(),
            RIDGES_OVERWORLD
                .clone()
                .convert(&mut converter)
                .assert_shared(),
            RIDGES_FOLDED_OVERWORLD
                .clone()
                .convert(&mut converter)
                .assert_shared(),
            0.1f32,
            true,
            FloatAmplifier::Identity,
        );

        let results = [
            ((-100, -100), 3.9559398f32),
            ((-100, -80), 4.807647f32),
            ((-100, -60), 5.374414f32),
            ((-100, -40), 6.039576f32),
            ((-100, -20), 6.2145243f32),
            ((-100, 0), 6.2519383f32),
            ((-100, 20), 5.668728f32),
            ((-100, 40), 5.430271f32),
            ((-100, 60), 5.3465686f32),
            ((-100, 80), 5.7992992f32),
            ((-100, 100), 6.184176f32),
            ((-80, -100), 4.2855577f32),
            ((-80, -80), 5.410581f32),
            ((-80, -60), 6.0751333f32),
            ((-80, -40), 6.064536f32),
            ((-80, -20), 6.294022f32),
            ((-80, 0), 5.9999614f32),
            ((-80, 20), 5.593004f32),
            ((-80, 40), 5.134943f32),
            ((-80, 60), 4.980488f32),
            ((-80, 80), 5.261717f32),
            ((-80, 100), 5.8683443f32),
            ((-60, -100), 5.3242173f32),
            ((-60, -80), 6.1496606f32),
            ((-60, -60), 6.2368507f32),
            ((-60, -40), 6.2986646f32),
            ((-60, -20), 5.810248f32),
            ((-60, 0), 5.273079f32),
            ((-60, 20), 5.040388f32),
            ((-60, 40), 4.3643947f32),
            ((-60, 60), 4.333951f32),
            ((-60, 80), 4.4810057f32),
            ((-60, 100), 5.1953006f32),
            ((-40, -100), 5.7455482f32),
            ((-40, -80), 6.260874f32),
            ((-40, -60), 6.145445f32),
            ((-40, -40), 5.577779f32),
            ((-40, -20), 4.6068044f32),
            ((-40, 0), 3.8860993f32),
            ((-40, 20), 3.6332812f32),
            ((-40, 40), 3.6844056f32),
            ((-40, 60), 3.6776288f32),
            ((-40, 80), 4.0753975f32),
            ((-40, 100), 4.052621f32),
            ((-20, -100), 5.9622307f32),
            ((-20, -80), 6.1761384f32),
            ((-20, -60), 5.989888f32),
            ((-20, -40), 5.1478043f32),
            ((-20, -20), 3.3569198f32),
            ((-20, 0), 3.5856972f32),
            ((-20, 20), 4.7114053f32),
            ((-20, 40), 5.187414f32),
            ((-20, 60), 5.3671384f32),
            ((-20, 80), 5.118062f32),
            ((-20, 100), 5.00394f32),
            ((0, -100), 5.6509624f32),
            ((0, -80), 3.9915285f32),
            ((0, -60), 3.0518057f32),
            ((0, -40), 3.6596267f32),
            ((0, -20), 3.7325847f32),
            ((0, 0), 5.0374494f32),
            ((0, 20), 5.4231296f32),
            ((0, 40), 5.573647f32),
            ((0, 60), 5.7088904f32),
            ((0, 80), 5.8659945f32),
            ((0, 100), 6.062538f32),
            ((20, -100), 2.6716564f32),
            ((20, -80), 3.0382447f32),
            ((20, -60), 3.2207258f32),
            ((20, -40), 3.914099f32),
            ((20, -20), 4.7410517f32),
            ((20, 0), 5.3999853f32),
            ((20, 20), 5.6645765f32),
            ((20, 40), 5.8144393f32),
            ((20, 60), 5.7998343f32),
            ((20, 80), 6.048253f32),
            ((20, 100), 6.258326f32),
            ((40, -100), 2.7401226f32),
            ((40, -80), 2.915509f32),
            ((40, -60), 3.5286994f32),
            ((40, -40), 4.3014565f32),
            ((40, -20), 5.0878124f32),
            ((40, 0), 5.541592f32),
            ((40, 20), 5.8015866f32),
            ((40, 40), 5.959838f32),
            ((40, 60), 6.0048213f32),
            ((40, 80), 6.170586f32),
            ((40, 100), 6.3f32),
            ((60, -100), 3.086289f32),
            ((60, -80), 3.4860597f32),
            ((60, -60), 3.699067f32),
            ((60, -40), 4.0114455f32),
            ((60, -20), 5.0421495f32),
            ((60, 0), 5.3703775f32),
            ((60, 20), 5.722691f32),
            ((60, 40), 5.930701f32),
            ((60, 60), 6.1620193f32),
            ((60, 80), 6.3f32),
            ((60, 100), 6.3f32),
            ((80, -100), 3.215626f32),
            ((80, -80), 3.7482586f32),
            ((80, -60), 4.0281653f32),
            ((80, -40), 4.536797f32),
            ((80, -20), 5.225231f32),
            ((80, 0), 5.6602106f32),
            ((80, 20), 5.8967495f32),
            ((80, 40), 6.143576f32),
            ((80, 60), 6.280398f32),
            ((80, 80), 6.3f32),
            ((80, 100), 6.3f32),
            ((100, -100), 3.8355258f32),
            ((100, -80), 4.377617f32),
            ((100, -60), 4.545309f32),
            ((100, -40), 4.9803877f32),
            ((100, -20), 5.34028f32),
            ((100, 0), 5.9103274f32),
            ((100, 20), 6.028236f32),
            ((100, 40), 6.257579f32),
            ((100, 60), 6.3f32),
            ((100, 80), 6.3f32),
            ((100, 100), 6.3f32),
        ];

        for ((x, z), result) in results {
            let pos = &NoisePos::Unblended(UnblendedNoisePos::new(x, 60, z));
            assert_eq!(spline.sample(pos), result);
        }
    }

    #[test]
    fn test_create_folded_ridges_spline() {
        let mut rand = LegacyRand::from_seed(0);
        let deriver = rand.next_splitter();
        let mut converter = TestConverter {
            splitter: RandomDeriver::Legacy(deriver),
        };

        let results = [
            ((-1.0f32, -1.0f32), (-100, -100), 0.0f32),
            ((-1.0f32, -1.0f32), (-100, -80), 0.0f32),
            ((-1.0f32, -1.0f32), (-100, -60), 0.0f32),
            ((-1.0f32, -1.0f32), (-100, -40), 0.0f32),
            ((-1.0f32, -1.0f32), (-100, -20), 0.0f32),
            ((-1.0f32, -1.0f32), (-100, 0), 0.0f32),
            ((-1.0f32, -1.0f32), (-100, 20), 0.0f32),
            ((-1.0f32, -1.0f32), (-100, 40), 0.0f32),
            ((-1.0f32, -1.0f32), (-100, 60), 0.0f32),
            ((-1.0f32, -1.0f32), (-100, 80), 0.0f32),
            ((-1.0f32, -1.0f32), (-100, 100), 0.0f32),
            ((-1.0f32, -1.0f32), (-80, -100), 0.0f32),
            ((-1.0f32, -1.0f32), (-80, -80), 0.0f32),
            ((-1.0f32, -1.0f32), (-80, -60), 0.0f32),
            ((-1.0f32, -1.0f32), (-80, -40), 0.0f32),
            ((-1.0f32, -1.0f32), (-80, -20), 0.0f32),
            ((-1.0f32, -1.0f32), (-80, 0), 0.0f32),
            ((-1.0f32, -1.0f32), (-80, 20), 0.0f32),
            ((-1.0f32, -1.0f32), (-80, 40), 0.0f32),
            ((-1.0f32, -1.0f32), (-80, 60), 0.0f32),
            ((-1.0f32, -1.0f32), (-80, 80), 0.0f32),
            ((-1.0f32, -1.0f32), (-80, 100), 0.0f32),
            ((-1.0f32, -1.0f32), (-60, -100), 0.0f32),
            ((-1.0f32, -1.0f32), (-60, -80), 0.0f32),
            ((-1.0f32, -1.0f32), (-60, -60), 0.0f32),
            ((-1.0f32, -1.0f32), (-60, -40), 0.0f32),
            ((-1.0f32, -1.0f32), (-60, -20), 0.0f32),
            ((-1.0f32, -1.0f32), (-60, 0), 0.0f32),
            ((-1.0f32, -1.0f32), (-60, 20), 0.0f32),
            ((-1.0f32, -1.0f32), (-60, 40), 0.0f32),
            ((-1.0f32, -1.0f32), (-60, 60), 0.0f32),
            ((-1.0f32, -1.0f32), (-60, 80), 0.0f32),
            ((-1.0f32, -1.0f32), (-60, 100), 0.0f32),
            ((-1.0f32, -1.0f32), (-40, -100), 0.0f32),
            ((-1.0f32, -1.0f32), (-40, -80), 0.0f32),
            ((-1.0f32, -1.0f32), (-40, -60), 0.0f32),
            ((-1.0f32, -1.0f32), (-40, -40), 0.0f32),
            ((-1.0f32, -1.0f32), (-40, -20), 0.0f32),
            ((-1.0f32, -1.0f32), (-40, 0), 0.0f32),
            ((-1.0f32, -1.0f32), (-40, 20), 0.0f32),
            ((-1.0f32, -1.0f32), (-40, 40), 0.0f32),
            ((-1.0f32, -1.0f32), (-40, 60), 0.0f32),
            ((-1.0f32, -1.0f32), (-40, 80), 0.0f32),
            ((-1.0f32, -1.0f32), (-40, 100), 0.0f32),
            ((-1.0f32, -1.0f32), (-20, -100), 0.0f32),
            ((-1.0f32, -1.0f32), (-20, -80), 0.0f32),
            ((-1.0f32, -1.0f32), (-20, -60), 0.0f32),
            ((-1.0f32, -1.0f32), (-20, -40), 0.0f32),
            ((-1.0f32, -1.0f32), (-20, -20), 0.0f32),
            ((-1.0f32, -1.0f32), (-20, 0), 0.0f32),
            ((-1.0f32, -1.0f32), (-20, 20), 0.0f32),
            ((-1.0f32, -1.0f32), (-20, 40), 0.0f32),
            ((-1.0f32, -1.0f32), (-20, 60), 0.0f32),
            ((-1.0f32, -1.0f32), (-20, 80), 0.0f32),
            ((-1.0f32, -1.0f32), (-20, 100), 0.0f32),
            ((-1.0f32, -1.0f32), (0, -100), 0.0f32),
            ((-1.0f32, -1.0f32), (0, -80), 0.0f32),
            ((-1.0f32, -1.0f32), (0, -60), 0.0f32),
            ((-1.0f32, -1.0f32), (0, -40), 0.0f32),
            ((-1.0f32, -1.0f32), (0, -20), 0.0f32),
            ((-1.0f32, -1.0f32), (0, 0), 0.0f32),
            ((-1.0f32, -1.0f32), (0, 20), 0.0f32),
            ((-1.0f32, -1.0f32), (0, 40), 0.0f32),
            ((-1.0f32, -1.0f32), (0, 60), 0.0f32),
            ((-1.0f32, -1.0f32), (0, 80), 0.0f32),
            ((-1.0f32, -1.0f32), (0, 100), 0.0f32),
            ((-1.0f32, -1.0f32), (20, -100), 0.0f32),
            ((-1.0f32, -1.0f32), (20, -80), 0.0f32),
            ((-1.0f32, -1.0f32), (20, -60), 0.0f32),
            ((-1.0f32, -1.0f32), (20, -40), 0.0f32),
            ((-1.0f32, -1.0f32), (20, -20), 0.0f32),
            ((-1.0f32, -1.0f32), (20, 0), 0.0f32),
            ((-1.0f32, -1.0f32), (20, 20), 0.0f32),
            ((-1.0f32, -1.0f32), (20, 40), 0.0f32),
            ((-1.0f32, -1.0f32), (20, 60), 0.0f32),
            ((-1.0f32, -1.0f32), (20, 80), 0.0f32),
            ((-1.0f32, -1.0f32), (20, 100), 0.0f32),
            ((-1.0f32, -1.0f32), (40, -100), 0.0f32),
            ((-1.0f32, -1.0f32), (40, -80), 0.0f32),
            ((-1.0f32, -1.0f32), (40, -60), 0.0f32),
            ((-1.0f32, -1.0f32), (40, -40), 0.0f32),
            ((-1.0f32, -1.0f32), (40, -20), 0.0f32),
            ((-1.0f32, -1.0f32), (40, 0), 0.0f32),
            ((-1.0f32, -1.0f32), (40, 20), 0.0f32),
            ((-1.0f32, -1.0f32), (40, 40), 0.0f32),
            ((-1.0f32, -1.0f32), (40, 60), 0.0f32),
            ((-1.0f32, -1.0f32), (40, 80), 0.0f32),
            ((-1.0f32, -1.0f32), (40, 100), 0.0f32),
            ((-1.0f32, -1.0f32), (60, -100), 0.0f32),
            ((-1.0f32, -1.0f32), (60, -80), 0.0f32),
            ((-1.0f32, -1.0f32), (60, -60), 0.0f32),
            ((-1.0f32, -1.0f32), (60, -40), 0.0f32),
            ((-1.0f32, -1.0f32), (60, -20), 0.0f32),
            ((-1.0f32, -1.0f32), (60, 0), 0.0f32),
            ((-1.0f32, -1.0f32), (60, 20), 0.0f32),
            ((-1.0f32, -1.0f32), (60, 40), 0.0f32),
            ((-1.0f32, -1.0f32), (60, 60), 0.0f32),
            ((-1.0f32, -1.0f32), (60, 80), 0.0f32),
            ((-1.0f32, -1.0f32), (60, 100), 0.0f32),
            ((-1.0f32, -1.0f32), (80, -100), 0.0f32),
            ((-1.0f32, -1.0f32), (80, -80), 0.0f32),
            ((-1.0f32, -1.0f32), (80, -60), 0.0f32),
            ((-1.0f32, -1.0f32), (80, -40), 0.0f32),
            ((-1.0f32, -1.0f32), (80, -20), 0.0f32),
            ((-1.0f32, -1.0f32), (80, 0), 0.0f32),
            ((-1.0f32, -1.0f32), (80, 20), 0.0f32),
            ((-1.0f32, -1.0f32), (80, 40), 0.0f32),
            ((-1.0f32, -1.0f32), (80, 60), 0.0f32),
            ((-1.0f32, -1.0f32), (80, 80), 0.0f32),
            ((-1.0f32, -1.0f32), (80, 100), 0.0f32),
            ((-1.0f32, -1.0f32), (100, -100), 0.0f32),
            ((-1.0f32, -1.0f32), (100, -80), 0.0f32),
            ((-1.0f32, -1.0f32), (100, -60), 0.0f32),
            ((-1.0f32, -1.0f32), (100, -40), 0.0f32),
            ((-1.0f32, -1.0f32), (100, -20), 0.0f32),
            ((-1.0f32, -1.0f32), (100, 0), 0.0f32),
            ((-1.0f32, -1.0f32), (100, 20), 0.0f32),
            ((-1.0f32, -1.0f32), (100, 40), 0.0f32),
            ((-1.0f32, -1.0f32), (100, 60), 0.0f32),
            ((-1.0f32, -1.0f32), (100, 80), 0.0f32),
            ((-1.0f32, -1.0f32), (100, 100), 0.0f32),
            ((-1.0f32, 1.0f32), (-100, -100), 0.297652f32),
            ((-1.0f32, 1.0f32), (-100, -80), 0.28439626f32),
            ((-1.0f32, 1.0f32), (-100, -60), 0.28112307f32),
            ((-1.0f32, 1.0f32), (-100, -40), 0.28095382f32),
            ((-1.0f32, 1.0f32), (-100, -20), 0.24100831f32),
            ((-1.0f32, 1.0f32), (-100, 0), 0.2526898f32),
            ((-1.0f32, 1.0f32), (-100, 20), 0.2813595f32),
            ((-1.0f32, 1.0f32), (-100, 40), 0.29286346f32),
            ((-1.0f32, 1.0f32), (-100, 60), 0.21068382f32),
            ((-1.0f32, 1.0f32), (-100, 80), 0.063217856f32),
            ((-1.0f32, 1.0f32), (-100, 100), 0.0f32),
            ((-1.0f32, 1.0f32), (-80, -100), 0.0f32),
            ((-1.0f32, 1.0f32), (-80, -80), 0.008730456f32),
            ((-1.0f32, 1.0f32), (-80, -60), 0.15711506f32),
            ((-1.0f32, 1.0f32), (-80, -40), 0.28587654f32),
            ((-1.0f32, 1.0f32), (-80, -20), 0.21130508f32),
            ((-1.0f32, 1.0f32), (-80, 0), 0.29809594f32),
            ((-1.0f32, 1.0f32), (-80, 20), 0.2206994f32),
            ((-1.0f32, 1.0f32), (-80, 40), 0.0027657598f32),
            ((-1.0f32, 1.0f32), (-80, 60), 0.0f32),
            ((-1.0f32, 1.0f32), (-80, 80), 0.0f32),
            ((-1.0f32, 1.0f32), (-80, 100), 0.0f32),
            ((-1.0f32, 1.0f32), (-60, -100), 0.0f32),
            ((-1.0f32, 1.0f32), (-60, -80), 0.0f32),
            ((-1.0f32, 1.0f32), (-60, -60), 0.0f32),
            ((-1.0f32, 1.0f32), (-60, -40), 0.0f32),
            ((-1.0f32, 1.0f32), (-60, -20), 0.0f32),
            ((-1.0f32, 1.0f32), (-60, 0), 0.0f32),
            ((-1.0f32, 1.0f32), (-60, 20), 0.0f32),
            ((-1.0f32, 1.0f32), (-60, 40), 0.0f32),
            ((-1.0f32, 1.0f32), (-60, 60), 0.0f32),
            ((-1.0f32, 1.0f32), (-60, 80), 0.0f32),
            ((-1.0f32, 1.0f32), (-60, 100), 0.0f32),
            ((-1.0f32, 1.0f32), (-40, -100), 0.0f32),
            ((-1.0f32, 1.0f32), (-40, -80), 0.0f32),
            ((-1.0f32, 1.0f32), (-40, -60), 0.0f32),
            ((-1.0f32, 1.0f32), (-40, -40), 0.0f32),
            ((-1.0f32, 1.0f32), (-40, -20), 0.0f32),
            ((-1.0f32, 1.0f32), (-40, 0), 0.0f32),
            ((-1.0f32, 1.0f32), (-40, 20), 0.0f32),
            ((-1.0f32, 1.0f32), (-40, 40), 0.0f32),
            ((-1.0f32, 1.0f32), (-40, 60), 0.0f32),
            ((-1.0f32, 1.0f32), (-40, 80), 0.0f32),
            ((-1.0f32, 1.0f32), (-40, 100), 0.0f32),
            ((-1.0f32, 1.0f32), (-20, -100), 0.0f32),
            ((-1.0f32, 1.0f32), (-20, -80), 0.0f32),
            ((-1.0f32, 1.0f32), (-20, -60), 0.0f32),
            ((-1.0f32, 1.0f32), (-20, -40), 0.0f32),
            ((-1.0f32, 1.0f32), (-20, -20), 0.0f32),
            ((-1.0f32, 1.0f32), (-20, 0), 0.0f32),
            ((-1.0f32, 1.0f32), (-20, 20), 0.0f32),
            ((-1.0f32, 1.0f32), (-20, 40), 0.0f32),
            ((-1.0f32, 1.0f32), (-20, 60), 0.0f32),
            ((-1.0f32, 1.0f32), (-20, 80), 0.0f32),
            ((-1.0f32, 1.0f32), (-20, 100), 0.0f32),
            ((-1.0f32, 1.0f32), (0, -100), 0.0f32),
            ((-1.0f32, 1.0f32), (0, -80), 0.0f32),
            ((-1.0f32, 1.0f32), (0, -60), 0.0f32),
            ((-1.0f32, 1.0f32), (0, -40), 0.0f32),
            ((-1.0f32, 1.0f32), (0, -20), 0.0f32),
            ((-1.0f32, 1.0f32), (0, 0), 0.0f32),
            ((-1.0f32, 1.0f32), (0, 20), 0.0f32),
            ((-1.0f32, 1.0f32), (0, 40), 0.0f32),
            ((-1.0f32, 1.0f32), (0, 60), 0.31608355f32),
            ((-1.0f32, 1.0f32), (0, 80), 0.15622428f32),
            ((-1.0f32, 1.0f32), (0, 100), 0.0f32),
            ((-1.0f32, 1.0f32), (20, -100), 0.0f32),
            ((-1.0f32, 1.0f32), (20, -80), 0.0f32),
            ((-1.0f32, 1.0f32), (20, -60), 0.0f32),
            ((-1.0f32, 1.0f32), (20, -40), 0.0f32),
            ((-1.0f32, 1.0f32), (20, -20), 0.0f32),
            ((-1.0f32, 1.0f32), (20, 0), 0.0f32),
            ((-1.0f32, 1.0f32), (20, 20), 0.6269908f32),
            ((-1.0f32, 1.0f32), (20, 40), 0.16064115f32),
            ((-1.0f32, 1.0f32), (20, 60), 0.40093344f32),
            ((-1.0f32, 1.0f32), (20, 80), 0.62168556f32),
            ((-1.0f32, 1.0f32), (20, 100), 0.579518f32),
            ((-1.0f32, 1.0f32), (40, -100), 0.0f32),
            ((-1.0f32, 1.0f32), (40, -80), 0.0f32),
            ((-1.0f32, 1.0f32), (40, -60), 0.0f32),
            ((-1.0f32, 1.0f32), (40, -40), 0.0f32),
            ((-1.0f32, 1.0f32), (40, -20), 0.62588596f32),
            ((-1.0f32, 1.0f32), (40, 0), 0.5309059f32),
            ((-1.0f32, 1.0f32), (40, 20), 4.5912433E-4f32),
            ((-1.0f32, 1.0f32), (40, 40), 0.13530377f32),
            ((-1.0f32, 1.0f32), (40, 60), 0.10672425f32),
            ((-1.0f32, 1.0f32), (40, 80), 0.0052022375f32),
            ((-1.0f32, 1.0f32), (40, 100), 3.0043628E-4f32),
            ((-1.0f32, 1.0f32), (60, -100), 0.0f32),
            ((-1.0f32, 1.0f32), (60, -80), 0.0f32),
            ((-1.0f32, 1.0f32), (60, -60), 0.0f32),
            ((-1.0f32, 1.0f32), (60, -40), 0.08376785f32),
            ((-1.0f32, 1.0f32), (60, -20), 0.43452874f32),
            ((-1.0f32, 1.0f32), (60, 0), 0.1057023f32),
            ((-1.0f32, 1.0f32), (60, 20), 0.10445799f32),
            ((-1.0f32, 1.0f32), (60, 40), 0.36914507f32),
            ((-1.0f32, 1.0f32), (60, 60), 0.5024393f32),
            ((-1.0f32, 1.0f32), (60, 80), 0.27316388f32),
            ((-1.0f32, 1.0f32), (60, 100), 0.06046915f32),
            ((-1.0f32, 1.0f32), (80, -100), 0.0f32),
            ((-1.0f32, 1.0f32), (80, -80), 0.0f32),
            ((-1.0f32, 1.0f32), (80, -60), 0.01727397f32),
            ((-1.0f32, 1.0f32), (80, -40), 0.6299955f32),
            ((-1.0f32, 1.0f32), (80, -20), 0.19864634f32),
            ((-1.0f32, 1.0f32), (80, 0), 0.02047487f32),
            ((-1.0f32, 1.0f32), (80, 20), 0.25879034f32),
            ((-1.0f32, 1.0f32), (80, 40), 0.41536066f32),
            ((-1.0f32, 1.0f32), (80, 60), 0.44784027f32),
            ((-1.0f32, 1.0f32), (80, 80), 0.31828198f32),
            ((-1.0f32, 1.0f32), (80, 100), 0.014104452f32),
            ((-1.0f32, 1.0f32), (100, -100), 0.0f32),
            ((-1.0f32, 1.0f32), (100, -80), 0.0f32),
            ((-1.0f32, 1.0f32), (100, -60), 0.0f32),
            ((-1.0f32, 1.0f32), (100, -40), 0.0f32),
            ((-1.0f32, 1.0f32), (100, -20), 0.6171453f32),
            ((-1.0f32, 1.0f32), (100, 0), 0.20290473f32),
            ((-1.0f32, 1.0f32), (100, 20), 4.5798905E-4f32),
            ((-1.0f32, 1.0f32), (100, 40), 0.01657176f32),
            ((-1.0f32, 1.0f32), (100, 60), 0.00752043f32),
            ((-1.0f32, 1.0f32), (100, 80), 0.0851554f32),
            ((-1.0f32, 1.0f32), (100, 100), 0.21973094f32),
            ((1.0f32, -1.0f32), (-100, -100), 0.0f32),
            ((1.0f32, -1.0f32), (-100, -80), 0.015603749f32),
            ((1.0f32, -1.0f32), (-100, -60), 0.018876947f32),
            ((1.0f32, -1.0f32), (-100, -40), 0.019046182f32),
            ((1.0f32, -1.0f32), (-100, -20), 0.058991697f32),
            ((1.0f32, -1.0f32), (-100, 0), 0.047310222f32),
            ((1.0f32, -1.0f32), (-100, 20), 0.01864053f32),
            ((1.0f32, -1.0f32), (-100, 40), 0.0f32),
            ((1.0f32, -1.0f32), (-100, 60), 0.0f32),
            ((1.0f32, -1.0f32), (-100, 80), 0.0f32),
            ((1.0f32, -1.0f32), (-100, 100), 0.0f32),
            ((1.0f32, -1.0f32), (-80, -100), 0.0f32),
            ((1.0f32, -1.0f32), (-80, -80), 0.0f32),
            ((1.0f32, -1.0f32), (-80, -60), 0.0f32),
            ((1.0f32, -1.0f32), (-80, -40), 0.0f32),
            ((1.0f32, -1.0f32), (-80, -20), 0.0f32),
            ((1.0f32, -1.0f32), (-80, 0), 0.0f32),
            ((1.0f32, -1.0f32), (-80, 20), 0.0f32),
            ((1.0f32, -1.0f32), (-80, 40), 0.0f32),
            ((1.0f32, -1.0f32), (-80, 60), 0.0f32),
            ((1.0f32, -1.0f32), (-80, 80), 0.0f32),
            ((1.0f32, -1.0f32), (-80, 100), 0.0f32),
            ((1.0f32, -1.0f32), (-60, -100), 0.0f32),
            ((1.0f32, -1.0f32), (-60, -80), 0.0f32),
            ((1.0f32, -1.0f32), (-60, -60), 0.0f32),
            ((1.0f32, -1.0f32), (-60, -40), 0.0f32),
            ((1.0f32, -1.0f32), (-60, -20), 0.0f32),
            ((1.0f32, -1.0f32), (-60, 0), 0.0f32),
            ((1.0f32, -1.0f32), (-60, 20), 0.0f32),
            ((1.0f32, -1.0f32), (-60, 40), 0.0f32),
            ((1.0f32, -1.0f32), (-60, 60), 0.0f32),
            ((1.0f32, -1.0f32), (-60, 80), 0.0f32),
            ((1.0f32, -1.0f32), (-60, 100), 0.0f32),
            ((1.0f32, -1.0f32), (-40, -100), 0.0f32),
            ((1.0f32, -1.0f32), (-40, -80), 0.0f32),
            ((1.0f32, -1.0f32), (-40, -60), 0.0f32),
            ((1.0f32, -1.0f32), (-40, -40), 0.0f32),
            ((1.0f32, -1.0f32), (-40, -20), 0.0f32),
            ((1.0f32, -1.0f32), (-40, 0), 0.0f32),
            ((1.0f32, -1.0f32), (-40, 20), 0.0f32),
            ((1.0f32, -1.0f32), (-40, 40), 0.0f32),
            ((1.0f32, -1.0f32), (-40, 60), 0.0f32),
            ((1.0f32, -1.0f32), (-40, 80), 0.0f32),
            ((1.0f32, -1.0f32), (-40, 100), 0.0f32),
            ((1.0f32, -1.0f32), (-20, -100), 0.0f32),
            ((1.0f32, -1.0f32), (-20, -80), 0.0f32),
            ((1.0f32, -1.0f32), (-20, -60), 0.0f32),
            ((1.0f32, -1.0f32), (-20, -40), 0.0f32),
            ((1.0f32, -1.0f32), (-20, -20), 0.0f32),
            ((1.0f32, -1.0f32), (-20, 0), 0.0f32),
            ((1.0f32, -1.0f32), (-20, 20), 0.0f32),
            ((1.0f32, -1.0f32), (-20, 40), 0.0f32),
            ((1.0f32, -1.0f32), (-20, 60), 0.0f32),
            ((1.0f32, -1.0f32), (-20, 80), 0.0f32),
            ((1.0f32, -1.0f32), (-20, 100), 0.0f32),
            ((1.0f32, -1.0f32), (0, -100), 0.0f32),
            ((1.0f32, -1.0f32), (0, -80), 0.0f32),
            ((1.0f32, -1.0f32), (0, -60), 0.0f32),
            ((1.0f32, -1.0f32), (0, -40), 0.0f32),
            ((1.0f32, -1.0f32), (0, -20), 0.0f32),
            ((1.0f32, -1.0f32), (0, 0), 0.0f32),
            ((1.0f32, -1.0f32), (0, 20), 0.0f32),
            ((1.0f32, -1.0f32), (0, 40), 0.0f32),
            ((1.0f32, -1.0f32), (0, 60), 0.0f32),
            ((1.0f32, -1.0f32), (0, 80), 0.0f32),
            ((1.0f32, -1.0f32), (0, 100), 0.0f32),
            ((1.0f32, -1.0f32), (20, -100), 0.0f32),
            ((1.0f32, -1.0f32), (20, -80), 0.0f32),
            ((1.0f32, -1.0f32), (20, -60), 0.0f32),
            ((1.0f32, -1.0f32), (20, -40), 0.0f32),
            ((1.0f32, -1.0f32), (20, -20), 0.0f32),
            ((1.0f32, -1.0f32), (20, 0), 0.0f32),
            ((1.0f32, -1.0f32), (20, 20), 0.003009146f32),
            ((1.0f32, -1.0f32), (20, 40), 0.46935886f32),
            ((1.0f32, -1.0f32), (20, 60), 0.0f32),
            ((1.0f32, -1.0f32), (20, 80), 0.008314434f32),
            ((1.0f32, -1.0f32), (20, 100), 0.05048198f32),
            ((1.0f32, -1.0f32), (40, -100), 0.0f32),
            ((1.0f32, -1.0f32), (40, -80), 0.0f32),
            ((1.0f32, -1.0f32), (40, -60), 0.0f32),
            ((1.0f32, -1.0f32), (40, -40), 0.0f32),
            ((1.0f32, -1.0f32), (40, -20), 0.0f32),
            ((1.0f32, -1.0f32), (40, 0), 0.09909409f32),
            ((1.0f32, -1.0f32), (40, 20), 0.62954086f32),
            ((1.0f32, -1.0f32), (40, 40), 0.49469623f32),
            ((1.0f32, -1.0f32), (40, 60), 0.52327573f32),
            ((1.0f32, -1.0f32), (40, 80), 0.62479776f32),
            ((1.0f32, -1.0f32), (40, 100), 0.6296996f32),
            ((1.0f32, -1.0f32), (60, -100), 0.0f32),
            ((1.0f32, -1.0f32), (60, -80), 0.0f32),
            ((1.0f32, -1.0f32), (60, -60), 0.0f32),
            ((1.0f32, -1.0f32), (60, -40), 0.0f32),
            ((1.0f32, -1.0f32), (60, -20), 0.19547126f32),
            ((1.0f32, -1.0f32), (60, 0), 0.5242977f32),
            ((1.0f32, -1.0f32), (60, 20), 0.525542f32),
            ((1.0f32, -1.0f32), (60, 40), 0.26085493f32),
            ((1.0f32, -1.0f32), (60, 60), 0.12756069f32),
            ((1.0f32, -1.0f32), (60, 80), 0.3568361f32),
            ((1.0f32, -1.0f32), (60, 100), 0.56953084f32),
            ((1.0f32, -1.0f32), (80, -100), 0.0f32),
            ((1.0f32, -1.0f32), (80, -80), 0.0f32),
            ((1.0f32, -1.0f32), (80, -60), 0.0f32),
            ((1.0f32, -1.0f32), (80, -40), 4.4467743E-6f32),
            ((1.0f32, -1.0f32), (80, -20), 0.43135366f32),
            ((1.0f32, -1.0f32), (80, 0), 0.60952514f32),
            ((1.0f32, -1.0f32), (80, 20), 0.37120965f32),
            ((1.0f32, -1.0f32), (80, 40), 0.21463935f32),
            ((1.0f32, -1.0f32), (80, 60), 0.18215972f32),
            ((1.0f32, -1.0f32), (80, 80), 0.31171802f32),
            ((1.0f32, -1.0f32), (80, 100), 0.61589557f32),
            ((1.0f32, -1.0f32), (100, -100), 0.0f32),
            ((1.0f32, -1.0f32), (100, -80), 0.0f32),
            ((1.0f32, -1.0f32), (100, -60), 0.0f32),
            ((1.0f32, -1.0f32), (100, -40), 0.0f32),
            ((1.0f32, -1.0f32), (100, -20), 0.012854669f32),
            ((1.0f32, -1.0f32), (100, 0), 0.42709526f32),
            ((1.0f32, -1.0f32), (100, 20), 0.629542f32),
            ((1.0f32, -1.0f32), (100, 40), 0.61342824f32),
            ((1.0f32, -1.0f32), (100, 60), 0.62247956f32),
            ((1.0f32, -1.0f32), (100, 80), 0.54484457f32),
            ((1.0f32, -1.0f32), (100, 100), 0.41026905f32),
            ((1.0f32, 1.0f32), (-100, -100), 0.297652f32),
            ((1.0f32, 1.0f32), (-100, -80), 0.3f32),
            ((1.0f32, 1.0f32), (-100, -60), 0.3f32),
            ((1.0f32, 1.0f32), (-100, -40), 0.3f32),
            ((1.0f32, 1.0f32), (-100, -20), 0.3f32),
            ((1.0f32, 1.0f32), (-100, 0), 0.3f32),
            ((1.0f32, 1.0f32), (-100, 20), 0.3f32),
            ((1.0f32, 1.0f32), (-100, 40), 0.29286346f32),
            ((1.0f32, 1.0f32), (-100, 60), 0.21068382f32),
            ((1.0f32, 1.0f32), (-100, 80), 0.063217856f32),
            ((1.0f32, 1.0f32), (-100, 100), 0.0f32),
            ((1.0f32, 1.0f32), (-80, -100), 0.0f32),
            ((1.0f32, 1.0f32), (-80, -80), 0.008730456f32),
            ((1.0f32, 1.0f32), (-80, -60), 0.15711506f32),
            ((1.0f32, 1.0f32), (-80, -40), 0.28587654f32),
            ((1.0f32, 1.0f32), (-80, -20), 0.21130508f32),
            ((1.0f32, 1.0f32), (-80, 0), 0.29809594f32),
            ((1.0f32, 1.0f32), (-80, 20), 0.2206994f32),
            ((1.0f32, 1.0f32), (-80, 40), 0.0027657598f32),
            ((1.0f32, 1.0f32), (-80, 60), 0.0f32),
            ((1.0f32, 1.0f32), (-80, 80), 0.0f32),
            ((1.0f32, 1.0f32), (-80, 100), 0.0f32),
            ((1.0f32, 1.0f32), (-60, -100), 0.0f32),
            ((1.0f32, 1.0f32), (-60, -80), 0.0f32),
            ((1.0f32, 1.0f32), (-60, -60), 0.0f32),
            ((1.0f32, 1.0f32), (-60, -40), 0.0f32),
            ((1.0f32, 1.0f32), (-60, -20), 0.0f32),
            ((1.0f32, 1.0f32), (-60, 0), 0.0f32),
            ((1.0f32, 1.0f32), (-60, 20), 0.0f32),
            ((1.0f32, 1.0f32), (-60, 40), 0.0f32),
            ((1.0f32, 1.0f32), (-60, 60), 0.0f32),
            ((1.0f32, 1.0f32), (-60, 80), 0.0f32),
            ((1.0f32, 1.0f32), (-60, 100), 0.0f32),
            ((1.0f32, 1.0f32), (-40, -100), 0.0f32),
            ((1.0f32, 1.0f32), (-40, -80), 0.0f32),
            ((1.0f32, 1.0f32), (-40, -60), 0.0f32),
            ((1.0f32, 1.0f32), (-40, -40), 0.0f32),
            ((1.0f32, 1.0f32), (-40, -20), 0.0f32),
            ((1.0f32, 1.0f32), (-40, 0), 0.0f32),
            ((1.0f32, 1.0f32), (-40, 20), 0.0f32),
            ((1.0f32, 1.0f32), (-40, 40), 0.0f32),
            ((1.0f32, 1.0f32), (-40, 60), 0.0f32),
            ((1.0f32, 1.0f32), (-40, 80), 0.0f32),
            ((1.0f32, 1.0f32), (-40, 100), 0.0f32),
            ((1.0f32, 1.0f32), (-20, -100), 0.0f32),
            ((1.0f32, 1.0f32), (-20, -80), 0.0f32),
            ((1.0f32, 1.0f32), (-20, -60), 0.0f32),
            ((1.0f32, 1.0f32), (-20, -40), 0.0f32),
            ((1.0f32, 1.0f32), (-20, -20), 0.0f32),
            ((1.0f32, 1.0f32), (-20, 0), 0.0f32),
            ((1.0f32, 1.0f32), (-20, 20), 0.0f32),
            ((1.0f32, 1.0f32), (-20, 40), 0.0f32),
            ((1.0f32, 1.0f32), (-20, 60), 0.0f32),
            ((1.0f32, 1.0f32), (-20, 80), 0.0f32),
            ((1.0f32, 1.0f32), (-20, 100), 0.0f32),
            ((1.0f32, 1.0f32), (0, -100), 0.0f32),
            ((1.0f32, 1.0f32), (0, -80), 0.0f32),
            ((1.0f32, 1.0f32), (0, -60), 0.0f32),
            ((1.0f32, 1.0f32), (0, -40), 0.0f32),
            ((1.0f32, 1.0f32), (0, -20), 0.0f32),
            ((1.0f32, 1.0f32), (0, 0), 0.0f32),
            ((1.0f32, 1.0f32), (0, 20), 0.0f32),
            ((1.0f32, 1.0f32), (0, 40), 0.0f32),
            ((1.0f32, 1.0f32), (0, 60), 0.31608355f32),
            ((1.0f32, 1.0f32), (0, 80), 0.15622428f32),
            ((1.0f32, 1.0f32), (0, 100), 0.0f32),
            ((1.0f32, 1.0f32), (20, -100), 0.0f32),
            ((1.0f32, 1.0f32), (20, -80), 0.0f32),
            ((1.0f32, 1.0f32), (20, -60), 0.0f32),
            ((1.0f32, 1.0f32), (20, -40), 0.0f32),
            ((1.0f32, 1.0f32), (20, -20), 0.0f32),
            ((1.0f32, 1.0f32), (20, 0), 0.0f32),
            ((1.0f32, 1.0f32), (20, 20), 0.63f32),
            ((1.0f32, 1.0f32), (20, 40), 0.63f32),
            ((1.0f32, 1.0f32), (20, 60), 0.40093344f32),
            ((1.0f32, 1.0f32), (20, 80), 0.63f32),
            ((1.0f32, 1.0f32), (20, 100), 0.63f32),
            ((1.0f32, 1.0f32), (40, -100), 0.0f32),
            ((1.0f32, 1.0f32), (40, -80), 0.0f32),
            ((1.0f32, 1.0f32), (40, -60), 0.0f32),
            ((1.0f32, 1.0f32), (40, -40), 0.0f32),
            ((1.0f32, 1.0f32), (40, -20), 0.62588596f32),
            ((1.0f32, 1.0f32), (40, 0), 0.63f32),
            ((1.0f32, 1.0f32), (40, 20), 0.63f32),
            ((1.0f32, 1.0f32), (40, 40), 0.63f32),
            ((1.0f32, 1.0f32), (40, 60), 0.63f32),
            ((1.0f32, 1.0f32), (40, 80), 0.63f32),
            ((1.0f32, 1.0f32), (40, 100), 0.63f32),
            ((1.0f32, 1.0f32), (60, -100), 0.0f32),
            ((1.0f32, 1.0f32), (60, -80), 0.0f32),
            ((1.0f32, 1.0f32), (60, -60), 0.0f32),
            ((1.0f32, 1.0f32), (60, -40), 0.08376785f32),
            ((1.0f32, 1.0f32), (60, -20), 0.63f32),
            ((1.0f32, 1.0f32), (60, 0), 0.63f32),
            ((1.0f32, 1.0f32), (60, 20), 0.63f32),
            ((1.0f32, 1.0f32), (60, 40), 0.63f32),
            ((1.0f32, 1.0f32), (60, 60), 0.63f32),
            ((1.0f32, 1.0f32), (60, 80), 0.63f32),
            ((1.0f32, 1.0f32), (60, 100), 0.63f32),
            ((1.0f32, 1.0f32), (80, -100), 0.0f32),
            ((1.0f32, 1.0f32), (80, -80), 0.0f32),
            ((1.0f32, 1.0f32), (80, -60), 0.01727397f32),
            ((1.0f32, 1.0f32), (80, -40), 0.63f32),
            ((1.0f32, 1.0f32), (80, -20), 0.63f32),
            ((1.0f32, 1.0f32), (80, 0), 0.63f32),
            ((1.0f32, 1.0f32), (80, 20), 0.63f32),
            ((1.0f32, 1.0f32), (80, 40), 0.63f32),
            ((1.0f32, 1.0f32), (80, 60), 0.63f32),
            ((1.0f32, 1.0f32), (80, 80), 0.63f32),
            ((1.0f32, 1.0f32), (80, 100), 0.63f32),
            ((1.0f32, 1.0f32), (100, -100), 0.0f32),
            ((1.0f32, 1.0f32), (100, -80), 0.0f32),
            ((1.0f32, 1.0f32), (100, -60), 0.0f32),
            ((1.0f32, 1.0f32), (100, -40), 0.0f32),
            ((1.0f32, 1.0f32), (100, -20), 0.63f32),
            ((1.0f32, 1.0f32), (100, 0), 0.63f32),
            ((1.0f32, 1.0f32), (100, 20), 0.63f32),
            ((1.0f32, 1.0f32), (100, 40), 0.63f32),
            ((1.0f32, 1.0f32), (100, 60), 0.63f32),
            ((1.0f32, 1.0f32), (100, 80), 0.63f32),
            ((1.0f32, 1.0f32), (100, 100), 0.63f32),
        ];

        for ((i, j), (x, z), result) in results {
            let spline = create_folded_ridges_spline(
                RIDGES_OVERWORLD
                    .clone()
                    .convert(&mut converter)
                    .assert_shared(),
                RIDGES_FOLDED_OVERWORLD
                    .clone()
                    .convert(&mut converter)
                    .assert_shared(),
                i,
                j,
                FloatAmplifier::Identity,
            );

            let pos = &NoisePos::Unblended(UnblendedNoisePos::new(x, 60, z));
            assert_eq!(spline.sample(pos), result);
        }
    }

    #[test]
    fn test_create_ridges_part_spline() {
        let mut rand = LegacyRand::from_seed(0);
        let deriver = rand.next_splitter();
        let mut converter = TestConverter {
            splitter: RandomDeriver::Legacy(deriver),
        };

        let spline = create_ridges_part_spline(
            RIDGES_OVERWORLD
                .clone()
                .convert(&mut converter)
                .assert_shared(),
            0.1f32,
            FloatAmplifier::Identity,
        );

        let results = [
            ((-100, -100), 0.030000001f32),
            ((-100, -80), 0.030000001f32),
            ((-100, -60), 0.030000001f32),
            ((-100, -40), 0.030000001f32),
            ((-100, -20), 0.030000001f32),
            ((-100, 0), 0.030000001f32),
            ((-100, 20), 0.030000001f32),
            ((-100, 40), 0.030000001f32),
            ((-100, 60), 0.030000001f32),
            ((-100, 80), 0.030000001f32),
            ((-100, 100), 0.030000001f32),
            ((-80, -100), 0.030000001f32),
            ((-80, -80), 0.030000001f32),
            ((-80, -60), 0.030000001f32),
            ((-80, -40), 0.030000001f32),
            ((-80, -20), 0.030000001f32),
            ((-80, 0), 0.030000001f32),
            ((-80, 20), 0.030000001f32),
            ((-80, 40), 0.030000001f32),
            ((-80, 60), 0.030000001f32),
            ((-80, 80), 0.030000001f32),
            ((-80, 100), 0.030000001f32),
            ((-60, -100), 0.030000001f32),
            ((-60, -80), 0.030000001f32),
            ((-60, -60), 0.030000001f32),
            ((-60, -40), 0.030000001f32),
            ((-60, -20), 0.030000001f32),
            ((-60, 0), 0.030000001f32),
            ((-60, 20), 0.030000001f32),
            ((-60, 40), 0.030000001f32),
            ((-60, 60), 0.030000001f32),
            ((-60, 80), 0.030000001f32),
            ((-60, 100), 0.030000001f32),
            ((-40, -100), 0.030000001f32),
            ((-40, -80), 0.030000001f32),
            ((-40, -60), 0.030000001f32),
            ((-40, -40), 0.030000001f32),
            ((-40, -20), 0.030000001f32),
            ((-40, 0), 0.030000001f32),
            ((-40, 20), 0.030000001f32),
            ((-40, 40), 0.030000001f32),
            ((-40, 60), 0.030000001f32),
            ((-40, 80), 0.030000001f32),
            ((-40, 100), 0.030000001f32),
            ((-20, -100), 0.030000001f32),
            ((-20, -80), 0.030000001f32),
            ((-20, -60), 0.030000001f32),
            ((-20, -40), 0.030000001f32),
            ((-20, -20), 0.063f32),
            ((-20, 0), 0.063f32),
            ((-20, 20), 0.063f32),
            ((-20, 40), 0.063f32),
            ((-20, 60), 0.063f32),
            ((-20, 80), 0.063f32),
            ((-20, 100), 0.063f32),
            ((0, -100), 0.030000001f32),
            ((0, -80), 0.062803626f32),
            ((0, -60), 0.063f32),
            ((0, -40), 0.063f32),
            ((0, -20), 0.063f32),
            ((0, 0), 0.063f32),
            ((0, 20), 0.063f32),
            ((0, 40), 0.063f32),
            ((0, 60), 0.063f32),
            ((0, 80), 0.063f32),
            ((0, 100), 0.063f32),
            ((20, -100), 0.063f32),
            ((20, -80), 0.063f32),
            ((20, -60), 0.063f32),
            ((20, -40), 0.063f32),
            ((20, -20), 0.063f32),
            ((20, 0), 0.063f32),
            ((20, 20), 0.063f32),
            ((20, 40), 0.063f32),
            ((20, 60), 0.063f32),
            ((20, 80), 0.063f32),
            ((20, 100), 0.063f32),
            ((40, -100), 0.063f32),
            ((40, -80), 0.063f32),
            ((40, -60), 0.063f32),
            ((40, -40), 0.063f32),
            ((40, -20), 0.063f32),
            ((40, 0), 0.063f32),
            ((40, 20), 0.063f32),
            ((40, 40), 0.063f32),
            ((40, 60), 0.063f32),
            ((40, 80), 0.063f32),
            ((40, 100), 0.063f32),
            ((60, -100), 0.063f32),
            ((60, -80), 0.063f32),
            ((60, -60), 0.063f32),
            ((60, -40), 0.063f32),
            ((60, -20), 0.063f32),
            ((60, 0), 0.063f32),
            ((60, 20), 0.063f32),
            ((60, 40), 0.063f32),
            ((60, 60), 0.063f32),
            ((60, 80), 0.063f32),
            ((60, 100), 0.063f32),
            ((80, -100), 0.063f32),
            ((80, -80), 0.063f32),
            ((80, -60), 0.063f32),
            ((80, -40), 0.063f32),
            ((80, -20), 0.063f32),
            ((80, 0), 0.063f32),
            ((80, 20), 0.063f32),
            ((80, 40), 0.063f32),
            ((80, 60), 0.063f32),
            ((80, 80), 0.063f32),
            ((80, 100), 0.063f32),
            ((100, -100), 0.063f32),
            ((100, -80), 0.063f32),
            ((100, -60), 0.063f32),
            ((100, -40), 0.063f32),
            ((100, -20), 0.063f32),
            ((100, 0), 0.063f32),
            ((100, 20), 0.063f32),
            ((100, 40), 0.063f32),
            ((100, 60), 0.063f32),
            ((100, 80), 0.063f32),
            ((100, 100), 0.063f32),
        ];

        for ((x, z), result) in results {
            let pos = &NoisePos::Unblended(UnblendedNoisePos::new(x, 60, z));
            assert_eq!(spline.sample(pos), result);
        }
    }

    #[test]
    fn test_create_eroded_ridges_spline() {
        let mut rand = LegacyRand::from_seed(0);
        let deriver = rand.next_splitter();
        let mut converter = TestConverter {
            splitter: RandomDeriver::Legacy(deriver),
        };

        let results = [
            ((-1.0f32, -1.0f32), (-1000, -1000), 0.0f32),
            ((-1.0f32, -1.0f32), (-1000, -800), 0.0f32),
            ((-1.0f32, -1.0f32), (-1000, -600), 0.0f32),
            ((-1.0f32, -1.0f32), (-1000, -400), 0.0f32),
            ((-1.0f32, -1.0f32), (-1000, -200), 0.0f32),
            ((-1.0f32, -1.0f32), (-1000, 0), 0.0f32),
            ((-1.0f32, -1.0f32), (-1000, 200), 0.0f32),
            ((-1.0f32, -1.0f32), (-1000, 400), 0.0f32),
            ((-1.0f32, -1.0f32), (-1000, 600), 0.0f32),
            ((-1.0f32, -1.0f32), (-1000, 800), 0.0f32),
            ((-1.0f32, -1.0f32), (-1000, 1000), 0.0f32),
            ((-1.0f32, -1.0f32), (-800, -1000), 0.0f32),
            ((-1.0f32, -1.0f32), (-800, -800), 0.0f32),
            ((-1.0f32, -1.0f32), (-800, -600), 0.0f32),
            ((-1.0f32, -1.0f32), (-800, -400), 0.0f32),
            ((-1.0f32, -1.0f32), (-800, -200), 0.0f32),
            ((-1.0f32, -1.0f32), (-800, 0), 0.0f32),
            ((-1.0f32, -1.0f32), (-800, 200), 0.0f32),
            ((-1.0f32, -1.0f32), (-800, 400), 0.0f32),
            ((-1.0f32, -1.0f32), (-800, 600), 0.0f32),
            ((-1.0f32, -1.0f32), (-800, 800), 0.0f32),
            ((-1.0f32, -1.0f32), (-800, 1000), 0.0f32),
            ((-1.0f32, -1.0f32), (-600, -1000), 0.0f32),
            ((-1.0f32, -1.0f32), (-600, -800), 0.0f32),
            ((-1.0f32, -1.0f32), (-600, -600), 0.0f32),
            ((-1.0f32, -1.0f32), (-600, -400), 0.0f32),
            ((-1.0f32, -1.0f32), (-600, -200), 0.0f32),
            ((-1.0f32, -1.0f32), (-600, 0), 0.0f32),
            ((-1.0f32, -1.0f32), (-600, 200), 0.0f32),
            ((-1.0f32, -1.0f32), (-600, 400), 0.0f32),
            ((-1.0f32, -1.0f32), (-600, 600), 0.0f32),
            ((-1.0f32, -1.0f32), (-600, 800), 0.0f32),
            ((-1.0f32, -1.0f32), (-600, 1000), 0.0f32),
            ((-1.0f32, -1.0f32), (-400, -1000), 0.0f32),
            ((-1.0f32, -1.0f32), (-400, -800), 0.0f32),
            ((-1.0f32, -1.0f32), (-400, -600), 0.0f32),
            ((-1.0f32, -1.0f32), (-400, -400), 0.0f32),
            ((-1.0f32, -1.0f32), (-400, -200), 0.0f32),
            ((-1.0f32, -1.0f32), (-400, 0), 0.0f32),
            ((-1.0f32, -1.0f32), (-400, 200), 0.0f32),
            ((-1.0f32, -1.0f32), (-400, 400), 0.0f32),
            ((-1.0f32, -1.0f32), (-400, 600), 0.0f32),
            ((-1.0f32, -1.0f32), (-400, 800), 0.0f32),
            ((-1.0f32, -1.0f32), (-400, 1000), 0.0f32),
            ((-1.0f32, -1.0f32), (-200, -1000), 0.0f32),
            ((-1.0f32, -1.0f32), (-200, -800), 0.0f32),
            ((-1.0f32, -1.0f32), (-200, -600), 0.0f32),
            ((-1.0f32, -1.0f32), (-200, -400), 0.0f32),
            ((-1.0f32, -1.0f32), (-200, -200), 0.0f32),
            ((-1.0f32, -1.0f32), (-200, 0), 0.0f32),
            ((-1.0f32, -1.0f32), (-200, 200), 0.0f32),
            ((-1.0f32, -1.0f32), (-200, 400), 0.0f32),
            ((-1.0f32, -1.0f32), (-200, 600), 0.0f32),
            ((-1.0f32, -1.0f32), (-200, 800), 0.0f32),
            ((-1.0f32, -1.0f32), (-200, 1000), 0.0f32),
            ((-1.0f32, -1.0f32), (0, -1000), 0.0f32),
            ((-1.0f32, -1.0f32), (0, -800), 0.0f32),
            ((-1.0f32, -1.0f32), (0, -600), 0.0f32),
            ((-1.0f32, -1.0f32), (0, -400), 0.0f32),
            ((-1.0f32, -1.0f32), (0, -200), 0.0f32),
            ((-1.0f32, -1.0f32), (0, 0), 0.0f32),
            ((-1.0f32, -1.0f32), (0, 200), 0.0f32),
            ((-1.0f32, -1.0f32), (0, 400), 0.0f32),
            ((-1.0f32, -1.0f32), (0, 600), 0.0f32),
            ((-1.0f32, -1.0f32), (0, 800), 0.0f32),
            ((-1.0f32, -1.0f32), (0, 1000), 0.0f32),
            ((-1.0f32, -1.0f32), (200, -1000), 0.0f32),
            ((-1.0f32, -1.0f32), (200, -800), 0.0f32),
            ((-1.0f32, -1.0f32), (200, -600), 0.0f32),
            ((-1.0f32, -1.0f32), (200, -400), 0.0f32),
            ((-1.0f32, -1.0f32), (200, -200), 0.0f32),
            ((-1.0f32, -1.0f32), (200, 0), 0.0f32),
            ((-1.0f32, -1.0f32), (200, 200), 0.0f32),
            ((-1.0f32, -1.0f32), (200, 400), 0.0f32),
            ((-1.0f32, -1.0f32), (200, 600), 0.0f32),
            ((-1.0f32, -1.0f32), (200, 800), 0.0f32),
            ((-1.0f32, -1.0f32), (200, 1000), 0.0f32),
            ((-1.0f32, -1.0f32), (400, -1000), 0.0f32),
            ((-1.0f32, -1.0f32), (400, -800), 0.0f32),
            ((-1.0f32, -1.0f32), (400, -600), 0.0f32),
            ((-1.0f32, -1.0f32), (400, -400), 0.0f32),
            ((-1.0f32, -1.0f32), (400, -200), 0.0f32),
            ((-1.0f32, -1.0f32), (400, 0), 0.0f32),
            ((-1.0f32, -1.0f32), (400, 200), 0.0f32),
            ((-1.0f32, -1.0f32), (400, 400), 0.0f32),
            ((-1.0f32, -1.0f32), (400, 600), 0.0f32),
            ((-1.0f32, -1.0f32), (400, 800), 0.0f32),
            ((-1.0f32, -1.0f32), (400, 1000), 0.0f32),
            ((-1.0f32, -1.0f32), (600, -1000), 0.0f32),
            ((-1.0f32, -1.0f32), (600, -800), 0.0f32),
            ((-1.0f32, -1.0f32), (600, -600), 0.0f32),
            ((-1.0f32, -1.0f32), (600, -400), 0.0f32),
            ((-1.0f32, -1.0f32), (600, -200), 0.0f32),
            ((-1.0f32, -1.0f32), (600, 0), 0.0f32),
            ((-1.0f32, -1.0f32), (600, 200), 0.0f32),
            ((-1.0f32, -1.0f32), (600, 400), 0.0f32),
            ((-1.0f32, -1.0f32), (600, 600), 0.0f32),
            ((-1.0f32, -1.0f32), (600, 800), 0.0f32),
            ((-1.0f32, -1.0f32), (600, 1000), 0.0f32),
            ((-1.0f32, -1.0f32), (800, -1000), 0.0f32),
            ((-1.0f32, -1.0f32), (800, -800), 0.0f32),
            ((-1.0f32, -1.0f32), (800, -600), 0.0f32),
            ((-1.0f32, -1.0f32), (800, -400), 0.0f32),
            ((-1.0f32, -1.0f32), (800, -200), 0.0f32),
            ((-1.0f32, -1.0f32), (800, 0), 0.0f32),
            ((-1.0f32, -1.0f32), (800, 200), 0.0f32),
            ((-1.0f32, -1.0f32), (800, 400), 0.0f32),
            ((-1.0f32, -1.0f32), (800, 600), 0.0f32),
            ((-1.0f32, -1.0f32), (800, 800), 0.0f32),
            ((-1.0f32, -1.0f32), (800, 1000), 0.0f32),
            ((-1.0f32, -1.0f32), (1000, -1000), 0.0f32),
            ((-1.0f32, -1.0f32), (1000, -800), 0.0f32),
            ((-1.0f32, -1.0f32), (1000, -600), 0.0f32),
            ((-1.0f32, -1.0f32), (1000, -400), 0.0f32),
            ((-1.0f32, -1.0f32), (1000, -200), 0.0f32),
            ((-1.0f32, -1.0f32), (1000, 0), 0.0f32),
            ((-1.0f32, -1.0f32), (1000, 200), 0.0f32),
            ((-1.0f32, -1.0f32), (1000, 400), 0.0f32),
            ((-1.0f32, -1.0f32), (1000, 600), 0.0f32),
            ((-1.0f32, -1.0f32), (1000, 800), 0.0f32),
            ((-1.0f32, -1.0f32), (1000, 1000), 0.0f32),
            ((-1.0f32, 1.0f32), (-1000, -1000), 0.0f32),
            ((-1.0f32, 1.0f32), (-1000, -800), 0.0f32),
            ((-1.0f32, 1.0f32), (-1000, -600), 0.0f32),
            ((-1.0f32, 1.0f32), (-1000, -400), 0.0f32),
            ((-1.0f32, 1.0f32), (-1000, -200), 0.0f32),
            ((-1.0f32, 1.0f32), (-1000, 0), 0.0f32),
            ((-1.0f32, 1.0f32), (-1000, 200), 0.0f32),
            ((-1.0f32, 1.0f32), (-1000, 400), 0.0f32),
            ((-1.0f32, 1.0f32), (-1000, 600), 0.0f32),
            ((-1.0f32, 1.0f32), (-1000, 800), 0.0f32),
            ((-1.0f32, 1.0f32), (-1000, 1000), 0.0f32),
            ((-1.0f32, 1.0f32), (-800, -1000), 0.0f32),
            ((-1.0f32, 1.0f32), (-800, -800), 0.0f32),
            ((-1.0f32, 1.0f32), (-800, -600), 0.0f32),
            ((-1.0f32, 1.0f32), (-800, -400), 0.0f32),
            ((-1.0f32, 1.0f32), (-800, -200), 0.0f32),
            ((-1.0f32, 1.0f32), (-800, 0), 0.0f32),
            ((-1.0f32, 1.0f32), (-800, 200), 0.0f32),
            ((-1.0f32, 1.0f32), (-800, 400), 0.0f32),
            ((-1.0f32, 1.0f32), (-800, 600), 0.0f32),
            ((-1.0f32, 1.0f32), (-800, 800), 0.0f32),
            ((-1.0f32, 1.0f32), (-800, 1000), 0.0f32),
            ((-1.0f32, 1.0f32), (-600, -1000), 0.0f32),
            ((-1.0f32, 1.0f32), (-600, -800), 0.0f32),
            ((-1.0f32, 1.0f32), (-600, -600), 0.0f32),
            ((-1.0f32, 1.0f32), (-600, -400), 0.0f32),
            ((-1.0f32, 1.0f32), (-600, -200), 0.0f32),
            ((-1.0f32, 1.0f32), (-600, 0), 0.0f32),
            ((-1.0f32, 1.0f32), (-600, 200), 0.0f32),
            ((-1.0f32, 1.0f32), (-600, 400), 0.0f32),
            ((-1.0f32, 1.0f32), (-600, 600), 0.0f32),
            ((-1.0f32, 1.0f32), (-600, 800), 0.0f32),
            ((-1.0f32, 1.0f32), (-600, 1000), 0.0f32),
            ((-1.0f32, 1.0f32), (-400, -1000), 0.0f32),
            ((-1.0f32, 1.0f32), (-400, -800), 0.0f32),
            ((-1.0f32, 1.0f32), (-400, -600), 0.0f32),
            ((-1.0f32, 1.0f32), (-400, -400), 0.0f32),
            ((-1.0f32, 1.0f32), (-400, -200), 0.0f32),
            ((-1.0f32, 1.0f32), (-400, 0), 0.0f32),
            ((-1.0f32, 1.0f32), (-400, 200), 0.0f32),
            ((-1.0f32, 1.0f32), (-400, 400), 0.0f32),
            ((-1.0f32, 1.0f32), (-400, 600), 0.0f32),
            ((-1.0f32, 1.0f32), (-400, 800), 0.0f32),
            ((-1.0f32, 1.0f32), (-400, 1000), 0.0f32),
            ((-1.0f32, 1.0f32), (-200, -1000), 0.0f32),
            ((-1.0f32, 1.0f32), (-200, -800), 0.0f32),
            ((-1.0f32, 1.0f32), (-200, -600), 0.0f32),
            ((-1.0f32, 1.0f32), (-200, -400), 0.0f32),
            ((-1.0f32, 1.0f32), (-200, -200), 0.0f32),
            ((-1.0f32, 1.0f32), (-200, 0), 0.0f32),
            ((-1.0f32, 1.0f32), (-200, 200), 0.0f32),
            ((-1.0f32, 1.0f32), (-200, 400), 0.0f32),
            ((-1.0f32, 1.0f32), (-200, 600), 0.0f32),
            ((-1.0f32, 1.0f32), (-200, 800), 0.0f32),
            ((-1.0f32, 1.0f32), (-200, 1000), 0.0f32),
            ((-1.0f32, 1.0f32), (0, -1000), 0.0f32),
            ((-1.0f32, 1.0f32), (0, -800), 0.0f32),
            ((-1.0f32, 1.0f32), (0, -600), 0.0f32),
            ((-1.0f32, 1.0f32), (0, -400), 0.0f32),
            ((-1.0f32, 1.0f32), (0, -200), 0.0f32),
            ((-1.0f32, 1.0f32), (0, 0), 0.0f32),
            ((-1.0f32, 1.0f32), (0, 200), 0.0f32),
            ((-1.0f32, 1.0f32), (0, 400), 0.0f32),
            ((-1.0f32, 1.0f32), (0, 600), 0.0f32),
            ((-1.0f32, 1.0f32), (0, 800), 0.0f32),
            ((-1.0f32, 1.0f32), (0, 1000), 0.0f32),
            ((-1.0f32, 1.0f32), (200, -1000), 0.0f32),
            ((-1.0f32, 1.0f32), (200, -800), 0.0f32),
            ((-1.0f32, 1.0f32), (200, -600), 0.0f32),
            ((-1.0f32, 1.0f32), (200, -400), 0.0f32),
            ((-1.0f32, 1.0f32), (200, -200), 0.0f32),
            ((-1.0f32, 1.0f32), (200, 0), 0.0f32),
            ((-1.0f32, 1.0f32), (200, 200), 0.0f32),
            ((-1.0f32, 1.0f32), (200, 400), 0.0f32),
            ((-1.0f32, 1.0f32), (200, 600), 0.0f32),
            ((-1.0f32, 1.0f32), (200, 800), 0.0f32),
            ((-1.0f32, 1.0f32), (200, 1000), 0.0f32),
            ((-1.0f32, 1.0f32), (400, -1000), 0.0f32),
            ((-1.0f32, 1.0f32), (400, -800), 0.0f32),
            ((-1.0f32, 1.0f32), (400, -600), 0.0f32),
            ((-1.0f32, 1.0f32), (400, -400), 0.0f32),
            ((-1.0f32, 1.0f32), (400, -200), 0.0f32),
            ((-1.0f32, 1.0f32), (400, 0), 0.0f32),
            ((-1.0f32, 1.0f32), (400, 200), 0.0f32),
            ((-1.0f32, 1.0f32), (400, 400), 0.012229209f32),
            ((-1.0f32, 1.0f32), (400, 600), 1.3459583E-5f32),
            ((-1.0f32, 1.0f32), (400, 800), 0.0f32),
            ((-1.0f32, 1.0f32), (400, 1000), 0.0f32),
            ((-1.0f32, 1.0f32), (600, -1000), 0.0f32),
            ((-1.0f32, 1.0f32), (600, -800), 0.0f32),
            ((-1.0f32, 1.0f32), (600, -600), 0.0f32),
            ((-1.0f32, 1.0f32), (600, -400), 0.0f32),
            ((-1.0f32, 1.0f32), (600, -200), 0.0f32),
            ((-1.0f32, 1.0f32), (600, 0), 0.0f32),
            ((-1.0f32, 1.0f32), (600, 200), 0.20826949f32),
            ((-1.0f32, 1.0f32), (600, 400), 0.0f32),
            ((-1.0f32, 1.0f32), (600, 600), 0.02679144f32),
            ((-1.0f32, 1.0f32), (600, 800), 0.0f32),
            ((-1.0f32, 1.0f32), (600, 1000), 0.0f32),
            ((-1.0f32, 1.0f32), (800, -1000), 0.0f32),
            ((-1.0f32, 1.0f32), (800, -800), 0.0f32),
            ((-1.0f32, 1.0f32), (800, -600), 0.0f32),
            ((-1.0f32, 1.0f32), (800, -400), 0.0f32),
            ((-1.0f32, 1.0f32), (800, -200), 0.0f32),
            ((-1.0f32, 1.0f32), (800, 0), 0.16502488f32),
            ((-1.0f32, 1.0f32), (800, 200), 0.0f32),
            ((-1.0f32, 1.0f32), (800, 400), 0.0f32),
            ((-1.0f32, 1.0f32), (800, 600), 0.0f32),
            ((-1.0f32, 1.0f32), (800, 800), 0.0f32),
            ((-1.0f32, 1.0f32), (800, 1000), 0.0f32),
            ((-1.0f32, 1.0f32), (1000, -1000), 0.0f32),
            ((-1.0f32, 1.0f32), (1000, -800), 0.0f32),
            ((-1.0f32, 1.0f32), (1000, -600), 0.0f32),
            ((-1.0f32, 1.0f32), (1000, -400), 0.0f32),
            ((-1.0f32, 1.0f32), (1000, -200), 0.0f32),
            ((-1.0f32, 1.0f32), (1000, 0), 0.0f32),
            ((-1.0f32, 1.0f32), (1000, 200), 0.0f32),
            ((-1.0f32, 1.0f32), (1000, 400), 0.0f32),
            ((-1.0f32, 1.0f32), (1000, 600), 0.0f32),
            ((-1.0f32, 1.0f32), (1000, 800), 0.0f32),
            ((-1.0f32, 1.0f32), (1000, 1000), 0.0f32),
            ((1.0f32, -1.0f32), (-1000, -1000), 0.0f32),
            ((1.0f32, -1.0f32), (-1000, -800), 0.0f32),
            ((1.0f32, -1.0f32), (-1000, -600), 0.0f32),
            ((1.0f32, -1.0f32), (-1000, -400), 0.0f32),
            ((1.0f32, -1.0f32), (-1000, -200), 0.0f32),
            ((1.0f32, -1.0f32), (-1000, 0), 0.0f32),
            ((1.0f32, -1.0f32), (-1000, 200), 0.0f32),
            ((1.0f32, -1.0f32), (-1000, 400), 0.0f32),
            ((1.0f32, -1.0f32), (-1000, 600), 0.0f32),
            ((1.0f32, -1.0f32), (-1000, 800), 0.0f32),
            ((1.0f32, -1.0f32), (-1000, 1000), 0.0f32),
            ((1.0f32, -1.0f32), (-800, -1000), 0.0f32),
            ((1.0f32, -1.0f32), (-800, -800), 0.0f32),
            ((1.0f32, -1.0f32), (-800, -600), 0.0f32),
            ((1.0f32, -1.0f32), (-800, -400), 0.0f32),
            ((1.0f32, -1.0f32), (-800, -200), 0.0f32),
            ((1.0f32, -1.0f32), (-800, 0), 0.0f32),
            ((1.0f32, -1.0f32), (-800, 200), 0.0f32),
            ((1.0f32, -1.0f32), (-800, 400), 0.0f32),
            ((1.0f32, -1.0f32), (-800, 600), 0.0f32),
            ((1.0f32, -1.0f32), (-800, 800), 0.0f32),
            ((1.0f32, -1.0f32), (-800, 1000), 0.0f32),
            ((1.0f32, -1.0f32), (-600, -1000), 0.0f32),
            ((1.0f32, -1.0f32), (-600, -800), 0.0f32),
            ((1.0f32, -1.0f32), (-600, -600), 0.0f32),
            ((1.0f32, -1.0f32), (-600, -400), 0.0f32),
            ((1.0f32, -1.0f32), (-600, -200), 0.0f32),
            ((1.0f32, -1.0f32), (-600, 0), 0.0f32),
            ((1.0f32, -1.0f32), (-600, 200), 0.0f32),
            ((1.0f32, -1.0f32), (-600, 400), 0.0f32),
            ((1.0f32, -1.0f32), (-600, 600), 0.0f32),
            ((1.0f32, -1.0f32), (-600, 800), 0.0f32),
            ((1.0f32, -1.0f32), (-600, 1000), 0.0f32),
            ((1.0f32, -1.0f32), (-400, -1000), 0.0f32),
            ((1.0f32, -1.0f32), (-400, -800), 0.0f32),
            ((1.0f32, -1.0f32), (-400, -600), 0.0f32),
            ((1.0f32, -1.0f32), (-400, -400), 0.0f32),
            ((1.0f32, -1.0f32), (-400, -200), 0.0f32),
            ((1.0f32, -1.0f32), (-400, 0), 0.0f32),
            ((1.0f32, -1.0f32), (-400, 200), 0.0f32),
            ((1.0f32, -1.0f32), (-400, 400), 0.0f32),
            ((1.0f32, -1.0f32), (-400, 600), 0.0f32),
            ((1.0f32, -1.0f32), (-400, 800), 0.0f32),
            ((1.0f32, -1.0f32), (-400, 1000), 0.0f32),
            ((1.0f32, -1.0f32), (-200, -1000), 0.0f32),
            ((1.0f32, -1.0f32), (-200, -800), 0.0f32),
            ((1.0f32, -1.0f32), (-200, -600), 0.0f32),
            ((1.0f32, -1.0f32), (-200, -400), 0.0f32),
            ((1.0f32, -1.0f32), (-200, -200), 0.0f32),
            ((1.0f32, -1.0f32), (-200, 0), 0.0f32),
            ((1.0f32, -1.0f32), (-200, 200), 0.0f32),
            ((1.0f32, -1.0f32), (-200, 400), 0.0f32),
            ((1.0f32, -1.0f32), (-200, 600), 0.0f32),
            ((1.0f32, -1.0f32), (-200, 800), 0.0f32),
            ((1.0f32, -1.0f32), (-200, 1000), 0.0f32),
            ((1.0f32, -1.0f32), (0, -1000), 0.0f32),
            ((1.0f32, -1.0f32), (0, -800), 0.0f32),
            ((1.0f32, -1.0f32), (0, -600), 0.0f32),
            ((1.0f32, -1.0f32), (0, -400), 0.0f32),
            ((1.0f32, -1.0f32), (0, -200), 0.0f32),
            ((1.0f32, -1.0f32), (0, 0), 0.0f32),
            ((1.0f32, -1.0f32), (0, 200), 0.0f32),
            ((1.0f32, -1.0f32), (0, 400), 0.0f32),
            ((1.0f32, -1.0f32), (0, 600), 0.0f32),
            ((1.0f32, -1.0f32), (0, 800), 0.0f32),
            ((1.0f32, -1.0f32), (0, 1000), 0.0f32),
            ((1.0f32, -1.0f32), (200, -1000), 0.0f32),
            ((1.0f32, -1.0f32), (200, -800), 0.0f32),
            ((1.0f32, -1.0f32), (200, -600), 0.0f32),
            ((1.0f32, -1.0f32), (200, -400), 0.0f32),
            ((1.0f32, -1.0f32), (200, -200), 0.0f32),
            ((1.0f32, -1.0f32), (200, 0), 0.0f32),
            ((1.0f32, -1.0f32), (200, 200), 0.0f32),
            ((1.0f32, -1.0f32), (200, 400), 0.0f32),
            ((1.0f32, -1.0f32), (200, 600), 0.0f32),
            ((1.0f32, -1.0f32), (200, 800), 0.0f32),
            ((1.0f32, -1.0f32), (200, 1000), 0.0038900226f32),
            ((1.0f32, -1.0f32), (400, -1000), 0.0f32),
            ((1.0f32, -1.0f32), (400, -800), 0.0f32),
            ((1.0f32, -1.0f32), (400, -600), 0.0f32),
            ((1.0f32, -1.0f32), (400, -400), 0.0f32),
            ((1.0f32, -1.0f32), (400, -200), 0.0f32),
            ((1.0f32, -1.0f32), (400, 0), 0.0f32),
            ((1.0f32, -1.0f32), (400, 200), 0.0f32),
            ((1.0f32, -1.0f32), (400, 400), 0.1930701f32),
            ((1.0f32, -1.0f32), (400, 600), 0.11269083f32),
            ((1.0f32, -1.0f32), (400, 800), 0.0f32),
            ((1.0f32, -1.0f32), (400, 1000), 0.0f32),
            ((1.0f32, -1.0f32), (600, -1000), 0.0f32),
            ((1.0f32, -1.0f32), (600, -800), 0.0f32),
            ((1.0f32, -1.0f32), (600, -600), 0.0f32),
            ((1.0f32, -1.0f32), (600, -400), 0.0f32),
            ((1.0f32, -1.0f32), (600, -200), 0.0f32),
            ((1.0f32, -1.0f32), (600, 0), 0.0f32),
            ((1.0f32, -1.0f32), (600, 200), 4.689248E-5f32),
            ((1.0f32, -1.0f32), (600, 400), 0.0f32),
            ((1.0f32, -1.0f32), (600, 600), 0.008269365f32),
            ((1.0f32, -1.0f32), (600, 800), 0.0f32),
            ((1.0f32, -1.0f32), (600, 1000), 0.0f32),
            ((1.0f32, -1.0f32), (800, -1000), 0.0f32),
            ((1.0f32, -1.0f32), (800, -800), 0.0f32),
            ((1.0f32, -1.0f32), (800, -600), 0.0f32),
            ((1.0f32, -1.0f32), (800, -400), 0.0f32),
            ((1.0f32, -1.0f32), (800, -200), 0.0f32),
            ((1.0f32, -1.0f32), (800, 0), 0.34966952f32),
            ((1.0f32, -1.0f32), (800, 200), 0.0f32),
            ((1.0f32, -1.0f32), (800, 400), 0.0f32),
            ((1.0f32, -1.0f32), (800, 600), 0.0f32),
            ((1.0f32, -1.0f32), (800, 800), 0.0f32),
            ((1.0f32, -1.0f32), (800, 1000), 0.0f32),
            ((1.0f32, -1.0f32), (1000, -1000), 0.0f32),
            ((1.0f32, -1.0f32), (1000, -800), 0.0f32),
            ((1.0f32, -1.0f32), (1000, -600), 0.0f32),
            ((1.0f32, -1.0f32), (1000, -400), 0.0f32),
            ((1.0f32, -1.0f32), (1000, -200), 0.0f32),
            ((1.0f32, -1.0f32), (1000, 0), 0.0f32),
            ((1.0f32, -1.0f32), (1000, 200), 0.0f32),
            ((1.0f32, -1.0f32), (1000, 400), 0.0f32),
            ((1.0f32, -1.0f32), (1000, 600), 0.0f32),
            ((1.0f32, -1.0f32), (1000, 800), 0.18537328f32),
            ((1.0f32, -1.0f32), (1000, 1000), 0.0f32),
            ((1.0f32, 1.0f32), (-1000, -1000), 0.0f32),
            ((1.0f32, 1.0f32), (-1000, -800), 0.0f32),
            ((1.0f32, 1.0f32), (-1000, -600), 0.0f32),
            ((1.0f32, 1.0f32), (-1000, -400), 0.0f32),
            ((1.0f32, 1.0f32), (-1000, -200), 0.0f32),
            ((1.0f32, 1.0f32), (-1000, 0), 0.0f32),
            ((1.0f32, 1.0f32), (-1000, 200), 0.0f32),
            ((1.0f32, 1.0f32), (-1000, 400), 0.0f32),
            ((1.0f32, 1.0f32), (-1000, 600), 0.0f32),
            ((1.0f32, 1.0f32), (-1000, 800), 0.0f32),
            ((1.0f32, 1.0f32), (-1000, 1000), 0.0f32),
            ((1.0f32, 1.0f32), (-800, -1000), 0.0f32),
            ((1.0f32, 1.0f32), (-800, -800), 0.0f32),
            ((1.0f32, 1.0f32), (-800, -600), 0.0f32),
            ((1.0f32, 1.0f32), (-800, -400), 0.0f32),
            ((1.0f32, 1.0f32), (-800, -200), 0.0f32),
            ((1.0f32, 1.0f32), (-800, 0), 0.0f32),
            ((1.0f32, 1.0f32), (-800, 200), 0.0f32),
            ((1.0f32, 1.0f32), (-800, 400), 0.0f32),
            ((1.0f32, 1.0f32), (-800, 600), 0.0f32),
            ((1.0f32, 1.0f32), (-800, 800), 0.0f32),
            ((1.0f32, 1.0f32), (-800, 1000), 0.0f32),
            ((1.0f32, 1.0f32), (-600, -1000), 0.0f32),
            ((1.0f32, 1.0f32), (-600, -800), 0.0f32),
            ((1.0f32, 1.0f32), (-600, -600), 0.0f32),
            ((1.0f32, 1.0f32), (-600, -400), 0.0f32),
            ((1.0f32, 1.0f32), (-600, -200), 0.0f32),
            ((1.0f32, 1.0f32), (-600, 0), 0.0f32),
            ((1.0f32, 1.0f32), (-600, 200), 0.0f32),
            ((1.0f32, 1.0f32), (-600, 400), 0.0f32),
            ((1.0f32, 1.0f32), (-600, 600), 0.0f32),
            ((1.0f32, 1.0f32), (-600, 800), 0.0f32),
            ((1.0f32, 1.0f32), (-600, 1000), 0.0f32),
            ((1.0f32, 1.0f32), (-400, -1000), 0.0f32),
            ((1.0f32, 1.0f32), (-400, -800), 0.0f32),
            ((1.0f32, 1.0f32), (-400, -600), 0.0f32),
            ((1.0f32, 1.0f32), (-400, -400), 0.0f32),
            ((1.0f32, 1.0f32), (-400, -200), 0.0f32),
            ((1.0f32, 1.0f32), (-400, 0), 0.0f32),
            ((1.0f32, 1.0f32), (-400, 200), 0.0f32),
            ((1.0f32, 1.0f32), (-400, 400), 0.0f32),
            ((1.0f32, 1.0f32), (-400, 600), 0.0f32),
            ((1.0f32, 1.0f32), (-400, 800), 0.0f32),
            ((1.0f32, 1.0f32), (-400, 1000), 0.0f32),
            ((1.0f32, 1.0f32), (-200, -1000), 0.0f32),
            ((1.0f32, 1.0f32), (-200, -800), 0.0f32),
            ((1.0f32, 1.0f32), (-200, -600), 0.0f32),
            ((1.0f32, 1.0f32), (-200, -400), 0.0f32),
            ((1.0f32, 1.0f32), (-200, -200), 0.0f32),
            ((1.0f32, 1.0f32), (-200, 0), 0.0f32),
            ((1.0f32, 1.0f32), (-200, 200), 0.0f32),
            ((1.0f32, 1.0f32), (-200, 400), 0.0f32),
            ((1.0f32, 1.0f32), (-200, 600), 0.0f32),
            ((1.0f32, 1.0f32), (-200, 800), 0.0f32),
            ((1.0f32, 1.0f32), (-200, 1000), 0.0f32),
            ((1.0f32, 1.0f32), (0, -1000), 0.0f32),
            ((1.0f32, 1.0f32), (0, -800), 0.0f32),
            ((1.0f32, 1.0f32), (0, -600), 0.0f32),
            ((1.0f32, 1.0f32), (0, -400), 0.0f32),
            ((1.0f32, 1.0f32), (0, -200), 0.0f32),
            ((1.0f32, 1.0f32), (0, 0), 0.0f32),
            ((1.0f32, 1.0f32), (0, 200), 0.0f32),
            ((1.0f32, 1.0f32), (0, 400), 0.0f32),
            ((1.0f32, 1.0f32), (0, 600), 0.0f32),
            ((1.0f32, 1.0f32), (0, 800), 0.0f32),
            ((1.0f32, 1.0f32), (0, 1000), 0.0f32),
            ((1.0f32, 1.0f32), (200, -1000), 0.0f32),
            ((1.0f32, 1.0f32), (200, -800), 0.0f32),
            ((1.0f32, 1.0f32), (200, -600), 0.0f32),
            ((1.0f32, 1.0f32), (200, -400), 0.0f32),
            ((1.0f32, 1.0f32), (200, -200), 0.0f32),
            ((1.0f32, 1.0f32), (200, 0), 0.0f32),
            ((1.0f32, 1.0f32), (200, 200), 0.0f32),
            ((1.0f32, 1.0f32), (200, 400), 0.0f32),
            ((1.0f32, 1.0f32), (200, 600), 0.0f32),
            ((1.0f32, 1.0f32), (200, 800), 0.0f32),
            ((1.0f32, 1.0f32), (200, 1000), 0.0038900226f32),
            ((1.0f32, 1.0f32), (400, -1000), 0.0f32),
            ((1.0f32, 1.0f32), (400, -800), 0.0f32),
            ((1.0f32, 1.0f32), (400, -600), 0.0f32),
            ((1.0f32, 1.0f32), (400, -400), 0.0f32),
            ((1.0f32, 1.0f32), (400, -200), 0.0f32),
            ((1.0f32, 1.0f32), (400, 0), 0.0f32),
            ((1.0f32, 1.0f32), (400, 200), 0.0f32),
            ((1.0f32, 1.0f32), (400, 400), 0.20529935f32),
            ((1.0f32, 1.0f32), (400, 600), 0.11270429f32),
            ((1.0f32, 1.0f32), (400, 800), 0.0f32),
            ((1.0f32, 1.0f32), (400, 1000), 0.0f32),
            ((1.0f32, 1.0f32), (600, -1000), 0.0f32),
            ((1.0f32, 1.0f32), (600, -800), 0.0f32),
            ((1.0f32, 1.0f32), (600, -600), 0.0f32),
            ((1.0f32, 1.0f32), (600, -400), 0.0f32),
            ((1.0f32, 1.0f32), (600, -200), 0.0f32),
            ((1.0f32, 1.0f32), (600, 0), 0.0f32),
            ((1.0f32, 1.0f32), (600, 200), 0.20831639f32),
            ((1.0f32, 1.0f32), (600, 400), 0.0f32),
            ((1.0f32, 1.0f32), (600, 600), 0.035060797f32),
            ((1.0f32, 1.0f32), (600, 800), 0.0f32),
            ((1.0f32, 1.0f32), (600, 1000), 0.0f32),
            ((1.0f32, 1.0f32), (800, -1000), 0.0f32),
            ((1.0f32, 1.0f32), (800, -800), 0.0f32),
            ((1.0f32, 1.0f32), (800, -600), 0.0f32),
            ((1.0f32, 1.0f32), (800, -400), 0.0f32),
            ((1.0f32, 1.0f32), (800, -200), 0.0f32),
            ((1.0f32, 1.0f32), (800, 0), 0.5146944f32),
            ((1.0f32, 1.0f32), (800, 200), 0.0f32),
            ((1.0f32, 1.0f32), (800, 400), 0.0f32),
            ((1.0f32, 1.0f32), (800, 600), 0.0f32),
            ((1.0f32, 1.0f32), (800, 800), 0.0f32),
            ((1.0f32, 1.0f32), (800, 1000), 0.0f32),
            ((1.0f32, 1.0f32), (1000, -1000), 0.0f32),
            ((1.0f32, 1.0f32), (1000, -800), 0.0f32),
            ((1.0f32, 1.0f32), (1000, -600), 0.0f32),
            ((1.0f32, 1.0f32), (1000, -400), 0.0f32),
            ((1.0f32, 1.0f32), (1000, -200), 0.0f32),
            ((1.0f32, 1.0f32), (1000, 0), 0.0f32),
            ((1.0f32, 1.0f32), (1000, 200), 0.0f32),
            ((1.0f32, 1.0f32), (1000, 400), 0.0f32),
            ((1.0f32, 1.0f32), (1000, 600), 0.0f32),
            ((1.0f32, 1.0f32), (1000, 800), 0.18537328f32),
            ((1.0f32, 1.0f32), (1000, 1000), 0.0f32),
        ];

        for ((i, j), (x, z), result) in results {
            let spline = create_eroded_ridges_spline(
                EROSION_OVERWORLD
                    .clone()
                    .convert(&mut converter)
                    .assert_shared(),
                RIDGES_OVERWORLD
                    .clone()
                    .convert(&mut converter)
                    .assert_shared(),
                RIDGES_FOLDED_OVERWORLD
                    .clone()
                    .convert(&mut converter)
                    .assert_shared(),
                i,
                j,
                j,
                i,
                FloatAmplifier::Identity,
            );

            let pos = &NoisePos::Unblended(UnblendedNoisePos::new(x, 60, z));
            assert_eq!(spline.sample(pos), result);
        }
    }

    #[test]
    fn test_create_continental_offset_spline() {
        let mut rand = LegacyRand::from_seed(0);
        let deriver = rand.next_splitter();
        let mut converter = TestConverter {
            splitter: RandomDeriver::Legacy(deriver),
        };

        let results = [
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1351529f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1351529f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1351529f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1351529f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -0.9794922f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -0.9794922f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1146451f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1146451f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -0.9794922f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -0.9794922f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1146451f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1146451f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1146451f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1146451f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                0.9794922f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                0.9794922f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1146451f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1146451f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                0.9794922f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                0.9794922f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1351529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1351529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1351529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1351529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1351529f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1351529f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1351529f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1351529f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -0.9794922f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -0.9794922f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1146451f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1146451f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -0.9794922f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -0.9794922f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1146451f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1146451f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1146451f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1146451f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                0.9794922f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                0.9794922f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1146451f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1146451f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                0.9794922f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                0.9794922f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1351529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1351529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1351529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1351529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
        ];

        for ((i, j, k, l, m, n), (x, z), result) in results {
            let spline = create_continental_offset_spline(
                EROSION_OVERWORLD
                    .clone()
                    .convert(&mut converter)
                    .assert_shared(),
                RIDGES_OVERWORLD
                    .clone()
                    .convert(&mut converter)
                    .assert_shared(),
                i,
                j,
                k,
                l,
                m,
                n,
                true,
                true,
                FloatAmplifier::Identity,
            );

            let pos = &NoisePos::Unblended(UnblendedNoisePos::new(x, 60, z));
            assert_eq!(spline.sample(pos), result);
        }

        let results = [
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -0.9767942f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -1.0040534f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.58472735f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1310996f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1351529f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -0.9767942f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -1.0040534f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.58472735f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1310996f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1351529f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -0.9794922f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -0.9767942f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -0.98354554f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.58472735f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1105918f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1146451f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -0.9794922f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -0.9767942f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -0.98354554f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.58472735f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1105918f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1146451f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1146451f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.58472735f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1105918f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                0.9767942f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                0.98354554f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                0.9794922f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1146451f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.58472735f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1105918f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                0.9767942f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                0.98354554f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                0.9794922f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1351529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.58472735f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1310996f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                0.9767942f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                1.0040534f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1351529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.58472735f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1310996f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                0.9767942f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                1.0040534f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -0.9767942f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -1.0040534f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.58472735f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1310996f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1351529f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -0.9767942f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -1.0040534f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.58472735f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1310996f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1351529f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -0.9794922f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -0.9767942f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -0.98354554f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.58472735f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1105918f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1146451f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -0.9794922f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -0.9767942f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -0.98354554f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.58472735f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1105918f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1146451f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1146451f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.58472735f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1105918f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                0.9767942f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                0.98354554f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                0.9794922f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1146451f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.58472735f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1105918f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                0.9767942f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                0.98354554f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                0.9794922f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1351529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.58472735f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1310996f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                0.9767942f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                1.0040534f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.043868598f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199959f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1351529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.58472735f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1310996f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                0.9767942f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                1.0040534f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.47096622f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
        ];

        for ((i, j, k, l, m, n), (x, z), result) in results {
            let spline = create_continental_offset_spline(
                EROSION_OVERWORLD
                    .clone()
                    .convert(&mut converter)
                    .assert_shared(),
                RIDGES_OVERWORLD
                    .clone()
                    .convert(&mut converter)
                    .assert_shared(),
                i,
                j,
                k,
                l,
                m,
                n,
                false,
                true,
                FloatAmplifier::Identity,
            );

            let pos = &NoisePos::Unblended(UnblendedNoisePos::new(x, 60, z));
            assert_eq!(spline.sample(pos), result);
        }

        let results = [
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1351529f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1351529f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1351529f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1351529f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -0.9794922f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -0.9794922f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1146451f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1146451f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -0.9794922f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -0.9794922f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1146451f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1146451f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1146451f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1146451f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                0.9794922f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                0.9794922f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1146451f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1146451f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                0.9794922f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                0.9794922f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1351529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1351529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1351529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1351529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1351529f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1351529f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1351529f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1351529f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -0.9794922f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -0.9794922f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1146451f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1146451f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -0.9794922f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -0.9794922f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1146451f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1146451f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1146451f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1146451f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                0.9794922f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                0.9794922f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1146451f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1146451f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                0.9794922f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                0.9794922f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1351529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1351529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1351529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1351529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
        ];

        for ((i, j, k, l, m, n), (x, z), result) in results {
            let spline = create_continental_offset_spline(
                EROSION_OVERWORLD
                    .clone()
                    .convert(&mut converter)
                    .assert_shared(),
                RIDGES_OVERWORLD
                    .clone()
                    .convert(&mut converter)
                    .assert_shared(),
                i,
                j,
                k,
                l,
                m,
                n,
                true,
                false,
                FloatAmplifier::Identity,
            );

            let pos = &NoisePos::Unblended(UnblendedNoisePos::new(x, 60, z));
            assert_eq!(spline.sample(pos), result);
        }

        let results = [
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -0.9767942f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -1.0040534f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.58472735f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1310996f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1351529f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -0.9767942f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -1.0040534f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.58472735f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1310996f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1351529f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -0.9794922f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -0.9767942f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -0.98354554f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.58472735f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1105918f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1146451f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -0.9794922f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -0.9767942f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -0.98354554f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.58472735f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1105918f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1146451f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1146451f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.58472735f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1105918f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                0.9767942f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                0.98354554f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                0.9794922f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1146451f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.58472735f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1105918f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                0.9767942f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                0.98354554f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                0.9794922f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1351529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.58472735f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1310996f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                0.9767942f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                1.0040534f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1351529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.58472735f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1310996f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                0.9767942f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                1.0040534f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                1.0f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (-1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -0.9767942f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -1.0040534f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.58472735f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1310996f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1351529f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -0.9767942f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -1.0040534f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.58472735f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1310996f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1351529f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -0.9794922f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -0.9767942f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.6898031f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -0.98354554f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.58472735f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1105918f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.51958543f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.78766453f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1146451f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.42596012f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.8736998f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                -0.9794922f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.35584128f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                -0.9767942f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -1.0f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                -0.98354554f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.5485881f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.93069726f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                -0.58472735f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                -1.1105918f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.465841f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                -0.56152153f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.83679414f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                -1.1146451f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.122376435f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.87450993f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1146451f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.58472735f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1105918f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                0.9767942f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                0.98354554f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                0.9794922f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1146451f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.58472735f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1105918f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                0.9767942f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                0.98354554f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                0.9794922f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1351529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                -0.4380532f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.58472735f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.853009f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1310996f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.17856482f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                -0.9207117f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                0.9767942f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                1.0040534f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                -0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                0.6898031f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                -0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                -0.08574474f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                -0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                -0.05308062f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                -0.17199956f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 0),
                0.56152153f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, -1000),
                1.1351529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, -1000),
                0.38430876f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 0),
                0.58472735f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (-1000, 1000),
                -0.9021386f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, -1000),
                1.1310996f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 0),
                -0.12501879f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, -1000),
                0.91990167f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 0),
                0.9767942f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, -1000),
                1.0040534f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, -1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, -1000),
                0.5480529f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 0),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (-1000, 1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, -1000),
                1.0f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 0),
                0.8495294f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (0, 1000),
                0.59859234f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, -1000),
                0.97689915f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 0),
                0.4723193f32,
            ),
            (
                (1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32, 1.0f32),
                (1000, 1000),
                0.65087116f32,
            ),
        ];

        for ((i, j, k, l, m, n), (x, z), result) in results {
            let spline = create_continental_offset_spline(
                EROSION_OVERWORLD
                    .clone()
                    .convert(&mut converter)
                    .assert_shared(),
                RIDGES_OVERWORLD
                    .clone()
                    .convert(&mut converter)
                    .assert_shared(),
                i,
                j,
                k,
                l,
                m,
                n,
                false,
                false,
                FloatAmplifier::Identity,
            );

            let pos = &NoisePos::Unblended(UnblendedNoisePos::new(x, 60, z));
            assert_eq!(spline.sample(pos), result);
        }
    }

    #[test]
    fn test_create_offset_spline_owned() {
        let mut rand = LegacyRand::from_seed(0);
        let deriver = rand.next_splitter();
        let mut converter = OwnedConverter {
            splitter: RandomDeriver::Legacy(deriver),
        };

        let spline = create_offset_spline(
            CONTINENTS_OVERWORLD.clone(),
            EROSION_OVERWORLD.clone(),
            RIDGES_FOLDED_OVERWORLD.clone(),
            false,
        );

        let func_ref: SharedComponentReference =
            SplineFunction::<NoEnvironment, ImmutableSplineRef>::new(spline.into()).into();
        let mut converted = func_ref.convert_to_dyn(&mut converter);

        let values = [
            ((-1000, -1000), -0.12f32),
            ((-1000, -800), -0.12f32),
            ((-1000, -600), 0.21642008f32),
            ((-1000, -400), 0.01f32),
            ((-1000, -200), 0.004557855f32),
            ((-1000, 0), 0.01f32),
            ((-1000, 200), 0.009997683f32),
            ((-1000, 400), 0.026355354f32),
            ((-1000, 600), 0.007802739f32),
            ((-1000, 800), -0.12f32),
            ((-1000, 1000), -0.001604938f32),
            ((-800, -1000), -0.12f32),
            ((-800, -800), -0.012429481f32),
            ((-800, -600), 0.0015399398f32),
            ((-800, -400), 0.010565798f32),
            ((-800, -200), 0.0085737575f32),
            ((-800, 0), 2.0498858E-4f32),
            ((-800, 200), 0.059694663f32),
            ((-800, 400), 0.005873039f32),
            ((-800, 600), -0.0037780532f32),
            ((-800, 800), 0.1453951f32),
            ((-800, 1000), -0.12f32),
            ((-600, -1000), 0.06484584f32),
            ((-600, -800), 0.0044598696f32),
            ((-600, -600), 0.010014304f32),
            ((-600, -400), -0.044046972f32),
            ((-600, -200), 0.003978624f32),
            ((-600, 0), -0.0364713f32),
            ((-600, 200), 0.14794901f32),
            ((-600, 400), 0.018754544f32),
            ((-600, 600), 0.045433506f32),
            ((-600, 800), 0.0047304784f32),
            ((-600, 1000), -0.08921682f32),
            ((-400, -1000), 0.35670424f32),
            ((-400, -800), 0.010680163f32),
            ((-400, -600), 0.024394374f32),
            ((-400, -400), -0.07180046f32),
            ((-400, -200), -0.0046629338f32),
            ((-400, 0), 0.041712783f32),
            ((-400, 200), 0.42516303f32),
            ((-400, 400), -0.016010465f32),
            ((-400, 600), -0.054500334f32),
            ((-400, 800), 0.03915234f32),
            ((-400, 1000), 0.11074094f32),
            ((-200, -1000), 0.010157828f32),
            ((-200, -800), -0.045935497f32),
            ((-200, -600), -0.06370152f32),
            ((-200, -400), -0.010669484f32),
            ((-200, -200), 0.007693166f32),
            ((-200, 0), 0.2740575f32),
            ((-200, 200), 0.25065988f32),
            ((-200, 400), 0.23743957f32),
            ((-200, 600), 0.038222533f32),
            ((-200, 800), 0.23740187f32),
            ((-200, 1000), 0.045121815f32),
            ((0, -1000), 0.025613945f32),
            ((0, -800), 0.010543518f32),
            ((0, -600), -0.009503379f32),
            ((0, -400), -0.05679583f32),
            ((0, -200), 0.014229352f32),
            ((0, 0), 0.015351922f32),
            ((0, 200), 0.052398924f32),
            ((0, 400), 0.3348988f32),
            ((0, 600), 0.037273783f32),
            ((0, 800), 0.15397507f32),
            ((0, 1000), -0.12f32),
            ((200, -1000), 0.011213763f32),
            ((200, -800), 0.010004221f32),
            ((200, -600), 0.014950525f32),
            ((200, -400), 0.0060791634f32),
            ((200, -200), 0.0051073986f32),
            ((200, 0), 0.21087551f32),
            ((200, 200), 0.18799084f32),
            ((200, 400), 0.10954257f32),
            ((200, 600), 0.15038633f32),
            ((200, 800), -0.20215355f32),
            ((200, 1000), 0.006606252f32),
            ((400, -1000), -0.060982484f32),
            ((400, -800), -0.036393903f32),
            ((400, -600), 0.0014582938f32),
            ((400, -400), -0.04869196f32),
            ((400, -200), 0.30029622f32),
            ((400, 0), 0.20263676f32),
            ((400, 200), 0.22583991f32),
            ((400, 400), 0.5766444f32),
            ((400, 600), 0.064524874f32),
            ((400, 800), 0.001492043f32),
            ((400, 1000), 0.0666899f32),
            ((600, -1000), 0.042593893f32),
            ((600, -800), 0.011076624f32),
            ((600, -600), -0.07617872f32),
            ((600, -400), 0.33489174f32),
            ((600, -200), 0.19499643f32),
            ((600, 0), 0.12718138f32),
            ((600, 200), 0.42322046f32),
            ((600, 400), 0.15204243f32),
            ((600, 600), 0.62875843f32),
            ((600, 800), 0.28533196f32),
            ((600, 1000), 0.112939574f32),
            ((800, -1000), -0.005106967f32),
            ((800, -800), 0.004147144f32),
            ((800, -600), 0.033886474f32),
            ((800, -400), 0.3707387f32),
            ((800, -200), 0.23363632f32),
            ((800, 0), 0.6662116f32),
            ((800, 200), 0.1378678f32),
            ((800, 400), -0.040576354f32),
            ((800, 600), 0.117314756f32),
            ((800, 800), 0.08826091f32),
            ((800, 1000), 0.16682401f32),
            ((1000, -1000), -0.09812155f32),
            ((1000, -800), 0.12626381f32),
            ((1000, -600), 0.13974974f32),
            ((1000, -400), 0.19341275f32),
            ((1000, -200), 0.26667717f32),
            ((1000, 0), 0.2554746f32),
            ((1000, 200), 0.19757578f32),
            ((1000, 400), 0.18204813f32),
            ((1000, 600), -0.12f32),
            ((1000, 800), 0.09942525f32),
            ((1000, 1000), -0.20376506f32),
        ];

        for ((x, z), value) in values {
            let pos = &NoisePos::Unblended(UnblendedNoisePos::new(x, 60, z));
            assert_eq!(converted.sample_mut(pos, &FakeEnvironment {}), value as f64);
        }
    }

    #[test]
    fn test_create_offset_spline() {
        let mut rand = LegacyRand::from_seed(0);
        let deriver = rand.next_splitter();
        let mut converter = TestConverter {
            splitter: RandomDeriver::Legacy(deriver),
        };

        let spline = create_offset_spline(
            CONTINENTS_OVERWORLD
                .clone()
                .convert(&mut converter)
                .assert_shared(),
            EROSION_OVERWORLD
                .clone()
                .convert(&mut converter)
                .assert_shared(),
            RIDGES_FOLDED_OVERWORLD
                .clone()
                .convert(&mut converter)
                .assert_shared(),
            false,
        );

        let values = [
            ((-1000, -1000), -0.12f32),
            ((-1000, -800), -0.12f32),
            ((-1000, -600), 0.21642008f32),
            ((-1000, -400), 0.01f32),
            ((-1000, -200), 0.004557855f32),
            ((-1000, 0), 0.01f32),
            ((-1000, 200), 0.009997683f32),
            ((-1000, 400), 0.026355354f32),
            ((-1000, 600), 0.007802739f32),
            ((-1000, 800), -0.12f32),
            ((-1000, 1000), -0.001604938f32),
            ((-800, -1000), -0.12f32),
            ((-800, -800), -0.012429481f32),
            ((-800, -600), 0.0015399398f32),
            ((-800, -400), 0.010565798f32),
            ((-800, -200), 0.0085737575f32),
            ((-800, 0), 2.0498858E-4f32),
            ((-800, 200), 0.059694663f32),
            ((-800, 400), 0.005873039f32),
            ((-800, 600), -0.0037780532f32),
            ((-800, 800), 0.1453951f32),
            ((-800, 1000), -0.12f32),
            ((-600, -1000), 0.06484584f32),
            ((-600, -800), 0.0044598696f32),
            ((-600, -600), 0.010014304f32),
            ((-600, -400), -0.044046972f32),
            ((-600, -200), 0.003978624f32),
            ((-600, 0), -0.0364713f32),
            ((-600, 200), 0.14794901f32),
            ((-600, 400), 0.018754544f32),
            ((-600, 600), 0.045433506f32),
            ((-600, 800), 0.0047304784f32),
            ((-600, 1000), -0.08921682f32),
            ((-400, -1000), 0.35670424f32),
            ((-400, -800), 0.010680163f32),
            ((-400, -600), 0.024394374f32),
            ((-400, -400), -0.07180046f32),
            ((-400, -200), -0.0046629338f32),
            ((-400, 0), 0.041712783f32),
            ((-400, 200), 0.42516303f32),
            ((-400, 400), -0.016010465f32),
            ((-400, 600), -0.054500334f32),
            ((-400, 800), 0.03915234f32),
            ((-400, 1000), 0.11074094f32),
            ((-200, -1000), 0.010157828f32),
            ((-200, -800), -0.045935497f32),
            ((-200, -600), -0.06370152f32),
            ((-200, -400), -0.010669484f32),
            ((-200, -200), 0.007693166f32),
            ((-200, 0), 0.2740575f32),
            ((-200, 200), 0.25065988f32),
            ((-200, 400), 0.23743957f32),
            ((-200, 600), 0.038222533f32),
            ((-200, 800), 0.23740187f32),
            ((-200, 1000), 0.045121815f32),
            ((0, -1000), 0.025613945f32),
            ((0, -800), 0.010543518f32),
            ((0, -600), -0.009503379f32),
            ((0, -400), -0.05679583f32),
            ((0, -200), 0.014229352f32),
            ((0, 0), 0.015351922f32),
            ((0, 200), 0.052398924f32),
            ((0, 400), 0.3348988f32),
            ((0, 600), 0.037273783f32),
            ((0, 800), 0.15397507f32),
            ((0, 1000), -0.12f32),
            ((200, -1000), 0.011213763f32),
            ((200, -800), 0.010004221f32),
            ((200, -600), 0.014950525f32),
            ((200, -400), 0.0060791634f32),
            ((200, -200), 0.0051073986f32),
            ((200, 0), 0.21087551f32),
            ((200, 200), 0.18799084f32),
            ((200, 400), 0.10954257f32),
            ((200, 600), 0.15038633f32),
            ((200, 800), -0.20215355f32),
            ((200, 1000), 0.006606252f32),
            ((400, -1000), -0.060982484f32),
            ((400, -800), -0.036393903f32),
            ((400, -600), 0.0014582938f32),
            ((400, -400), -0.04869196f32),
            ((400, -200), 0.30029622f32),
            ((400, 0), 0.20263676f32),
            ((400, 200), 0.22583991f32),
            ((400, 400), 0.5766444f32),
            ((400, 600), 0.064524874f32),
            ((400, 800), 0.001492043f32),
            ((400, 1000), 0.0666899f32),
            ((600, -1000), 0.042593893f32),
            ((600, -800), 0.011076624f32),
            ((600, -600), -0.07617872f32),
            ((600, -400), 0.33489174f32),
            ((600, -200), 0.19499643f32),
            ((600, 0), 0.12718138f32),
            ((600, 200), 0.42322046f32),
            ((600, 400), 0.15204243f32),
            ((600, 600), 0.62875843f32),
            ((600, 800), 0.28533196f32),
            ((600, 1000), 0.112939574f32),
            ((800, -1000), -0.005106967f32),
            ((800, -800), 0.004147144f32),
            ((800, -600), 0.033886474f32),
            ((800, -400), 0.3707387f32),
            ((800, -200), 0.23363632f32),
            ((800, 0), 0.6662116f32),
            ((800, 200), 0.1378678f32),
            ((800, 400), -0.040576354f32),
            ((800, 600), 0.117314756f32),
            ((800, 800), 0.08826091f32),
            ((800, 1000), 0.16682401f32),
            ((1000, -1000), -0.09812155f32),
            ((1000, -800), 0.12626381f32),
            ((1000, -600), 0.13974974f32),
            ((1000, -400), 0.19341275f32),
            ((1000, -200), 0.26667717f32),
            ((1000, 0), 0.2554746f32),
            ((1000, 200), 0.19757578f32),
            ((1000, 400), 0.18204813f32),
            ((1000, 600), -0.12f32),
            ((1000, 800), 0.09942525f32),
            ((1000, 1000), -0.20376506f32),
        ];

        for ((x, z), value) in values {
            let pos = &NoisePos::Unblended(UnblendedNoisePos::new(x, 60, z));
            assert_eq!(spline.sample(pos), value);
        }

        let spline = create_offset_spline(
            CONTINENTS_OVERWORLD
                .clone()
                .convert(&mut converter)
                .assert_shared(),
            EROSION_OVERWORLD
                .clone()
                .convert(&mut converter)
                .assert_shared(),
            RIDGES_FOLDED_OVERWORLD
                .clone()
                .convert(&mut converter)
                .assert_shared(),
            true,
        );

        let values = [
            ((-1000, -1000), -0.12f32),
            ((-1000, -800), -0.12f32),
            ((-1000, -600), 0.40646723f32),
            ((-1000, -400), 0.02f32),
            ((-1000, -200), 0.011649819f32),
            ((-1000, 0), 0.02f32),
            ((-1000, 200), 0.019997103f32),
            ((-1000, 400), 0.054926828f32),
            ((-1000, 600), 0.0161799f32),
            ((-1000, 800), -0.12f32),
            ((-1000, 1000), -0.001604938f32),
            ((-800, -1000), -0.12f32),
            ((-800, -800), -0.009731578f32),
            ((-800, -600), 0.008272511f32),
            ((-800, -400), 0.02010726f32),
            ((-800, -200), 0.017626597f32),
            ((-800, 0), 0.0039240704f32),
            ((-800, 200), 0.12954348f32),
            ((-800, 400), 0.013576008f32),
            ((-800, 600), 5.68838E-4f32),
            ((-800, 800), 0.31590718f32),
            ((-800, 1000), -0.12f32),
            ((-600, -1000), 0.12946187f32),
            ((-600, -800), 0.0120871635f32),
            ((-600, -600), 0.019976187f32),
            ((-600, -400), -0.043153357f32),
            ((-600, -200), 0.01147486f32),
            ((-600, 0), -0.03608053f32),
            ((-600, 200), 0.32358822f32),
            ((-600, 400), 0.038205504f32),
            ((-600, 600), 0.09575883f32),
            ((-600, 800), 0.0087937f32),
            ((-600, 1000), -0.08919823f32),
            ((-400, -1000), 0.68852895f32),
            ((-400, -800), 0.02136095f32),
            ((-400, -600), 0.05210319f32),
            ((-400, -400), -0.07174147f32),
            ((-400, -200), -1.782187E-4f32),
            ((-400, 0), 0.08275533f32),
            ((-400, 200), 0.8391089f32),
            ((-400, 400), 0.015925307f32),
            ((-400, 600), -0.05179032f32),
            ((-400, 800), 0.080548115f32),
            ((-400, 1000), 0.2183966f32),
            ((-200, -1000), 0.019721974f32),
            ((-200, -800), -0.044857025f32),
            ((-200, -600), -0.0632717f32),
            ((-200, -400), -0.0071803415f32),
            ((-200, -200), 0.016522845f32),
            ((-200, 0), 0.5790978f32),
            ((-200, 200), 0.48663375f32),
            ((-200, 400), 0.4579222f32),
            ((-200, 600), 0.07735475f32),
            ((-200, 800), 0.46947122f32),
            ((-200, 1000), 0.09024363f32),
            ((0, -1000), 0.05332743f32),
            ((0, -800), 0.021054735f32),
            ((0, -600), -0.0060041896f32),
            ((0, -400), -0.056453f32),
            ((0, -200), 0.028670382f32),
            ((0, 0), 0.031875737f32),
            ((0, 200), 0.1057405f32),
            ((0, 400), 0.6566899f32),
            ((0, 600), 0.078629725f32),
            ((0, 800), 0.30936983f32),
            ((0, 1000), -0.12f32),
            ((200, -1000), 0.01984784f32),
            ((200, -800), 0.020003142f32),
            ((200, -600), 0.030099068f32),
            ((200, -400), 0.014725439f32),
            ((200, -200), 0.04267062f32),
            ((200, 0), 0.4335333f32),
            ((200, 200), 0.41353047f32),
            ((200, 400), 0.28182158f32),
            ((200, 600), 0.3194872f32),
            ((200, 800), -0.19964206f32),
            ((200, 1000), 0.013215651f32),
            ((400, -1000), -0.06075418f32),
            ((400, -800), -0.035268508f32),
            ((400, -600), 0.008122481f32),
            ((400, -400), -0.04745455f32),
            ((400, -200), 0.6001307f32),
            ((400, 0), 0.44305244f32),
            ((400, 200), 0.4961017f32),
            ((400, 400), 1.1597066f32),
            ((400, 600), 0.13732544f32),
            ((400, 800), 0.0033238232f32),
            ((400, 1000), 0.13391209f32),
            ((600, -1000), 0.08317007f32),
            ((600, -800), 0.02169337f32),
            ((600, -600), -0.07605565f32),
            ((600, -400), 0.6699571f32),
            ((600, -200), 0.43031088f32),
            ((600, 0), 0.2863704f32),
            ((600, 200), 0.8479774f32),
            ((600, 400), 0.33766848f32),
            ((600, 600), 1.2939436f32),
            ((600, 800), 0.5734297f32),
            ((600, 1000), 0.23295875f32),
            ((800, -1000), -0.0016568054f32),
            ((800, -800), 0.0118271075f32),
            ((800, -600), 0.116723984f32),
            ((800, -400), 0.748354f32),
            ((800, -200), 0.5145798f32),
            ((800, 0), 1.3620454f32),
            ((800, 200), 0.3075331f32),
            ((800, 400), -0.0031769574f32),
            ((800, 600), 0.25992817f32),
            ((800, 800), 0.19284995f32),
            ((800, 1000), 0.33883432f32),
            ((1000, -1000), -0.09807106f32),
            ((1000, -800), 0.265128f32),
            ((1000, -600), 0.31908166f32),
            ((1000, -400), 0.3983419f32),
            ((1000, -200), 0.5943536f32),
            ((1000, 0), 0.5574826f32),
            ((1000, 200), 0.39628267f32),
            ((1000, 400), 0.40190077f32),
            ((1000, 600), -0.12f32),
            ((1000, 800), 0.21975446f32),
            ((1000, 1000), -0.20376506f32),
        ];

        for ((x, z), value) in values {
            let pos = &NoisePos::Unblended(UnblendedNoisePos::new(x, 60, z));
            assert_eq!(spline.sample(pos), value);
        }
    }
}
